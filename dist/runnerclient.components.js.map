{"version":3,"sources":["webpack://RunnerClient/./src/components.js","webpack://RunnerClient/./src/services/translation_service.js","webpack://RunnerClient/./src/services/file_validation_service.js","webpack://RunnerClient/./src/services/log_service.js","webpack://RunnerClient/./src/services/aspera_connect_service.js","webpack://RunnerClient/./src/services/file_factory.js","webpack://RunnerClient/./src/services/file_name_validation_service.js","webpack://RunnerClient/./src/components/runner_thumbnail_updater/template.js","webpack://RunnerClient/./src/services/thumbnail_replacement_service.js","webpack://RunnerClient/./src/components/runner_thumbnail_updater/component.js","webpack://RunnerClient/./src/components/runner_uploader/template.js","webpack://RunnerClient/./src/services/thumbnail_validation_service.js","webpack://RunnerClient/./src/services/file_upload_service.js","webpack://RunnerClient/./src/services/package_manifest_service.js","webpack://RunnerClient/./src/services/aspera_transfer_spec_formatter_service.js","webpack://RunnerClient/./src/services/aspera_upload_service.js","webpack://RunnerClient/./src/services/aspera_file_serializer.js","webpack://RunnerClient/./src/services/aspera_drag_drop_service.js","webpack://RunnerClient/./src/components/runner_uploader/__file.js","webpack://RunnerClient/./src/components/runner_uploader/component.js","webpack://RunnerClient/./src/components/runner_client_config/component.js"],"names":["RunnerClientConfiguration","__webpack_require__","RunnerUploader","RunnerThumbnailUpdater","module","exports","I18n","Config","translations","TranslationService","_i18n","this","i18n","_configureI18n","t","apply","arguments","locale","FileValidationService","fileName","toLowerCase","match","filePath","replace","LogService","_console","logLevelInt","console","info","_console2","warn","_console3","log","uuid","DEFAULT_EVENT_CALLBACKS","transfer","transferComplete","status","start","AsperaConnectService","id","connectInstaller","window","AW4","ConnectInstaller","_connect","Connect","dragDropEnabled","minVersion","addEventListener","EVENT","STATUS","_handleAsperaEvent","bind","initSession","activeTransfers","uploadBatchCount","transferSpecs","connectionSettings","_this","connect","TRANSFER","tokens","currentPromise","startTransfer","transferSpec","Promise","resolve","reject","result","success","error","push","request_id","transfer_spec","_executeEventListenersFor","allPromises","map","newPromise","then","promise","all","successCallback","showSelectFileDialog","showSelectFolderDialog","eventName","eventData","_handleAsperaStatusEvent","_handleAsperaTransferEvent","eventCallbacks","forEach","cb","INITIALIZING","RETRYING","showLaunching","FAILED","showDownload","OUTDATED","showUpdate","RUNNING","connected","_this2","transfers","data","_getTransferDataFor","percentage","splice","index","length","token","isBatchComplete","hasActiveTransfers","_removeTransferListener","hasOwnProperty","aspera_connect_settings","indexOf","removeEventListener","_eventCallbacks","Object","assign","initialize","keys","FileNameValidationService","ThumbnailValidationService","FileFactory","file","_classCallCheck","getFileName","name","fullFilePath","processing","size","fileObj","hasValidCharacters","containsValidCharacters","hasExtension","containsExtension","hasValidExtension","containsValidExtension","valid","doesNotRequireExtension","validThumbnail","validFile","UNSUPPORTED_FILE_EXTENSIONS","test","getExtension","includes","TRANSLATION_SCOPE","scope","key","translate","template","document","createElement","innerHTML","API","axios","ThumbnailReplacementService","assetItemID","replaceThumbnail","response","debug","mcsId","mcs_id","_uploadImageToMCS","mcsResponse","thumbnail","thumbnails","find","type","thumbnail_url","location","FormData","append","request","url","method","headers","Authorization","onUploadProgress","evt","EVENTS","ELEMENT_NAME","ShadyCSS","prepareTemplate","_possibleConstructorReturn","__proto__","getPrototypeOf","call","empty","attachShadow","mode","appendChild","content","cloneNode","_addEventListeners","_dragEnterListener","preventDefault","stopPropagation","incoming","_dragLeaveListener","_dragOverListener","_dropListener","_handleDrop","uploadBtn","shadowRoot","getElementById","_uploadClickListener","_beginUpload","addFileBtn","_addFilesClickListener","click","fileInput","_fileAddedListener","_handleFileAdded","_this3","errors","uploading","promises","assetItemIDs","replaceThumbnailFor","results","bulkUpdateAssetItems","uploadComplete","_emitUploadCompleteEvent","catch","err","_setErrorMessage","_emitUploadFailedEvent","dispatchEvent","CustomEvent","UPLOAD_COMPLETE","bubbles","detail","filename","UPLOAD_FAILED","event","files","dataTransfer","_setPreview","target","errMsg","errText","innerText","_this4","previewContainer","children","Array","from","el","remove","progressEl","reader","FileReader","onprogress","max","total","value","loaded","onload","img","src","onerror","readAsDataURL","getAttribute","val","Error","elName","setAttribute","removeAttribute","_assetItemIDs","constructor","every","undefined","hasAttribute","customElements","get","define","register","Utils","BROWSER","EDGE","VALID_THUMBNAIL_FILE_EXTENSIONS","MAX_THUMBNAIL_SIZE","fileSize","isValidFileSize","MAX_UPLOAD_COUNT","FileUploadService","currentFiles","fileList","removeDuplicates","_toConsumableArray","filesAdded","newFileList","existingFileNames","uniqueFileList","ffile","fileIdx","findIndex","PackageManifestService","asperaTransferEventData","packageTransferSpecs","path","paths","source","found","asset_item_id","custom_metadata_fields","manifestForFiles","category","label","fullFolderPath","roots","tree","_folderNameFromFullFolderPath","count","components","split","component","_isValid","child","nodeChildren","node","_removeEmptyChildren","manifestFor","manifest","numberOfFiles","numberOfFolders","sorted","processLevel","level","pathComponents","items","levels","item","_hasNonFolderChild","processed","_sort","concat","join","firstTwoCharacters","collection","sort","a","b","lowerNameA","lowerNameB","cloneDeep","AsperaTransferSpecFormatterService","uploadResponseData","nonPackageTransferSpec","packageIndex","fileIndex","packageMappings","package_transfer_specs","isFolder","packageTransferSpec","AsperaUploadService","options","attrs","package","fetchFolderContentsFromDragDropEvent","upload","formatted","asperaConnectService","connection_settings","activeUploads","assetItemAttrsCollection","ingestBatchId","ingest_batch_id","activeUpload","manifestForAsperaTransferEventData","completeIngestBatchUpload","_activeUploads","_asperaConnectService","_onTransferComplete","AsperaFileSerializer","dragDropManifestGrouping","fileNameComponents","dragEnter","dragLeave","dragOver","drop","AsperaDragDropService","callbacks","registerAll","_dragEnterCallback","dragEnterCallback","_dragLeaveCallback","dragLeaveCallback","_dragOverCallback","dragOverCallback","_dropCallback","dropCallback","_target","_executeEventCallbacksFor","filesDropped","i","fileObject","lastModifiedDate","_groupedFolderContents","manifestGrouping","connectHttpRequest","HTTP_METHOD","POST","SESSION_ID","entries","entry","isDirectory","readResolve","readReject","createReader","readEntries","childEntries","childReadPromise","_collectFiles","fullPath","grouping","_loop","fsEntry","webkitGetAsEntry","dirResolve","dirReject","dirPromise","RunnerUploader__File","REMOVE_FILE","dataset","_connectDragDrop","initiateUpload","addFiles","reset","_filesList","removeFileByUUID","_emitFilesRemovedEvent","showFileUploadDialog","_addFilesFromAspera","UPLOAD_STARTED","locked","folderIds","folderIDs","_listenForTransferComplete","_handleUploadFailure","_files","serialize","_emitFilesAddedEvent","_this5","addTarget","dragObject","_fileChangeHandler","FILES_ADDED","FILES_REMOVED","transferInfo","_this6","requestID","listener","transferCompleteInfo","_uploadComplete","listenerIdx","_this7","renderedUUIDs","li","fileEl","tooltip","prepend","_folderIDs","destinationFolder","_filesListEl","RunnerClient","configureClient","configure","authentication","environment","logLevel"],"mappings":"sHAAQA,EAA8BC,EAAQ,KAAtCD,0BACAE,EAAmBD,EAAQ,KAA3BC,eACAC,EAA2BF,EAAQ,KAAnCE,uBAERC,EAAOC,SACLL,4BACAG,yBACAD,6SCPF,IAAMI,EAAOL,EAAQ,KACbM,EAAWN,EAAQ,IAAnBM,OACFC,EAAeP,EAAQ,IAEvBQ,mLACsB,IAAAC,EAIxB,OAHKC,KAAKC,MACRD,KAAKE,kBAEAH,EAAAC,KAAKC,MAAKE,EAAVC,MAAAL,EAAAM,oDAIPV,EAAKE,aAAeA,EACpBF,EAAKW,OAASV,EAAOU,OACrBN,KAAKC,KAAON,WAIhBF,EAAOC,SAAYI,qTCnBbS,oLACgBC,GAClB,OAAQA,EAASC,cAAcC,MAAM,wBAA0B,uCAG9CC,GACjB,OAAOA,EAASC,QAAQ,gBAAiB,aAI7CnB,EAAOC,SAAYa,wTCTXX,EAAWN,EAAQ,IAAnBM,OAEFiB,8KAE2B,IAAAC,EAAzBlB,EAAOmB,aAAe,IACxBD,EAAAE,SAAQC,KAARb,MAAAU,EAAAT,0CAK2B,IAAAa,EAAzBtB,EAAOmB,aAAe,IACxBG,EAAAF,SAAQG,KAARf,MAAAc,EAAAb,2CAK2B,IAAAe,EAAzBxB,EAAOmB,aAAe,IACxBK,EAAAJ,SAAQK,IAARjB,MAAAgB,EAAAf,oBAKNZ,EAAOC,SAAYmB,ySCvBnB,IAAMS,EAAOhC,EAAQ,KAEfiC,GACJC,YACAC,oBACAC,UACAC,UAGIC,oLAEF,IAAIC,EAAKP,IACTtB,KAAK8B,iBAAmB,IAAIC,OAAOC,IAAIC,iBACvCjC,KAAKkC,SAAW,IAAIH,OAAOC,IAAIG,SAC7BN,GAAIA,EACJO,iBAAiB,EACjBC,WAf0B,UAiB5BrC,KAAKkC,SAASI,iBAAiBP,OAAOC,IAAIG,QAAQI,MAAMC,OAAQxC,KAAKyC,mBAAmBC,KAAK1C,OAC7FA,KAAKkC,SAASS,YAAYd,GAE1B7B,KAAK4C,mBACL5C,KAAK6C,iBAAmB,gCAqBbC,EAAeC,GAAoB,IAAAC,EAAAhD,KAC9CA,KAAKiD,QAAQX,iBAAiBP,OAAOC,IAAIG,QAAQI,MAAMW,SAAUlD,KAAKyC,mBAAmBC,KAAK1C,OAC9F,IAAImD,KACAC,SACAC,EAAgB,SAACC,GACnB,OAAO,IAAIC,QAAQ,SAACC,EAASC,GAC3B,IAAIC,EAASV,EAAKC,QAAQI,cAAcC,EAAcP,GACpDY,QAASH,EACTI,MAAOH,IAGLC,EAAOE,MACTH,EAAOC,EAAOE,QAEdT,EAAOU,KAAKH,EAAOI,YACnBJ,EAAOK,cAAgBT,EACvBN,EAAKgB,0BAA0B,QAASN,OAK1CO,EAAcnB,EAAcoB,IAAI,SAACZ,GACnC,GAAIF,EAAgB,CAClB,IAAIe,EAAaf,EAAegB,KAAK,WACnCf,EAAcC,KAGhB,OADAF,EAAiBe,EACVA,EAGP,OADAf,EAAiBC,EAAcC,KAQnC,OAHAtD,KAAK6C,kBAAoB,EACzB7C,KAAK4C,gBAAgB5C,KAAK6C,kBAAoBM,GAErCtB,GAAI7B,KAAK6C,iBAAkBwB,QAASd,QAAQe,IAAIL,iDAG/BM,GAC1BvE,KAAKiD,QAAQuB,sBACXb,QAASY,mDAIiBA,GAC5BvE,KAAKiD,QAAQwB,wBACXd,QAASY,+CAIaG,EAAWC,GAC/BD,IAAc3C,OAAOC,IAAIG,QAAQI,MAAMC,QAAYxC,KAAK4E,yBAAyBD,GACjFD,IAAc3C,OAAOC,IAAIG,QAAQI,MAAMW,UAAYlD,KAAK6E,2BAA2BF,qDAGxDD,EAAWC,GAC1C3E,KAAK8E,eAAeJ,GAAWK,QAAQ,SAAAC,GAAA,OAAMA,EAAGL,sDAGlBA,GAG9B,OAFA3E,KAAKgE,0BAA0B,SAAUW,GAElCA,GACP,KAAK5C,OAAOC,IAAIG,QAAQK,OAAOyC,aAC/B,KAAKlD,OAAOC,IAAIG,QAAQK,OAAO0C,SAC7BlF,KAAK8B,iBAAiBqD,gBACtB,MACF,KAAKpD,OAAOC,IAAIG,QAAQK,OAAO4C,OAC7BpF,KAAK8B,iBAAiBuD,eACtB,MACF,KAAKtD,OAAOC,IAAIG,QAAQK,OAAO8C,SAC7BtF,KAAK8B,iBAAiByD,aACtB,MACF,KAAKxD,OAAOC,IAAIG,QAAQK,OAAOgD,QAC7BxF,KAAK8B,iBAAiB2D,gEAKQd,GAAW,IAAAe,EAAA1F,KAC3C2E,EAAUgB,UAAUZ,QAAQ,SAACvD,GAC3B,GAAIA,EAASuC,cAAe,CAC1B2B,EAAK1B,0BAA0B,WAAYxC,GAE3C,IAAIoE,EAAOF,EAAKG,oBAAoBrE,GACpC,GAAIoE,GAC0B,IAAxBpE,EAASsE,WAAkB,CAC7B,IAAI3C,EAASuC,EAAK9C,gBAAgBgD,EAAK/D,IACvCsB,EAAO4C,OAAOH,EAAKI,MAAO,GAEJ,IAAlB7C,EAAO8C,eACFP,EAAK9C,gBAAgBgD,EAAK/D,IAGnC6D,EAAK1B,0BAA0B,oBAC7BxC,SAAUA,EACVK,GAAI+D,EAAK/D,GACTqE,MAAON,EAAKM,MACZC,iBAAkBhD,EAAO8C,aAO9BjG,KAAKoG,oBAAsBpG,KAAKqG,sEAOZ7E,GACzB,IAAK,IAAIK,KAAM7B,KAAK4C,gBAClB,GAAK5C,KAAK4C,gBAAgB0D,eAAezE,GAAzC,CAEA,IAAIsB,EAASnD,KAAK4C,gBAAgBf,GAClC,GAAIsB,EAAQ,CACV,IAAI+C,EAAQ1E,EAAS+E,wBAAwBzC,WACzCkC,EAAQ7C,EAAOqD,QAAQN,GAC3B,IAAe,IAAXF,EAAgB,OAASnE,GAAIA,EAAIqE,MAAOA,EAAOF,MAAOA,uDAM9DhG,KAAKiD,QAAQwD,oBAAoB1E,OAAOC,IAAIG,QAAQI,MAAMW,+CAlJlC4B,GACxB9E,KAAK0G,gBAAkBC,OAAOC,UAAWrF,EAAyBuD,mBAOlE,OAHK9E,KAAK0G,kBACR1G,KAAK0G,gBAAkBC,OAAOC,UAAWrF,IAEpCvB,KAAK0G,gDAOZ,OAHK1G,KAAKkC,UACRlC,KAAK6G,aAEA7G,KAAKkC,oDAkHZ,QAASyE,OAAOG,KAAK9G,KAAK4C,iBAAiBqD,gBAqB/CxG,EAAOC,SAAYkC,8DC/KXmF,EAA8BzH,EAAQ,KAAtCyH,0BACAxG,EAA0BjB,EAAQ,KAAlCiB,sBACAyG,EAA+B1H,EAAQ,KAAvC0H,2BACF1F,EAAOhC,EAAQ,KA4BrBG,EAAOC,SAAYuH,YAzBjB,SAAAA,EAAYC,gGAAMC,CAAAnH,KAAAiH,GAChBjH,KAAKQ,SAAWD,EAAsB6G,YAAYF,EAAKG,MACvDrH,KAAKsH,aAAeJ,EAAKG,KACzBrH,KAAKuH,YAAa,EAClBvH,KAAKwH,KAAON,EAAKM,KACjBxH,KAAKyH,QAAUP,EACflH,KAAKsB,KAAOA,IAEZtB,KAAK0H,mBAAqBX,EAA0BY,wBAAwB3H,KAAKQ,UACjFR,KAAK4H,aAAeb,EAA0Bc,kBAAkB7H,KAAKQ,UACrER,KAAK8H,kBAAoBf,EAA0BgB,uBAAuB/H,KAAKQ,UAE/ER,KAAKgI,MAAQ,WACX,OAAOjB,EAA0BiB,MAAMhI,KAAKQ,SAAUR,KAAKyH,QAAQQ,0BAGrEjI,KAAKkI,eAAiB,WACpB,IAAIC,EAAYnI,KAAKgI,QACjBE,EAAiBlB,EAA2BgB,MAAMd,GAEtD,OAAOiB,GAAaD,oSC1BlBE,EAAgC9I,EAAQ,GAAxC8I,4BACA7H,EAA0BjB,EAAQ,KAAlCiB,sBAEFwG,+LAC2BvG,GAC7B,OAAS,gCAAgC6H,KAAK7H,6CAGvBA,GACvB,QAASD,EAAsB+H,aAAa9H,kDAGhBA,GAC5B,OAAQ4H,EAA4BG,SAAShI,EAAsB+H,aAAa9H,kCAGrEA,EAAUyH,GACrB,OAAIA,EACKjI,KAAK2H,wBAAwBnH,GAE5BR,KAAK2H,wBAAwBnH,IACrCR,KAAK6H,kBAAkBrH,IACvBR,KAAK+H,uBAAuBvH,YAKlCf,EAAOC,SAAYqH,mEC3BXjH,EAAuBR,EAAQ,KAA/BQ,mBACF0I,GAAsBC,MAAO,0BAC7BtI,EAAI,SAACuI,GACT,OAAO5I,EAAmB6I,UAAUD,EAAKF,IAGrCI,EAAWC,SAASC,cAAc,YACxCF,EAASG,UAAT,ykEA4GY5I,EAAE,oBA5Gd,oBA6GYA,EAAE,uBA7Gd,oBA8GYA,EAAE,uBA9Gd,gGAoHYA,EAAE,YApHd,+JA6HmCA,EAAE,SA7HrC,gHAmIgBA,EAAE,aAnIlB,2HAyIgBA,EAAE,kBAzIlB,2HA8ImDA,EAAE,WA9IrD,6JAmJiDA,EAAE,UAnJnD,wCAwJAV,EAAOC,QAAUkJ,iSC/JTI,EAAQ1J,EAAQ,IAAhB0J,IACAnI,EAAevB,EAAQ,KAAvBuB,WACFoI,EAAQ3J,EAAQ,IAEhB4J,2LACuBC,EAAajC,GAAM,IAAAlE,EAAAhD,KAE5C,OAAOgJ,EAAII,iBAAiBD,EAAajC,EAAK1G,UAC3C4D,KAAK,SAACiF,GACLxI,EAAWyI,MAAX,IAAqBtG,EAAKqE,KAA1B,4BAA2DgC,GAC3D,IAAMnD,EAAQmD,EAASzD,KAAKM,MACtBqD,EAAQF,EAASzD,KAAK4D,OAE5B,OAAOxG,EAAKyG,kBAAkBF,EAAOrD,EAAOgB,EAAKO,WAElDrD,KAAK,SAACsF,GACL,IAAIC,EAAYD,EAAY9D,KAAKgE,WAAWC,KAAK,SAAA1J,GAAA,MAAgB,UAAXA,EAAE2J,OACxD,OACEjI,GAAIsH,EACJY,cAAeJ,EAAUK,sDAKRT,EAAOrD,EAAOgB,GAAM,IAAAxB,EAAA1F,KACrC4F,EAAO,IAAIqE,SAGjB,OAFArE,EAAKsE,OAAO,OAAQhD,GAEb+B,EAAMkB,SACXC,0CAA2Cb,EAA3C,uBACAc,OAAQ,OACRzE,KAAMA,EACN0E,SACEC,cAAA,UAA2BrE,GAE7BsE,iBAAkB,SAACC,GAAU5J,EAAWyI,MAAX,IAAqB5D,EAAK2B,KAA1B,oBAAmDoD,eAKtFhL,EAAOC,SAAYwJ,6eCvCXF,EAAQ1J,EAAQ,IAAhB0J,IACA/B,EAAgB3H,EAAQ,KAAxB2H,YACApG,EAAevB,EAAQ,KAAvBuB,WACAqI,EAAgC5J,EAAQ,KAAxC4J,4BACApJ,EAAuBR,EAAQ,KAA/BQ,mBACF0I,GAAsBC,MAAO,0BAC3BiC,EAAWpL,EAAQ,GAAnBoL,OACFC,EAAe,2BACf/B,EAAWtJ,EAAQ,KACrByC,OAAO6I,UACT7I,OAAO6I,SAASC,gBAAgBjC,EAAU+B,OAGtCnL,cAGJ,SAAAA,iGAAc2H,CAAAnH,KAAAR,GAAA,IAAAwD,mKAAA8H,CAAA9K,MAAAR,EAAAuL,WAAApE,OAAAqE,eAAAxL,IAAAyL,KAAAjL,OAAA,OAEZgD,EAAKkI,OAAQ,EACIlI,EAAKmI,cAAcC,KAAM,SAC/BC,YAAYzC,EAAS0C,QAAQC,WAAU,IAJtCvI,+WAFQ,OAAO2H,qDAU3B3K,KAAKwL,kEA6Gc,IAAA9F,EAAA1F,KAEnBA,KAAKyL,mBAAsB,SAAChB,GAC1BA,EAAIiB,iBACJjB,EAAIkB,kBACJjG,EAAKkG,UAAW,GACflJ,KAAK1C,MACRA,KAAK6L,mBAAsB,SAACpB,GAC1BA,EAAIiB,iBACJjB,EAAIkB,kBACJjG,EAAKkG,UAAW,GACflJ,KAAK1C,MACRA,KAAK8L,kBAAqB,SAACrB,GACzBA,EAAIiB,iBACJjB,EAAIkB,mBACHjJ,KAAK1C,MACRA,KAAK+L,cAAiB,SAACtB,GACrBA,EAAIiB,iBACJjB,EAAIkB,kBACJjG,EAAKkG,UAAW,EAChBlG,EAAKsG,YAAYvB,IAChB/H,KAAK1C,MAERA,KAAKsC,iBAAiB,YAAatC,KAAKyL,oBACxCzL,KAAKsC,iBAAiB,YAAatC,KAAK6L,oBACxC7L,KAAKsC,iBAAiB,WAAYtC,KAAK8L,mBACvC9L,KAAKsC,iBAAiB,OAAQtC,KAAK+L,eAGnC,IAAME,EAAYjM,KAAKkM,WAAWC,eAAe,iBACjDnM,KAAKoM,qBAAwB,SAAC3B,GAC5BA,EAAIiB,iBACJjB,EAAIkB,kBACJjG,EAAK2G,gBACJ3J,KAAK1C,MACRiM,EAAU3J,iBAAiB,QAAStC,KAAKoM,sBAGzC,IAAME,EAAatM,KAAKkM,WAAWC,eAAe,mBAClDnM,KAAKuM,uBAA0B,SAAC9B,GAC9BA,EAAIkB,kBACJlB,EAAIiB,iBACJhG,EAAKwG,WAAWC,eAAe,kBAAkBK,SAChD9J,KAAK1C,MACRsM,EAAWhK,iBAAiB,QAAStC,KAAKuM,wBAG1C,IAAME,EAAYzM,KAAKkM,WAAWC,eAAe,kBACjDnM,KAAK0M,mBAAsB,SAACjC,GAC1BA,EAAIkB,kBACJlB,EAAIiB,iBACJhG,EAAKiH,iBAAiBlC,IACrB/H,KAAK1C,MACRyM,EAAUnK,iBAAiB,SAAUtC,KAAK0M,2DAG7B,IAAAE,EAAA5M,KACbA,KAAK6M,QAAS,EACd7M,KAAK8M,WAAY,EACjB,IAAIC,EAAW/M,KAAKgN,aAAa9I,IAAI,SAAAiF,GACnC,OAAOD,EAA4B+D,oBAAoB9D,EAAayD,EAAK1F,QAE3E3D,QAAQe,IAAIyI,GAAU3I,KACpB,SAAC8I,GACC,OAAOlE,EAAImE,qBAAqBD,KAElC9I,KACA,WACEwI,EAAKE,WAAY,EACjBF,EAAKQ,gBAAiB,EACtBR,EAAKS,6BAEPC,MACA,SAACC,GACCX,EAAKE,WAAY,EACjBjM,EAAWM,KAAX,IAAoBwJ,EAApB,gCAAiE4C,GACjEX,EAAKY,iBAAiB,SACtBZ,EAAKa,uBAAuBF,wDAMhCvN,KAAK0N,cACH,IAAIC,YAAYjD,EAAOkD,iBACrBC,SAAS,EACTC,QACEd,aAAchN,KAAKgN,aACnBe,SAAU/N,KAAKkH,KAAK1G,4DAMLoD,GACrB5D,KAAK0N,cACH,IAAIC,YAAYjD,EAAOsD,eACrBH,SAAS,EACTC,QACEd,aAAchN,KAAKgN,aACnBe,SAAU/N,KAAKkH,KAAK1G,SACpBoD,MAAOA,0CAMHqK,GACVpN,EAAWyI,MAAX,IAAqBqB,EAArB,wBAA0DsD,GAC1DjO,KAAK4D,OAAQ,EACb,IAAIsK,EAAQD,EAAME,aAAaD,MAC/B,GAAIA,EAAMjI,OAAS,EACjBjG,KAAKwN,iBAAiB,eADxB,CAKA,IAAItG,EAAO,IAAID,EAAYiH,EAAM,IAC5BhH,EAAKgB,kBAKVlI,KAAKkH,KAAOA,EACZlH,KAAKoO,YAAYlH,IALflH,KAAKwN,iBAAiB,yDAQTS,GACfpN,EAAWyI,MAAX,IAAqBqB,EAArB,yBAA2DsD,GAC3DjO,KAAK4D,OAAQ,EAEb,IAAIsD,EAAO,IAAID,EAAYgH,EAAMI,OAAOH,MAAM,IACzChH,EAAKgB,kBAKVlI,KAAKkH,KAAOA,EACZlH,KAAKoO,YAAYlH,IALflH,KAAKwN,iBAAiB,wDAQT9E,GACf,IAAI4F,EAAStO,KAAKkM,WAAWC,eAAe,iBACxCoC,EAAUzO,EAAmB6I,UAAUD,EAAKF,GAChD8F,EAAOE,UAAYD,EACnBvO,KAAK4D,OAAQ,sCAGHsD,GAAM,IAAAuH,EAAAzO,KAChBA,KAAKkL,OAAQ,EAEb,IAAIwD,EAAmB1O,KAAKkM,WAAWC,eAAe,WAClDuC,EAAiBC,SAAS1I,QAC5B2I,MAAMC,KAAKH,EAAiBC,UAAU5J,QAAQ,SAAA+J,GAAA,OAAMA,EAAGC,WAEzD,IAAIC,EAAanG,SAASC,cAAc,YACxC4F,EAAiBrD,YAAY2D,GAE7B,IAAIC,EAAS,IAAIC,WACjBD,EAAOE,WAAa,SAAC1E,GACnB5J,EAAWyI,MAAX,IAAqBqB,EAArB,wBAA0DF,GAC1DuE,EAAWI,IAAM3E,EAAI4E,MACrBL,EAAWM,MAAQ7E,EAAI8E,QAGzBN,EAAOO,OAAS,SAAC/E,GACf5J,EAAWyI,MAAX,IAAqBqB,EAArB,sBAAwDF,GACxDuE,EAAWD,SACX,IAAIU,EAAM5G,SAASC,cAAc,OACjC2G,EAAIC,IAAMT,EAAOvL,OACjBgL,EAAiBrD,YAAYoE,IAG/BR,EAAOU,QAAU,SAAClF,GAChB5J,EAAWM,KAAX,IAAoBwJ,EAApB,0BAA2DF,GAC3DgE,EAAKvD,OAAQ,EACbuD,EAAKjB,iBAAiB,mBAGxByB,EAAOW,cAAc1I,EAAKO,6CAhR1B,OAAOzH,KAAK6P,aAAa,+BAGXC,GACd,GAAKA,EAEE,CACL,IAAK,MAAMzH,KAAKyH,GACd,MAAM,IAAIC,MAAJ,KAAe/P,KAAKgQ,OAApB,uCAERhQ,KAAKiQ,aAAa,gBAAiBH,QALnC9P,KAAKkQ,gBAAgB,sDAiBvB,OAPKlQ,KAAKmQ,gBACJnQ,KAAKmJ,YACPnJ,KAAKmQ,eAAiBnQ,KAAKmJ,aAE3BnJ,KAAKmQ,kBAGFnQ,KAAKmQ,4BAGGL,GACf,GAA6B,UAAzBA,EAAIM,YAAY/I,OAAqByI,EAAIO,MAAM,SAAAxO,GAAA,MAAM,MAAMwG,KAAKxG,KAClE,MAAM,IAAIkO,MAAJ,KAAe/P,KAAKgQ,OAApB,+CAERhQ,KAAKmJ,iBAAcmH,EACnBtQ,KAAKmQ,cAAgBL,gCAKrB,OAAO9P,KAAKuQ,aAAa,uBAGjBT,GACJA,EACF9P,KAAKiQ,aAAa,QAAS,IAE3BjQ,KAAKkQ,gBAAgB,uCAKvB,OAAOlQ,KAAKuQ,aAAa,uBAGjBT,GACJA,EACF9P,KAAKiQ,aAAa,QAAS,IAE3BjQ,KAAKkQ,gBAAgB,0CAKvB,OAAOlQ,KAAKuQ,aAAa,0BAGdT,GACPA,EACF9P,KAAKiQ,aAAa,WAAY,IAE9BjQ,KAAKkQ,gBAAgB,8CAKvB,OAAOlQ,KAAKuQ,aAAa,2BAGbT,GACRA,EACF9P,KAAKiQ,aAAa,YAAa,IAE/BjQ,KAAKkQ,gBAAgB,oDAKvB,OAAOlQ,KAAKuQ,aAAa,iCAGRT,GACbA,EACF9P,KAAKiQ,aAAa,kBAAmB,IAErCjQ,KAAKkQ,gBAAgB,wDA2LlBnO,OAAOyO,eAAeC,IAAIzQ,KAAKgQ,SAClCjO,OAAOyO,eAAeE,OACpB1Q,KAAKgQ,OACLhQ,iDAnSJ,OACE,cACA,QACA,QACA,WACA,YACA,2BAmSNR,EAAuBmR,WAEvBlR,EAAOC,SAAYF,gECxUXM,EAAuBR,EAAQ,KAA/BQ,mBAGF0I,GAAsBC,MADb1G,OAAOC,IAAI4O,MAAMC,QAAQC,KACI,sBAAwB,kBAE9D3Q,EAAI,SAACuI,GACT,OAAO5I,EAAmB6I,UAAUD,EAAKF,IAGrCI,EAAWC,SAASC,cAAc,YACxCF,EAASG,UAAT,q3DAiGY5I,EAAE,oBAjGd,oBAkGYA,EAAE,uBAlGd,gGAwGYA,EAAE,YAxGd,+IAiHgBA,EAAE,SAjHlB,gHAuHgBA,EAAE,aAvHlB,2HA6HgBA,EAAE,kBA7HlB,+DA8HqDA,EAAE,cA9HvD,+HAmIoDA,EAAE,YAnItD,4GAuIiDA,EAAE,UAvInD,wCA4IAV,EAAOC,QAAUkJ,mSCtJ+CtJ,EAAQ,GAAhEyR,oCAAiCC,uBACjCzQ,EAA0BjB,EAAQ,KAAlCiB,sBAEFyG,8LAC0BxG,GAC5B,OAAOuQ,EAAgCxI,SAAShI,EAAsB+H,aAAa9H,4CAG9DyQ,GACrB,OAAOA,GAAYD,gCAGR9J,GACX,OAAQlH,KAAK+H,uBAAuBb,EAAKG,OAASrH,KAAKkR,gBAAgBhK,EAAKM,eAIhF/H,EAAOC,SAAYsH,6TCjBXC,EAAgB3H,EAAQ,KAAxB2H,YACAkK,EAAqB7R,EAAQ,GAA7B6R,iBAEFC,gLACYC,EAAcC,GAAU,IAAAtO,EAAAhD,KACtC,OAAO,IAAIuD,QAAQ,SAACC,EAASC,GAC3B6N,EAAWtO,EAAKuO,iBAAiBF,EAAcC,GAE1CD,EAAapL,OAASqL,EAASrL,OAAUkL,EAC5C1N,GACEG,4EAA6EuN,EAA7E,aAGFE,EAAaxN,KAAbzD,MAAAiR,wHAAAG,CAAqBF,IACrB9N,GAAU0K,MAAOmD,EAAcI,WAAYH,EAASrL,qDAKlCoL,EAAcK,GACpC,IAAIC,EAAoBN,EAAanN,IAAI,SAACgD,GAAD,OAAUA,EAAKI,eACpDsK,KASJ,OAPAF,EAAY3M,QAAQ,SAAUmC,GAC5B,IAAKyK,EAAkBpJ,SAASrB,EAAKG,MAAO,CAC1C,IAAIwK,EAAQ,IAAI5K,EAAYC,GAC5B0K,EAAe/N,KAAKgO,MAIjBD,2CAGe1D,EAAO5M,GAC7B,OAAO,IAAIiC,QAAQ,SAACC,EAASC,GAC3B,IAAIqO,EAAU5D,EAAM6D,UAAU,SAAA7K,GAAUA,EAAK5F,OACzCwQ,EACFtO,EAAQ0K,EAAMnI,OAAO+L,EAAS,IAE9BrO,eAMRhE,EAAOC,SAAY0R,oTC7CXrK,EAA8BzH,EAAQ,KAAtCyH,0BAEFiL,0MACsCC,EAAyBC,GACjE,IAAIC,EAAOF,EAAwBlO,cAAcqO,MAAM,GAAGC,OACtDC,EAAQJ,EAAqBrI,KAAK,SAACjE,GAAW,OAAOA,EAAK7B,cAAcqO,MAAM,GAAGC,SAAWF,IAC5FjE,EAAQ+D,EAAwB/D,MAAMhK,IAAI,SAACuD,GAAc,OAAOA,EAAQP,OAC5E,OAASrF,GAAIyQ,EAAMC,cAAeC,uBAAwBxS,KAAKyS,iBAAiBvE,EAAOiE,6CAGjEjE,EAAOiE,GAAM,IAAAnP,EAAAhD,KAkCnC,QAAW0S,SAAU,YAAaC,MAAO,WAAYrD,MAjCnC,SAACpB,EAAO0E,GACxB,IACIC,KACAC,GAAezL,KAFFrE,EAAK+P,8BAA8BH,GAEfjE,SAAUkE,EAAOG,MAAO,GA2B7D,OA1BA9E,EAAMnJ,QAAQ,SAACmC,GACb,IACI+L,EADa/L,EAAKgM,MAAMN,EAAiB,KAAK,GACxBM,MAAM,KAC5BjN,EAAagN,EAAWhN,OACxB0I,EAAakE,EACjBI,EAAWlO,QAAQ,SAACoO,EAAWnN,GAC7B,GAAIA,IAAUC,EAAS,EACjBjD,EAAKoQ,SAASD,KAChBxE,EAAS9K,MAAOwD,KAAM8L,IACtBL,EAAKE,OAAS,OAEX,CACL,IAAIV,EAAQ3D,EAAS9E,KAAK,SAACwJ,GAAY,OAAOA,EAAMhM,OAAS8L,IAC7D,GAAIb,EACF3D,EAAW2D,EAAM3D,aACZ,CACL,IAAI2E,KACAC,GAASlM,KAAM8L,EAAWxE,SAAU2E,GACxC3E,EAAS9K,KAAK0P,GACd5E,EAAW2E,QAMnBtQ,EAAKwQ,qBAAqBV,GACnBA,EAGmDW,CAAYvF,EAAOiE,qCAGlEuB,GAAU,IAAAhO,EAAA1F,KACnB2T,EAAgB,EAChBC,EAAkB,EAClBC,KA4BJ,OA1BmB,SAAfC,EAAgBC,EAAOC,GACzB,IAAIC,KACAC,KAEJH,EAAMhP,QAAQ,SAACoP,GACTA,EAAK7N,eAAe,YAClBZ,EAAK0O,mBAAmBD,KAC1BP,GAAmB,EACnBM,EAAOrQ,KAAKsQ,KAGdR,GAAiB,EACjBM,EAAMpQ,KAAKsQ,MAIf,IAAIE,EAAY3O,EAAK4O,MAAML,GAAO/P,IAAI,SAACiQ,GACrC,OAAOH,EAAeO,OAAOJ,EAAK9M,MAAMmN,KAAK,OAG/CX,EAASA,EAAOU,OAAOF,GACvB3O,EAAK4O,MAAMJ,GAAQnP,QAAQ,SAACgP,GAAYD,EAAaC,EAAMpF,SAAUqF,EAAeO,OAAOR,EAAM1M,SAGnGyM,CAAcJ,EAAS/E,kBAGrBgF,cAAeA,EACfC,gBAAiBA,EACjBC,OAAQA,yDAQyBjB,GACnC,IAAIoB,EAAiBpB,EAAeM,MAAM,KAC1C,OAAOc,EAAeA,EAAe/N,OAAS,8CAGtB8N,GAAO,IAAAnH,EAAA5M,KAC/B,OAAO+T,EAAMzN,eAAe,aAAeyN,EAAMpF,UAAYoF,EAAMpF,SAAS9E,KAAK,SAACsK,GAChF,OAAIA,EAAK7N,eAAe,aACfsG,EAAKwH,mBAAmBD,sCAOrBhB,GACd,IAAIvL,EAAeb,EAA0Bc,kBAAkBsL,GAC3DsB,EAAqBtB,EAAU,GAAKA,EAAU,GAClD,MAAmC,cAA5BA,EAAU1S,eAAwD,OAAvBgU,KAAiC7M,GAAgBb,EAA0BgB,uBAAuBoL,iDAI1HY,GAAO,IAAAtF,EAAAzO,KACjC+T,EAAMpF,SAAS5J,QAAQ,SAACoP,EAAMnO,GACxBmO,EAAKxF,WACFwF,EAAKxF,SAAS1I,OAGjBwI,EAAK+E,qBAAqBW,GAF1BJ,EAAMpF,SAAS5I,OAAOC,EAAO,oCAQxB0O,GACX,OAAOA,EAAWC,KAAK,SAACC,EAAGC,GACzB,IAAIC,EAAaF,EAAEvN,KAAK5G,cACpBsU,EAAaF,EAAExN,KAAK5G,cACxB,OAAIqU,EAAaC,GACP,EACCD,EAAaC,EACf,EAEA,aAMftV,EAAOC,SAAYsS,qTC1InB,IAAMgD,EAAY1V,EAAQ,IAEpB2V,iLACaC,EAAoBhH,GACnC,IAAIiH,EAAyBH,EAAUE,EAAmBnR,eACtDqR,EAAe,EACfC,EAAY,EACZX,EAAcS,EAAuB/C,MAAMnM,QAAWkP,MACtDG,EAAkBN,EAAUE,EAAmBK,wBAkBnD,OAhBArH,EAAMnJ,QAAQ,SAAUmC,GACtB,IAAImH,SAEJ,GAAInH,EAAKO,QAAQ+N,SAAU,CACzB,IAAIC,EAAsBH,EAAgBF,GAAcrR,cACxD2Q,EAAW7Q,KAAK4R,GAChBpH,EAASoH,EAAoBrD,MAAM,GACnCgD,GAAgB,OAEhB/G,EAAS8G,EAAuB/C,MAAMiD,GACtCA,GAAa,EAGfhH,EAAOgE,OAASnL,EAAKI,gBAGdhD,IAAKoQ,EAAYY,gBAAiBA,YAI/C7V,EAAOC,SAAYuV,qUC9BXjM,EAAQ1J,EAAQ,IAAhB0J,IACApH,EAAyBtC,EAAQ,KAAjCsC,qBACAqT,EAAuC3V,EAAQ,KAA/C2V,mCACAjD,EAA2B1S,EAAQ,KAAnC0S,uBAEF0D,8KAuBUrE,EAAcsE,GAAS,IAAA3S,EAAAhD,KAC/BiU,EAAQ5C,EAAanN,IAAI,SAACgD,GAC5B,IAAI0O,GACFvO,KAAMH,EAAK1G,SACXqV,QAAS3O,EAAKO,QAAQ+N,UAOxB,OAJItO,EAAKO,QAAQqO,uCACfF,EAAMpD,uBAAyBR,EAAuBS,iBAAiBvL,EAAKO,QAAQqO,uCAAwC5O,EAAK1G,WAG5HoV,IAGT,OAAO5M,EAAI+M,OAAO9B,EAAO0B,OACtBvR,KAAK,SAACiF,GACL,IAAI2M,EAAYf,EAAmCe,UAAU3M,EAASzD,KAAMyL,GAExE3N,EAASV,EAAKiT,qBAAqBtU,MACrCqU,EAAU1R,IACV+E,EAASzD,KAAKsQ,qBAUhB,OAPAlT,EAAKmT,cAAczS,EAAO7B,KACxBqM,MAAOmD,EACP+E,4BACAd,gBAAiBU,EAAUV,gBAC3Be,cAAehN,EAASzD,KAAK0Q,iBAGxBjN,gDAkBczD,GACzB,IAAI2Q,EAAevW,KAAKmW,cAAcvQ,EAAK/D,IACtC0U,GAAiB3Q,EAAKO,kBAE3BoQ,EAAarI,MAAMnJ,QAAQ,SAACmC,GAC1B,GAAIA,EAAKO,QAAQ+N,WAAatO,EAAKO,QAAQqO,qCAAsC,CAC/E,IAAIF,EAAQ5D,EAAuBwE,mCACjC5Q,EAAKpE,SACL+U,EAAajB,iBAEfiB,EAAaH,yBAAyBvS,KAAK+R,MAI3CW,EAAaH,yBAAyBnQ,QACxC+C,EAAImE,qBAAqBoJ,EAAaH,0BAIxCpN,EAAIyN,0BAA0BF,EAAaF,sBACpCrW,KAAKmW,cAAcvQ,EAAK/D,2CAtF/B,OAHK7B,KAAK0W,iBACR1W,KAAK0W,mBAEA1W,KAAK0W,wDAIZ,QAAS/P,OAAOG,KAAK9G,KAAKmW,eAAelQ,oDAWzC,OAPKjG,KAAK2W,wBACR/U,EAAqBkD,gBACnBrD,kBAAmBzB,KAAK4W,oBAAoBlU,KAAK1C,QAEnDA,KAAK2W,sBAAwB/U,GAGxB5B,KAAK2W,+BA2EhBlX,EAAOC,SAAYgW,sTCpGbmB,iLACanT,GAGf,OAFYA,EAAOwK,MAAQxK,EAAOwK,MAAMC,aAAaD,MAAQxK,EAAOyK,aAAaD,OAEpEhK,IAAI,SAACgD,GAChB,IAAI0O,GACFvO,KAAMH,EAAKG,KACXG,KAAMN,EAAKM,KACXgO,SAAU,aAAanN,KAAKnB,EAAK4C,MACjC7B,yBAAyB,GAW3B,OARI2N,EAAMJ,UAAY9R,EAAOoT,2BAC3BlB,EAAME,qCAAuC,WAC3C,IAAIiB,EAAqB7P,EAAKG,KAAK6L,MAAM,SACrC1S,EAAWuW,EAAmBA,EAAmB9Q,OAAS,GAC9D,OAAOvC,EAAOoT,yBAAyBtW,KAIpCoV,aAKbnW,EAAOC,SAAYmX,uTCzBXjV,EAAyBtC,EAAQ,KAAjCsC,qBACAf,EAAevB,EAAQ,KAAvBuB,WACFmB,EAAMD,OAAOC,IAEbT,GACJ+C,OACA0S,aACAC,aACAC,YACAC,SAGIC,iLACa/I,EAAQvJ,GACvBlD,EAAqBqB,QAAQN,cAC7B3C,KAAKqO,OAASA,EAEd,IAAIgJ,EAAY1Q,OAAOC,UAAWrF,EAAyBuD,GACvDwS,IAAgBD,EAAU/S,IAAI2B,QAC5BoR,EAAUL,UAAU/Q,QAAUqR,KAClCtX,KAAKuX,mBAAqBvX,KAAKwX,kBAAkB9U,KAAK1C,MACtDqO,EAAO/L,iBAAiB,YAAatC,KAAKuX,sBAEtCF,EAAUJ,UAAUhR,QAAUqR,KAClCtX,KAAKyX,mBAAqBzX,KAAK0X,kBAAkBhV,KAAK1C,MACtDqO,EAAO/L,iBAAiB,YAAatC,KAAKyX,sBAEtCJ,EAAUH,SAASjR,QAAYoR,EAAUF,KAAKlR,QAAUqR,KAC5DtX,KAAK2X,kBAAoB3X,KAAK4X,iBAAiBlV,KAAK1C,MACpDqO,EAAO/L,iBAAiB,WAAYtC,KAAK2X,qBAErCN,EAAUF,KAAKlR,QAAUqR,KAC7BtX,KAAK6X,cAAgB7X,KAAK8X,aAAapV,KAAK1C,MAC5CqO,EAAO/L,iBAAiB,OAAQtC,KAAK6X,gBAGvC7X,KAAK8E,eAAiBuS,kCAItBrX,KAAKqO,OAAO5H,oBAAoB,YAAazG,KAAKuX,oBAClDvX,KAAKqO,OAAO5H,oBAAoB,YAAazG,KAAKyX,oBAClDzX,KAAKqO,OAAO5H,oBAAoB,WAAYzG,KAAK2X,mBACjD3X,KAAKqO,OAAO5H,oBAAoB,OAAQzG,KAAK6X,eAC7C7X,KAAK8E,eAAiB6B,OAAOC,UAAWrF,GACxCvB,KAAK+X,aAAUzH,4CAcQrC,GACvBA,EAAMtC,kBACNsC,EAAMvC,iBACN1L,KAAKgY,0BAA0B,aAAe/J,MAAOA,8CAG9BA,GACvBA,EAAMtC,kBACNsC,EAAMvC,iBACN1L,KAAKgY,0BAA0B,aAAe/J,MAAOA,6CAG/BA,GACtBA,EAAMtC,kBACNsC,EAAMvC,iBACN1L,KAAKgY,0BAA0B,YAAc/J,MAAOA,yCAGlCA,GAAO,IAAAjL,EAAAhD,KACzBiO,EAAMtC,kBACNsC,EAAMvC,iBAEN,IAAIuM,EAAehK,EAAME,aAAaD,MAClCtI,GACJA,iBACAA,EAAKuI,aAAaD,SAClB,IAAK,IAAIgK,EAAI,EAAGA,EAAID,EAAahS,OAAQiS,IAAK,CAC5C,IAAIC,GACFC,iBAAqBH,EAAaC,GAAGE,iBACrC/Q,KAAqB4Q,EAAaC,GAAG7Q,KACrCG,KAAqByQ,EAAaC,GAAG1Q,KACrCsC,KAAqBmO,EAAaC,GAAGpO,MAEvClE,EAAKuI,aAAaD,MAAMrK,KAAKsU,GAG/BnY,KAAKqY,uBAAuBpK,GAAO7J,KAAK,SAACkU,GAQvC1W,EAAqBqB,QAAQsV,mBAC3BvW,EAAIG,QAAQqW,YAAYC,KACxB,8BACA7S,EACA5D,EAAI4O,MAAM8H,YACR/U,QAZa,SAAC0F,GAChBrG,EAAKgV,0BACH,QACE/J,MAAOA,EAAOC,MAAO7E,EAAUyN,yBAA0BwB,2DAclC5T,EAAWkB,GAC1C5F,KAAK8E,eAAeJ,GAAWK,QAAQ,SAACC,GAASA,EAAGY,KACpD5F,KAAK8E,eAAeR,IAAIS,QAAQ,SAACC,GAASA,EAAGY,2CAG1B+S,EAASxG,EAAMuC,GAAY,IAAAhP,EAAA1F,KAC1C+M,KACJ,OAAO,IAAIxJ,QAAQ,SAACC,GAClBmV,EAAQ5T,QAAQ,SAAC6T,GACf,GAAIA,EAAMC,YAAa,CACrB,IAAIxU,EAAU,IAAId,QAAQ,SAACuV,EAAaC,GACtC,IAAI9J,EAAS2J,EAAMI,gBACD,SAAdC,IACFhK,EAAOgK,YAAY,SAACC,GAClB,GAAIA,EAAajT,OAAQ,CACvB,IAAIkT,EAAmBzT,EAAK0T,cAAcF,EAAcN,EAAMS,SAAU3E,GACxE3H,EAASlJ,KAAKsV,GACdF,SAEAH,KAED,SAACvL,GACF1M,EAAWM,KAAX,yCAAyDyX,EAAMS,SAAY9L,GAC3EwL,MAIJE,KAEFlM,EAASlJ,KAAKQ,QAEdqQ,EAAW7Q,KAAKsO,EAAO,IAAMyG,EAAMvR,QAIvC9D,QAAQe,IAAIyI,GAAU3I,KAAK,WACzBZ,EAAQkR,sDAKgBjK,GAAK,IAAAmC,EAAA5M,KACjC,OAAO,IAAIuD,QAAQ,SAACC,EAASC,GAC3B,IAAI6V,KACAvM,KAGCtC,EAAI0D,aAAa8F,OAASzQ,EAAQ8V,GAEvC,IAPsC,IAAAC,EAAA,SAO7BrB,GACP,IACIsB,EADO/O,EAAI0D,aAAa8F,MAAMiE,GACfuB,mBACnB,GAAID,EAAQX,YAAa,CACvB,IAAI5J,EAASuK,EAAQR,eACrBjM,EAASlJ,KAAK,IAAIN,QAAQ,SAACmW,EAAYC,GACrC1K,EAAOgK,YAAY,SAACN,GAClB,IAAIiB,EAAahN,EAAKwM,cAAcT,EAASa,EAAQH,aACrDtM,EAASlJ,KAAK+V,GACdA,EAAWxV,KAAK,SAACV,GACf4V,EAASE,EAAQnS,MAAQ3D,EACzBgW,KACCC,IACF,SAACpM,GACF1M,EAAWM,KAAX,yCAAyDqY,EAAQH,SAAY9L,GAC7EoM,WAfCzB,EAAI,EAAGA,EAAIzN,EAAI0D,aAAa8F,MAAMhO,OAAQiS,IAAKqB,EAA/CrB,GAqBT3U,QAAQe,IAAIyI,GAAU3I,KAAK,WACzBvD,EAAWyI,MAAM,kEAAmEgQ,GACpF9V,EAAQ8V,IACP7V,oCAzIL,OAAOzD,KAAK+X,sBAGIjJ,GAChB,GAAI9O,KAAK+X,QACP,MAAM,IAAIhI,MAAM,yEAElB/P,KAAK+X,QAAUjJ,WAuInBrP,EAAOC,SAAY0X,ueC/LX1M,EAAWpL,EAAQ,GAAnBoL,OAEF9B,EAAWC,SAASC,cAAc,YACxCF,EAASG,UAAT,u6CA0EIhH,OAAO6I,UACT7I,OAAO6I,SAASC,gBAAgBjC,EA7Eb,qCAmFnB,SAAAiR,iGAAc1S,CAAAnH,KAAA6Z,GAAA,IAAA7W,mKAAA8H,CAAA9K,MAAA6Z,EAAA9O,WAAApE,OAAAqE,eAAA6O,IAAA5O,KAAAjL,OAAA,OAEKgD,EAAKmI,cAAcC,KAAM,SAC/BC,YAAYzC,EAAS0C,QAAQC,WAAU,IAHtCvI,+WAFQ,MAjFH,2EAyFC,IAAA0C,EAAA1F,KAClBA,KAAKkM,WAAWC,eAAe,UAAU7J,iBAAiB,QAAS,SAACmI,GAClEA,EAAIiB,iBACJjB,EAAIkB,kBAEJjG,EAAKgI,cACH,IAAIC,YAAYjD,EAAOoP,aACrBjM,SAAS,EACTC,QAAUxM,KAAMoE,EAAKqU,QAAQzY,0CAWnC,OAAOtB,KAAKuQ,aAAa,wBAGhBT,GACLA,EACF9P,KAAKiQ,aAAa,SAAU,IAE5BjQ,KAAKkQ,gBAAgB,+CAMlBnO,OAAOyO,eAAeC,IAAIzQ,KAAKgQ,SAClCjO,OAAOyO,eAAeE,OACpB1Q,KAAKgQ,OACLhQ,iDApBJ,OAAQ,mBA0BS2Q,qdCnIrBrR,EAAQ,SACAoL,EAAWpL,EAAQ,GAAnBoL,OACA9I,EAAyBtC,EAAQ,KAAjCsC,qBACAwV,EAA0B9X,EAAQ,KAAlC8X,sBACAP,EAAyBvX,EAAQ,KAAjCuX,qBACAnB,EAAwBpW,EAAQ,KAAhCoW,oBACAtE,EAAsB9R,EAAQ,KAA9B8R,kBACFxI,EAAWtJ,EAAQ,KAKrByC,OAAO6I,UACT7I,OAAO6I,SAASC,gBAAgBjC,EALb,uBAQfrJ,cAWJ,SAAAA,iGAAc4H,CAAAnH,KAAAT,GAAA,IAAAyD,mKAAA8H,CAAA9K,MAAAT,EAAAwL,WAAApE,OAAAqE,eAAAzL,IAAA0L,KAAAjL,OAAA,OAEZgD,EAAKkI,OAAQ,EACIlI,EAAKmI,cAAcC,KAAM,SAC/BC,YAAYzC,EAAS0C,QAAQC,WAAU,IAJtCvI,+WAPQ,MAZH,qEA+BC,IAAA0C,EAAA1F,KAClBA,KAAKga,mBAEgBha,KAAKkM,WAAWC,eAAe,iBACvC7J,iBAAiB,QAAStC,KAAKia,eAAevX,KAAK1C,OAEzCA,KAAKkM,WAAWC,eAAe,oBACvC7J,iBAAiB,QAAStC,KAAKka,SAASxX,KAAK1C,OAEtCA,KAAKkM,WAAWC,eAAe,mBACvC7J,iBAAiB,QAAStC,KAAKma,MAAMzX,KAAK1C,OAExDA,KAAKoa,WAAW9X,iBAAiBoI,EAAOoP,YAAa,SAACrP,GAIpD,GAHAA,EAAIiB,iBACJjB,EAAIkB,mBAEAjG,EAAKoH,UAAT,CAEA,IAAIuB,EAAS5D,EAAI4D,OAEjB+C,EAAkBiJ,iBAAiB3U,EAAKwI,MAAOzD,EAAIqD,OAAOxM,MAAM8C,KAC9D,WACEiK,EAAOU,SACPrJ,EAAK4U,6EAWXlD,EAAsB+C,2CAyHb,IAAAvN,EAAA5M,KACT4B,EAAqB2Y,qBAAqB,SAAC7W,GACzCkJ,EAAK4N,oBAAoB9W,8CAKvB1D,KAAK8M,YACL9M,KAAK4D,QAAS5D,KAAK4D,OAAQ,GAE/B5D,KAAK0N,cAAc,IAAIC,YAAYjD,EAAO+P,gBACxC5M,SAAS,EACTC,QACEI,MAAOlO,KAAKkO,UAGhBlO,KAAK8M,WAAY,EACjB8B,MAAMC,KAAK7O,KAAKoa,WAAWzL,UAAU5J,QAAQ,SAAAmC,GAAA,OAAQA,EAAKwT,QAAS,IACnEtD,EAAsB+C,QAEtBzE,EAAoBK,OAAO/V,KAAKkO,OAASyM,UAAW3a,KAAK4a,YAAaxW,KACpEpE,KAAK6a,2BAA2BnY,KAAK1C,MACrCA,KAAK8a,qBAAqBpY,KAAK1C,wCAKjCA,KAAK+a,YAASzK,EACd1B,MAAMC,KAAK7O,KAAKoa,WAAWzL,UAAU5J,QAAQ,SAAAmC,GAAA,OAAQA,EAAK6H,WAC1D/O,KAAKoN,gBAAiB,EACtBpN,KAAKkL,OAAQ,EACblL,KAAKga,+DAGapU,GAAM,IAAA6I,EAAAzO,KACxBoR,EAAkB8I,SAChBla,KAAKkO,MACL2I,EAAqBmE,UAAUpV,IAC/BxB,KACA,SAACwB,GAAW6I,EAAKwM,sBAAqB,EAAMrV,IAC5C,SAAChC,GAAY6K,EAAKwM,sBAAqB,EAAOrX,gDAI/B,IAAAsX,EAAAlb,KACjBoX,EAAsB+D,UAAUnb,MAC9BgX,WACE,WAAQkE,EAAKtP,UAAW,IAE1BqL,WACE,WAAQiE,EAAKtP,UAAW,IAE1BuL,MACE,SAACiE,GACCF,EAAKtP,UAAW,EAChBsP,EAAKV,oBAAoBY,sDAO/Bpb,KAAK0N,cAAc,IAAIC,YAAYjD,EAAOsD,eACxCH,SAAS,EACTC,QACEuD,aAAcrR,KAAKkO,UAGvBlO,KAAK8M,WAAY,EACjB8B,MAAMC,KAAK7O,KAAKoa,WAAWzL,UAAU5J,QAAQ,SAAAmC,GAAA,OAAQA,EAAKwT,QAAS,IACnE1a,KAAKga,mBACLha,KAAK4D,OAAQ,+CAGMD,EAASiC,GAC5B5F,KAAKqb,qBACLrb,KAAK0N,cACH,IAAIC,YAAYjD,EAAO4Q,aACrBxN,OAAQnH,OAAOC,QAASjD,WAAWiC,GACnCiI,SAAS,sDAMb7N,KAAK0N,cACH,IAAIC,YAAYjD,EAAO6Q,eACrBzN,QAAUuD,aAAcrR,KAAKkO,OAC7BL,SAAS,wDAKY2N,GAAc,IAAAC,EAAAzb,KACnC0b,EAAYF,EAAa5V,KAAKsQ,oBAAoBpS,WAStDlC,EAAqBkD,eAAerD,iBAAiBoC,KARtC,SAAX8X,EAAYC,GACd,GAAIA,EAAqB1V,QAAUwV,GAAaE,EAAqBzV,gBAAiB,CACpFsV,EAAKI,kBAEL,IAAIC,EAAcla,EAAqBkD,eAAerD,iBAAiB+E,QAAQmV,GAC/E/Z,EAAqBkD,eAAerD,iBAAiBsE,OAAO+V,EAAa,gDAO7E9b,KAAK0N,cAAc,IAAIC,YAAYjD,EAAOkD,iBACxCC,SAAS,EACTC,QACEuD,aAAcrR,KAAKkO,UAIvBlO,KAAK8M,WAAY,EACjB9M,KAAKoN,gBAAiB,+CAGH,IAAA2O,EAAA/b,KACfgc,EAAgBpN,MAAMC,KAAK7O,KAAKoa,WAAWzL,UAAUzK,IAAI,SAAA+X,GAAA,OAAMA,EAAGlC,QAAQzY,OAC9EtB,KAAKkO,MAAMnJ,QAAQ,SAAAmC,GACjB,IAAK8U,EAAczT,SAASrB,EAAK5F,MAAO,CACtC,IAAI4a,EAASrT,SAASC,cAAc,yBACpCoT,EAAOnT,UAAP,yBAA4C7B,EAAK1G,SAAjD,UACA0b,EAAOnC,QAAQzY,KAAO4F,EAAK5F,KAC3B4a,EAAOnC,QAAQoC,QAAUjV,EAAKI,aAC9ByU,EAAK3B,WAAWgC,QAAQF,MAG5Blc,KAAKkL,OAASlL,KAAKkO,MAAMjI,iDAtOzB,OAAOjG,KAAK6P,aAAa,oCAGLC,GACpB,GAAKA,EAEE,CACL,IAAK,MAAMzH,KAAKyH,GACd,MAAM,IAAIC,MAAJ,KAAe/P,KAAKgQ,OAApB,4CAERhQ,KAAKiQ,aAAa,qBAAsBH,QALxC9P,KAAKkQ,gBAAgB,oDAUvB,OAAOlQ,KAAKuQ,aAAa,uBAGjBT,GACJA,EACF9P,KAAKiQ,aAAa,QAAS,IAE3BjQ,KAAKkQ,gBAAgB,uCAKvB,OAAOlQ,KAAKuQ,aAAa,uBAGjBT,GACJA,EACF9P,KAAKiQ,aAAa,QAAS,IAE3BjQ,KAAKkQ,gBAAgB,2CAYvB,OAPKlQ,KAAKqc,aACJrc,KAAKsc,kBACPtc,KAAKqc,YAAcrc,KAAKsc,mBAExBtc,KAAKqc,eAGFrc,KAAKqc,yBAGAvM,GACZ,GAA6B,UAAzBA,EAAIM,YAAY/I,OAAqByI,EAAIO,MAAM,SAAAxO,GAAA,MAAM,MAAMwG,KAAKxG,KAClE,MAAM,IAAIkO,MAAJ,KAAe/P,KAAKgQ,OAApB,4CAERhQ,KAAKsc,uBAAoBhM,EACzBtQ,KAAKqc,WAAavM,mCAIlB,OAAO9P,KAAKuQ,aAAa,0BAGdT,GACPA,EACF9P,KAAKiQ,aAAa,WAAY,IAE9BjQ,KAAKkQ,gBAAgB,8CAKvB,OAAOlQ,KAAKuQ,aAAa,2BAGbT,GACRA,EACF9P,KAAKiQ,aAAa,YAAa,IAE/BjQ,KAAKkQ,gBAAgB,oDAKvB,OAAOlQ,KAAKuQ,aAAa,iCAGRT,GACbA,EACF9P,KAAKiQ,aAAa,kBAAmB,IAErCjQ,KAAKkQ,gBAAgB,iDAQvB,OAHKlQ,KAAK+a,SACR/a,KAAK+a,WAEA/a,KAAK+a,0CA4IZ,OAHK/a,KAAKuc,eACRvc,KAAKuc,aAAevc,KAAKkM,WAAWC,eAAe,eAE9CnM,KAAKuc,kDAKPxa,OAAOyO,eAAeC,IAAIzQ,KAAKgQ,SAClCjO,OAAOyO,eAAeE,OACpB1Q,KAAKgQ,OACLhQ,iDAhQJ,OACE,oBACA,QACA,QACA,WACA,YACA,2BAgQNT,EAAeoR,WAEflR,EAAOC,SAAYH,4dC1VnB,IAAMid,EAAeld,EAAQ,IAGvBD,kuBAcFW,KAAKyc,4DAILD,EAAaE,WACXC,gBACEtS,OAAQrK,KAAKqK,OACbnE,MAAOlG,KAAKkG,OAEd0W,YAAa5c,KAAK4c,YAClBtc,OAAQN,KAAKM,OACbuc,SAAU7c,KAAK6c,0CAKjB,OAAO7c,KAAK6P,aAAa,wBAGhBC,GACLA,EACF9P,KAAKiQ,aAAa,SAAUH,GAE5B9P,KAAKkQ,gBAAgB,UAEvBlQ,KAAKyc,gDAIL,OAAOzc,KAAK6P,aAAa,uBAGjBC,GACJA,EACF9P,KAAKiQ,aAAa,QAASH,GAE3B9P,KAAKkQ,gBAAgB,SAEvBlQ,KAAKyc,sDAIL,OAAOzc,KAAK6P,aAAa,6BAGXC,GACVA,EACF9P,KAAKiQ,aAAa,cAAeH,GAEjC9P,KAAKkQ,gBAAgB,eAEvBlQ,KAAKyc,iDAIL,OAAOzc,KAAK6P,aAAa,wBAGhBC,GACLA,EACF9P,KAAKiQ,aAAa,SAAUH,GAE5B9P,KAAKkQ,gBAAgB,UAEvBlQ,KAAKyc,mDAIL,OAAOzc,KAAK6P,aAAa,2BAGdC,GACPA,EACF9P,KAAKiQ,aAAa,YAAaH,GAE/B9P,KAAKkQ,gBAAgB,aAEvBlQ,KAAKyc,uDAKA1a,OAAOyO,eAAeC,IAAIzQ,KAAKgQ,SAClCjO,OAAOyO,eAAeE,OACpB1Q,KAAKgQ,OACLhQ,qCAlGgB,MAHH,yEAMjB,OACE,QACA,SACA,cACA,SACA,qBAgGNX,EAA0BsR,WAE1BlR,EAAOC,SAAYL","file":"runnerclient.components.js","sourcesContent":["const { RunnerClientConfiguration } = require('./components/runner_client_config/component');\nconst { RunnerUploader } = require('./components/runner_uploader/component');\nconst { RunnerThumbnailUpdater } = require('./components/runner_thumbnail_updater/component');\n\nmodule.exports = {\n  RunnerClientConfiguration,\n  RunnerThumbnailUpdater,\n  RunnerUploader\n};\n","const I18n = require('i18n-js');\nconst { Config } = require('../config');\nconst translations = require('../translations.js');\n\nclass TranslationService {\n  static translate(...args) {\n    if (!this.i18n) {\n      this._configureI18n();\n    }\n    return this.i18n.t(...args);\n  }\n\n  static _configureI18n() {\n    I18n.translations = translations;\n    I18n.locale = Config.locale;\n    this.i18n = I18n;\n  }\n}\n\nmodule.exports = { TranslationService };\n","class FileValidationService {\n  static getExtension(fileName) {\n    return (fileName.toLowerCase().match(/^[^.].*(\\.\\w+)$/) || [])[1];\n  }\n\n  static getFileName(filePath) {\n    return filePath.replace(/^[\\w\\W]*[/\\\\]/, '');\n  }\n}\n\nmodule.exports = { FileValidationService };\n","/* eslint no-console: \"off\" */\nconst { Config } = require('../config');\n\nclass LogService {\n  static info(...args) {\n    if (Config.logLevelInt >= 2) {\n      console.info(...args);\n    }\n  }\n\n  static warn(...args) {\n    if (Config.logLevelInt >= 1) {\n      console.warn(...args);\n    }\n  }\n\n  static debug(...args) {\n    if (Config.logLevelInt >= 3) {\n      console.log(...args);\n    }\n  }\n}\n\nmodule.exports = { LogService };\n","const uuid = require('uuid/v4');\nconst REQUIRED_ASPERA_VERSION = '3.8.0';\nconst DEFAULT_EVENT_CALLBACKS = {\n  transfer: [],\n  transferComplete: [],\n  status: [],\n  start: []\n};\n\nclass AsperaConnectService {\n  static initialize() {\n    let id = uuid();\n    this.connectInstaller = new window.AW4.ConnectInstaller();\n    this._connect = new window.AW4.Connect({\n      id: id,\n      dragDropEnabled: true,\n      minVersion: REQUIRED_ASPERA_VERSION\n    });\n    this._connect.addEventListener(window.AW4.Connect.EVENT.STATUS, this._handleAsperaEvent.bind(this));\n    this._connect.initSession(id);\n\n    this.activeTransfers = {};\n    this.uploadBatchCount = 0;\n  }\n\n  static set eventCallbacks(eventCallbacks) {\n    this._eventCallbacks = Object.assign({}, DEFAULT_EVENT_CALLBACKS, eventCallbacks);\n  }\n\n  static get eventCallbacks() {\n    if (!this._eventCallbacks) {\n      this._eventCallbacks = Object.assign({}, DEFAULT_EVENT_CALLBACKS);\n    }\n    return this._eventCallbacks;\n  }\n\n  static get connect() {\n    if (!this._connect) {\n      this.initialize();\n    }\n    return this._connect;\n  }\n\n  static start(transferSpecs, connectionSettings) {\n    this.connect.addEventListener(window.AW4.Connect.EVENT.TRANSFER, this._handleAsperaEvent.bind(this));\n    let tokens = [];\n    let currentPromise;\n    let startTransfer = (transferSpec) => {\n      return new Promise((resolve, reject) => {\n        let result = this.connect.startTransfer(transferSpec, connectionSettings, {\n          success: resolve,\n          error: reject\n        });\n\n        if (result.error) {\n          reject(result.error);\n        } else {\n          tokens.push(result.request_id);\n          result.transfer_spec = transferSpec;\n          this._executeEventListenersFor('start', result);\n        }\n      });\n    };\n\n    let allPromises = transferSpecs.map((transferSpec) => {\n      if (currentPromise) {\n        let newPromise = currentPromise.then(() => {\n          startTransfer(transferSpec);\n        });\n        currentPromise = newPromise;\n        return newPromise;\n      } else {\n        currentPromise = startTransfer(transferSpec);\n        return currentPromise;\n      }\n    });\n\n    this.uploadBatchCount += 1;\n    this.activeTransfers[this.uploadBatchCount] = tokens;\n\n    return { id: this.uploadBatchCount, promise: Promise.all(allPromises) };\n  }\n\n  static showFileUploadDialog(successCallback) {\n    this.connect.showSelectFileDialog({\n      success: successCallback\n    });\n  }\n\n  static showFolderUploadDialog(successCallback) {\n    this.connect.showSelectFolderDialog({\n      success: successCallback\n    });\n  }\n\n  static _handleAsperaEvent(eventName, eventData) {\n    if (eventName === window.AW4.Connect.EVENT.STATUS)   { this._handleAsperaStatusEvent(eventData); }\n    if (eventName === window.AW4.Connect.EVENT.TRANSFER) { this._handleAsperaTransferEvent(eventData); }\n  }\n\n  static _executeEventListenersFor(eventName, eventData) {\n    this.eventCallbacks[eventName].forEach(cb => cb(eventData));\n  }\n\n  static _handleAsperaStatusEvent(eventData) {\n    this._executeEventListenersFor('status', eventData);\n\n    switch(eventData) {\n    case window.AW4.Connect.STATUS.INITIALIZING:\n    case window.AW4.Connect.STATUS.RETRYING:\n      this.connectInstaller.showLaunching();\n      break;\n    case window.AW4.Connect.STATUS.FAILED:\n      this.connectInstaller.showDownload();\n      break;\n    case window.AW4.Connect.STATUS.OUTDATED:\n      this.connectInstaller.showUpdate();\n      break;\n    case window.AW4.Connect.STATUS.RUNNING:\n      this.connectInstaller.connected();\n      break;\n    }\n  }\n\n  static _handleAsperaTransferEvent(eventData) {\n    eventData.transfers.forEach((transfer) => {\n      if (transfer.transfer_spec) {\n        this._executeEventListenersFor('transfer', transfer);\n\n        let data = this._getTransferDataFor(transfer);\n        if (data) {\n          if (transfer.percentage === 1) {\n            let tokens = this.activeTransfers[data.id];\n            tokens.splice(data.index, 1);\n\n            if (tokens.length === 0) {\n              delete(this.activeTransfers[data.id]);\n            }\n\n            this._executeEventListenersFor('transferComplete', {\n              transfer: transfer,\n              id: data.id,\n              token: data.token,\n              isBatchComplete: !tokens.length\n            });\n          }\n        }\n      }\n    });\n\n    if (!this.hasActiveTransfers) { this._removeTransferListener(); }\n  }\n\n  static get hasActiveTransfers() {\n    return !!Object.keys(this.activeTransfers).length;\n  }\n\n  static _getTransferDataFor(transfer) {\n    for (let id in this.activeTransfers) {\n      if (!this.activeTransfers.hasOwnProperty(id)) { continue; }\n\n      let tokens = this.activeTransfers[id];\n      if (tokens) {\n        let token = transfer.aspera_connect_settings.request_id;\n        let index = tokens.indexOf(token);\n        if (index !== -1) { return { id: id, token: token, index: index }; }\n      }\n    }\n  }\n\n  static _removeTransferListener() {\n    this.connect.removeEventListener(window.AW4.Connect.EVENT.TRANSFER);\n  }\n}\n\nmodule.exports = { AsperaConnectService };\n","const { FileNameValidationService } = require('./file_name_validation_service');\nconst { FileValidationService } = require('./file_validation_service');\nconst { ThumbnailValidationService } = require('./thumbnail_validation_service');\nconst uuid = require('uuid/v4');\n\nclass FileFactory {\n  constructor(file) {\n    this.fileName = FileValidationService.getFileName(file.name);\n    this.fullFilePath = file.name;\n    this.processing = false;\n    this.size = file.size;\n    this.fileObj = file;\n    this.uuid = uuid();\n\n    this.hasValidCharacters = FileNameValidationService.containsValidCharacters(this.fileName);\n    this.hasExtension = FileNameValidationService.containsExtension(this.fileName);\n    this.hasValidExtension = FileNameValidationService.containsValidExtension(this.fileName);\n\n    this.valid = function () {\n      return FileNameValidationService.valid(this.fileName, this.fileObj.doesNotRequireExtension);\n    };\n\n    this.validThumbnail = function () {\n      let validFile = this.valid();\n      let validThumbnail = ThumbnailValidationService.valid(file);\n\n      return validFile && validThumbnail;\n    };\n  }\n}\n\nmodule.exports = { FileFactory };\n","const { UNSUPPORTED_FILE_EXTENSIONS } = require('../constants');\nconst { FileValidationService } = require('./file_validation_service');\n\nclass FileNameValidationService {\n  static containsValidCharacters(fileName) {\n    return !(/:|\\/|\"|;|'|\\?|!|>|<|&|\\||\\*|@/.test(fileName));\n  }\n\n  static containsExtension(fileName) {\n    return !!FileValidationService.getExtension(fileName);\n  }\n\n  static containsValidExtension(fileName) {\n    return !UNSUPPORTED_FILE_EXTENSIONS.includes(FileValidationService.getExtension(fileName));\n  }\n\n  static valid(fileName, doesNotRequireExtension) {\n    if (doesNotRequireExtension) {\n      return this.containsValidCharacters(fileName);\n    } else {\n      return (this.containsValidCharacters(fileName) &&\n      this.containsExtension(fileName) &&\n      this.containsValidExtension(fileName));\n    }\n  }\n}\n\nmodule.exports = { FileNameValidationService };\n","const { TranslationService } = require('../../services/translation_service');\nconst TRANSLATION_SCOPE = { scope: 'RunnerThumbnailUpdater' };\nconst t = (key) => {\n  return TranslationService.translate(key, TRANSLATION_SCOPE);\n};\n\nconst template = document.createElement('template');\ntemplate.innerHTML = `\n  <style>\n    :host {\n      display: flex;\n      flex-direction: column;\n      position: relative;\n      border: 1px solid #999;\n      height: 500px;\n      width: 100%;\n    }\n\n    :host > * {\n      box-sizing: border-box;\n    }\n\n    :host([incoming][empty]) #incoming {\n      display: flex;\n    }\n\n    :host([incoming][empty]) #empty-dropzone {\n      display: none;\n    }\n\n    :host([empty]) #upload-button {\n      display: none;\n    }\n    :host([empty]) #empty-dropzone {\n      display: -ms-flexbox;\n      display: flex;\n    }\n\n    :host #preview {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      flex: 1 0 0.1px;\n    }\n\n    :host #preview img {\n      flex: 0 1 0.01px;\n      max-height: 100%;\n    }\n\n    :host #empty-dropzone {\n      display: none;\n      height: 100%;\n      justify-content: center;\n      align-items: center;\n      flex-direction: column;\n    }\n\n    :host #incoming {\n      align-items: center;\n      display: none;\n      height: 100%;\n      justify-content: center;\n      position: absolute;\n      width: 100%;\n      z-index: 10;\n    }\n\n    :host #error,\n    :host #uploading,\n    :host #upload-complete {\n      display: none;\n      flex: 1;\n      justify-content: space-between;\n    }\n\n    :host([error]) #error {\n      display: flex;\n    }\n\n    :host([uploading]) #uploading {\n      display: flex;\n    }\n    :host([uploading]) #upload-button,\n    :host([uploading]) #add-file-button {\n      display: none;\n    }\n\n    :host([upload-complete]) #upload-complete {\n      display: flex;\n    }\n    :host([upload-complete]) #upload-button,\n    :host([upload-complete]) #add-file-button {\n      display: none;\n    }\n\n    :host #add-file-input {\n      display: none;\n    }\n\n    :host footer {\n      background: rgba(0, 0, 0, 0.1);\n      width: 100%;\n      padding: 8px;\n      display: flex;\n      justify-content: flex-end;\n    }\n\n    :host footer span {\n      flex: 1;\n    }\n  </style>\n\n  <div id=\"empty-dropzone\">\n    <slot name=\"emptyDropzone\">\n      <h1>${t('emptyHeadingText')}</h1>\n      <h2>${t('emptySubheadingText')}</h2>\n      <h3>${t('emptyAdditionalText')}</h3>\n    </slot>\n  </div>\n\n  <div id=\"incoming\">\n    <slot name=\"incoming\">\n      <h1>${t('incoming')}</h1>\n    </slot>\n  </div>\n\n  <div id=\"preview\"></div>\n\n  <footer>\n    <div id=\"error\">\n      <slot name=\"error\">\n        <span id=\"error-message\">${t('error')}</span>\n      </slot>\n    </div>\n\n    <div id=\"uploading\">\n      <slot name=\"uploading\">\n        <span>${t('uploading')}</span>\n      </slot>\n    </div>\n\n    <div id=\"upload-complete\">\n      <slot name=\"uploadComplete\">\n        <span>${t('uploadComplete')}</span>\n      </slot>\n    </div>\n\n    <slot name=\"addFileButton\">\n      <button type=\"button\" id=\"add-file-button\">${t('addFile')}</button>\n      <input type=\"file\" id=\"add-file-input\" />\n    </slot>\n\n    <slot name=\"uploadButton\">\n      <button type=\"button\" id=\"upload-button\">${t('upload')}</button>\n    </slot>\n  </footer>\n`;\n\nmodule.exports = template;\n","const { API } = require('../api');\nconst { LogService } = require('./log_service');\nconst axios = require('axios');\n\nclass ThumbnailReplacementService {\n  static replaceThumbnailFor(assetItemID, file) {\n    // Fetch delegate token from runner\n    return API.replaceThumbnail(assetItemID, file.fileName)\n      .then((response) => {\n        LogService.debug(`[${this.name}] Delegate token recieved`, response);\n        const token = response.data.token;\n        const mcsId = response.data.mcs_id;\n        // Upload the image to MCS\n        return this._uploadImageToMCS(mcsId, token, file.fileObj);\n      })\n      .then((mcsResponse) => {\n        let thumbnail = mcsResponse.data.thumbnails.find(t => t.type === 'small');\n        return {\n          id: assetItemID,\n          thumbnail_url: thumbnail.location\n        };\n      });\n  }\n\n  static _uploadImageToMCS(mcsId, token, file) {\n    const data = new FormData();\n    data.append('file', file);\n\n    return axios.request({\n      url: `https://io.cimediacloud.com/assets/${mcsId}/coverelement/upload`,\n      method: 'post',\n      data: data,\n      headers: {\n        'Authorization': `Bearer ${token}`,\n      },\n      onUploadProgress: (evt) => { LogService.debug(`[${this.name}] Upload Progress`, evt); }\n    });\n  }\n}\n\nmodule.exports = { ThumbnailReplacementService };\n","// Base element for <runner-uploader> and <runner-thumbnail-updater>\nconst { API } = require('../../api');\nconst { FileFactory } = require('../../services/file_factory');\nconst { LogService } = require('../../services/log_service');\nconst { ThumbnailReplacementService } = require('../../services/thumbnail_replacement_service');\nconst { TranslationService } = require('../../services/translation_service');\nconst TRANSLATION_SCOPE = { scope: 'RunnerThumbnailUpdater' };\nconst { EVENTS } = require('../../constants');\nconst ELEMENT_NAME = 'runner-thumbnail-updater';\nconst template = require('./template');\nif (window.ShadyCSS) {\n  window.ShadyCSS.prepareTemplate(template, ELEMENT_NAME);\n}\n\nclass RunnerThumbnailUpdater extends HTMLElement {\n  static get elName() { return ELEMENT_NAME; }\n\n  constructor() {\n    super();\n    this.empty = true;\n    let shadowRoot = this.attachShadow({mode: 'open'});\n    shadowRoot.appendChild(template.content.cloneNode(true));\n  }\n\n  connectedCallback() {\n    this._addEventListeners();\n  }\n\n  static get observedAttributes() {\n    return [\n      'assetItemID',\n      'empty',\n      'error',\n      'incoming',\n      'uploading',\n      'uploadComplete'\n    ];\n  }\n\n  get assetItemID() {\n    return this.getAttribute('asset-item-id');\n  }\n\n  set assetItemID(val) {\n    if (!val) {\n      this.removeAttribute('asset-item-id');\n    } else {\n      if (!/\\d+/.test(val)) {\n        throw new Error(`[<${this.elName}>] asset-item-id must be an integer`);\n      }\n      this.setAttribute('asset-item-id', val);\n    }\n  }\n\n  get assetItemIDs() {\n    if (!this._assetItemIDs) {\n      if (this.assetItemID) {\n        this._assetItemIDs = [this.assetItemID];\n      } else {\n        this._assetItemIDs = [];\n      }\n    }\n    return this._assetItemIDs;\n  }\n\n  set assetItemIDs(val) {\n    if (val.constructor.name !== 'Array' || !val.every(id => /\\d+/.test(id))) {\n      throw new Error(`[<${this.elName}>] assetItemIDs must be an Array of numbers`);\n    }\n    this.assetItemID = undefined;\n    this._assetItemIDs = val;\n  }\n\n\n  get empty() {\n    return this.hasAttribute('empty');\n  }\n\n  set empty(val) {\n    if (val) {\n      this.setAttribute('empty', '');\n    } else {\n      this.removeAttribute('empty');\n    }\n  }\n\n  get error() {\n    return this.hasAttribute('error');\n  }\n\n  set error(val) {\n    if (val) {\n      this.setAttribute('error', '');\n    } else {\n      this.removeAttribute('error');\n    }\n  }\n\n  get incoming() {\n    return this.hasAttribute('incoming');\n  }\n\n  set incoming(val) {\n    if (val) {\n      this.setAttribute('incoming', '');\n    } else {\n      this.removeAttribute('incoming');\n    }\n  }\n\n  get uploading() {\n    return this.hasAttribute('uploading');\n  }\n\n  set uploading(val) {\n    if (val) {\n      this.setAttribute('uploading', '');\n    } else {\n      this.removeAttribute('uploading');\n    }\n  }\n\n  get uploadComplete() {\n    return this.hasAttribute('upload-complete');\n  }\n\n  set uploadComplete(val) {\n    if (val) {\n      this.setAttribute('upload-complete', '');\n    } else {\n      this.removeAttribute('upload-complete');\n    }\n  }\n\n  _addEventListeners() {\n    // Drag-drop setup\n    this._dragEnterListener = ((evt) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n      this.incoming = true;\n    }).bind(this);\n    this._dragLeaveListener = ((evt) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n      this.incoming = false;\n    }).bind(this);\n    this._dragOverListener = ((evt) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n    }).bind(this);\n    this._dropListener = ((evt) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n      this.incoming = false;\n      this._handleDrop(evt);\n    }).bind(this);\n\n    this.addEventListener('dragenter', this._dragEnterListener);\n    this.addEventListener('dragleave', this._dragLeaveListener);\n    this.addEventListener('dragover', this._dragOverListener);\n    this.addEventListener('drop', this._dropListener);\n\n    // \"Upload\" button setup\n    const uploadBtn = this.shadowRoot.getElementById('upload-button');\n    this._uploadClickListener = ((evt) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n      this._beginUpload();\n    }).bind(this);\n    uploadBtn.addEventListener('click', this._uploadClickListener);\n\n    // \"Add File\" button\n    const addFileBtn = this.shadowRoot.getElementById('add-file-button');\n    this._addFilesClickListener = ((evt) => {\n      evt.stopPropagation();\n      evt.preventDefault();\n      this.shadowRoot.getElementById('add-file-input').click();\n    }).bind(this);\n    addFileBtn.addEventListener('click', this._addFilesClickListener);\n\n    // File added via input\n    const fileInput = this.shadowRoot.getElementById('add-file-input');\n    this._fileAddedListener = ((evt) => {\n      evt.stopPropagation();\n      evt.preventDefault();\n      this._handleFileAdded(evt);\n    }).bind(this);\n    fileInput.addEventListener('change', this._fileAddedListener);\n  }\n\n  _beginUpload() {\n    this.errors = false;\n    this.uploading = true;\n    let promises = this.assetItemIDs.map(assetItemID => {\n      return ThumbnailReplacementService.replaceThumbnailFor(assetItemID, this.file);\n    });\n    Promise.all(promises).then(\n      (results) => {\n        return API.bulkUpdateAssetItems(results);\n      }\n    ).then(\n      () => {\n        this.uploading = false;\n        this.uploadComplete = true;\n        this._emitUploadCompleteEvent();\n      }\n    ).catch(\n      (err) => {\n        this.uploading = false;\n        LogService.warn(`[${ELEMENT_NAME}] Failed to update thumbnail!`, err);\n        this._setErrorMessage('error');\n        this._emitUploadFailedEvent(err);\n      }\n    );\n  }\n\n  _emitUploadCompleteEvent() {\n    this.dispatchEvent(\n      new CustomEvent(EVENTS.UPLOAD_COMPLETE, {\n        bubbles: true,\n        detail: {\n          assetItemIDs: this.assetItemIDs,\n          filename: this.file.fileName\n        }\n      })\n    );\n  }\n\n  _emitUploadFailedEvent(error) {\n    this.dispatchEvent(\n      new CustomEvent(EVENTS.UPLOAD_FAILED, {\n        bubbles: true,\n        detail: {\n          assetItemIDs: this.assetItemIDs,\n          filename: this.file.fileName,\n          error: error\n        }\n      })\n    );\n  }\n\n  _handleDrop(event) {\n    LogService.debug(`[${ELEMENT_NAME}] Drop event recieved`, event);\n    this.error = false;\n    let files = event.dataTransfer.files;\n    if (files.length > 1) {\n      this._setErrorMessage('tooMany');\n      return;\n    }\n\n    let file = new FileFactory(files[0]);\n    if (!file.validThumbnail()) {\n      this._setErrorMessage('invalidFile');\n      return;\n    }\n\n    this.file = file;\n    this._setPreview(file);\n  }\n\n  _handleFileAdded(event) {\n    LogService.debug(`[${ELEMENT_NAME}] File added via input`, event);\n    this.error = false;\n\n    let file = new FileFactory(event.target.files[0]);\n    if (!file.validThumbnail()) {\n      this._setErrorMessage('invalidFile');\n      return;\n    }\n\n    this.file = file;\n    this._setPreview(file);\n  }\n\n  _setErrorMessage(key) {\n    let errMsg = this.shadowRoot.getElementById('error-message');\n    let errText = TranslationService.translate(key, TRANSLATION_SCOPE);\n    errMsg.innerText = errText;\n    this.error = true;\n  }\n\n  _setPreview(file) {\n    this.empty = false;\n\n    let previewContainer = this.shadowRoot.getElementById('preview');\n    if (previewContainer.children.length) {\n      Array.from(previewContainer.children).forEach(el => el.remove());\n    }\n    let progressEl = document.createElement('progress');\n    previewContainer.appendChild(progressEl);\n\n    let reader = new FileReader();\n    reader.onprogress = (evt) => {\n      LogService.debug(`[${ELEMENT_NAME}] FileReader progress`, evt);\n      progressEl.max = evt.total;\n      progressEl.value = evt.loaded;\n    };\n\n    reader.onload = (evt) => {\n      LogService.debug(`[${ELEMENT_NAME}] FileReader loaded`, evt);\n      progressEl.remove();\n      let img = document.createElement('img');\n      img.src = reader.result;\n      previewContainer.appendChild(img);\n    };\n\n    reader.onerror = (evt) => {\n      LogService.warn(`[${ELEMENT_NAME}] FileReader load error`, evt);\n      this.empty = true;\n      this._setErrorMessage('fileReadFailed');\n    };\n\n    reader.readAsDataURL(file.fileObj);\n  }\n\n  static register() {\n    // Register the custom element to the DOM\n    if (!window.customElements.get(this.elName)) {\n      window.customElements.define(\n        this.elName,\n        this\n      );\n    }\n  }\n}\n\nRunnerThumbnailUpdater.register();\n\nmodule.exports = { RunnerThumbnailUpdater };\n","const { TranslationService } = require('../../services/translation_service');\n\nconst isEdge = window.AW4.Utils.BROWSER.EDGE;\nconst TRANSLATION_SCOPE = { scope: isEdge ? 'RunnerUploader.edge' : 'RunnerUploader' };\n\nconst t = (key) => {\n  return TranslationService.translate(key, TRANSLATION_SCOPE);\n};\n\nconst template = document.createElement('template');\ntemplate.innerHTML = `\n  <style>\n    :host {\n      display: block;\n      position: relative;\n      border: 1px solid #999;\n      height: 500px;\n      width: 100%;\n    }\n\n    :host > * {\n      box-sizing: border-box;\n    }\n\n    :host([incoming][empty]) #incoming {\n      display: flex;\n    }\n\n    :host([incoming][empty]) #empty-dropzone {\n      display: none;\n    }\n\n    :host([empty]) #upload-button {\n      display: none;\n    }\n    :host([empty]) #empty-dropzone {\n      display: flex;\n    }\n\n    :host #files-list {\n      height: 100%;\n      overflow-y: scroll;\n    }\n\n    :host #empty-dropzone {\n      display: none;\n      height: 100%;\n      justify-content: center;\n      align-items: center;\n      flex-direction: column;\n    }\n\n    :host #incoming {\n      align-items: center;\n      display: none;\n      height: 100%;\n      justify-content: center;\n      position: absolute;\n      width: 100%;\n      z-index: 10;\n    }\n\n    :host #error,\n    :host #uploading,\n    :host #upload-complete {\n      display: none;\n      flex: 1;\n      justify-content: space-between;\n    }\n\n    :host([error]) #error {\n      display: flex;\n    }\n\n    :host([uploading]) #uploading {\n      display: flex;\n    }\n    :host([uploading]) #upload-button,\n    :host([uploading]) #add-files-button {\n      display: none;\n    }\n\n    :host([upload-complete]) #upload-complete {\n      display: flex;\n    }\n    :host([upload-complete]) #upload-button,\n    :host([upload-complete]) #add-files-button {\n      display: none;\n    }\n\n    :host footer {\n      background: rgba(0, 0, 0, 0.1);\n      position: absolute;\n      width: 100%;\n      padding: 8px;\n      bottom: 0;\n      display: flex;\n      justify-content: flex-end;\n    }\n\n    :host footer span {\n      flex: 1;\n    }\n  </style>\n\n  <div id=\"empty-dropzone\">\n    <slot name=\"emptyDropzone\">\n      <h1>${t('emptyHeadingText')}</h1>\n      <h2>${t('emptySubheadingText')}</h2>\n    </slot>\n  </div>\n\n  <div id=\"incoming\">\n    <slot name=\"incoming\">\n      <h1>${t('incoming')}</h1>\n    </slot>\n  </div>\n\n  <div id=\"files-list\"></div>\n\n  <footer>\n    <div id=\"error\">\n      <slot name=\"error\">\n        <span>${t('error')}</span>\n      </slot>\n    </div>\n\n    <div id=\"uploading\">\n      <slot name=\"uploading\">\n        <span>${t('uploading')}</span>\n      </slot>\n    </div>\n\n    <div id=\"upload-complete\">\n      <slot name=\"uploadComplete\">\n        <span>${t('uploadComplete')}</span>\n        <button type=\"button\" id=\"add-more-button\">${t('uploadMore')}</button>\n      </slot>\n    </div>\n\n    <slot name=\"addFilesButton\">\n      <button type=\"button\" id=\"add-files-button\">${t('addFiles')}</button>\n    </slot>\n\n    <slot name=\"uploadButton\">\n      <button type=\"button\" id=\"upload-button\">${t('upload')}</button>\n    </slot>\n  </footer>\n`;\n\nmodule.exports = template;\n","const { VALID_THUMBNAIL_FILE_EXTENSIONS, MAX_THUMBNAIL_SIZE } = require('../constants');\nconst { FileValidationService } = require('./file_validation_service');\n\nclass ThumbnailValidationService {\n  static containsValidExtension(fileName) {\n    return VALID_THUMBNAIL_FILE_EXTENSIONS.includes(FileValidationService.getExtension(fileName));\n  }\n\n  static isValidFileSize(fileSize) {\n    return fileSize <= MAX_THUMBNAIL_SIZE;\n  }\n\n  static valid(file) {\n    return (this.containsValidExtension(file.name) && this.isValidFileSize(file.size));\n  }\n}\n\nmodule.exports = { ThumbnailValidationService };\n","const { FileFactory } = require('./file_factory');\nconst { MAX_UPLOAD_COUNT } = require('../constants');\n\nclass FileUploadService {\n  static addFiles(currentFiles, fileList) {\n    return new Promise((resolve, reject) => {\n      fileList = this.removeDuplicates(currentFiles, fileList);\n\n      if ((currentFiles.length + fileList.length) > MAX_UPLOAD_COUNT) {\n        reject({\n          error: `[RunnerClient] Too many files added. Uploads can have a maximum of ${MAX_UPLOAD_COUNT} files.`\n        });\n      } else {\n        currentFiles.push(...fileList);\n        resolve({ files: currentFiles, filesAdded: fileList.length });\n      }\n    });\n  }\n\n  static removeDuplicates(currentFiles, newFileList) {\n    let existingFileNames = currentFiles.map((file) => file.fullFilePath);\n    let uniqueFileList = [];\n\n    newFileList.forEach(function (file) {\n      if (!existingFileNames.includes(file.name)) {\n        let ffile = new FileFactory(file);\n        uniqueFileList.push(ffile);\n      }\n    });\n\n    return uniqueFileList;\n  }\n\n  static removeFileByUUID(files, uuid) {\n    return new Promise((resolve, reject) => {\n      let fileIdx = files.findIndex(file => { file.uuid === uuid; });\n      if (fileIdx) {\n        resolve(files.splice(fileIdx, 1));\n      } else {\n        reject();\n      }\n    });\n  }\n}\n\nmodule.exports = { FileUploadService };\n","const { FileNameValidationService } = require('./file_name_validation_service');\n\nclass PackageManifestService {\n  static manifestForAsperaTransferEventData(asperaTransferEventData, packageTransferSpecs) {\n    let path = asperaTransferEventData.transfer_spec.paths[0].source;\n    let found = packageTransferSpecs.find((data) => { return data.transfer_spec.paths[0].source === path; });\n    let files = asperaTransferEventData.files.map((fileObj) => { return fileObj.file; });\n    return { id: found.asset_item_id, custom_metadata_fields: this.manifestForFiles(files, path) };\n  }\n\n  static manifestForFiles(files, path) {\n    let manifestFor = (files, fullFolderPath) => {\n      let folderName = this._folderNameFromFullFolderPath(fullFolderPath);\n      let roots      = [];\n      let tree       = { name: folderName, children: roots, count: 0};\n      files.forEach((file) => {\n        let filePath   = file.split(fullFolderPath + '/')[1];\n        let components = filePath.split('/');\n        let length     = components.length;\n        let children   = roots;\n        components.forEach((component, index) => {\n          if (index === length - 1) {\n            if (this._isValid(component)) {\n              children.push({ name: component });\n              tree.count += 1;\n            }\n          } else {\n            let found = children.find((child) => { return child.name === component; });\n            if (found) {\n              children = found.children;\n            } else {\n              let nodeChildren = [];\n              let node = { name: component, children: nodeChildren };\n              children.push(node);\n              children = nodeChildren;\n            }\n          }\n        });\n      });\n\n      this._removeEmptyChildren(tree);\n      return tree;\n    };\n\n    return [ { category: 'tech_info', label: 'manifest', value: manifestFor(files, path) } ];\n  }\n\n  static present(manifest) {\n    let numberOfFiles = 0;\n    let numberOfFolders = 0;\n    let sorted = [];\n\n    let processLevel = (level, pathComponents) => {\n      let items  = [];\n      let levels = [];\n\n      level.forEach((item) => {\n        if (item.hasOwnProperty('children')) {\n          if (this._hasNonFolderChild(item)) {\n            numberOfFolders += 1;\n            levels.push(item);\n          }\n        } else {\n          numberOfFiles += 1;\n          items.push(item);\n        }\n      });\n\n      let processed = this._sort(items).map((item) => {\n        return pathComponents.concat(item.name).join('/');\n      });\n\n      sorted = sorted.concat(processed);\n      this._sort(levels).forEach((level) => { processLevel(level.children, pathComponents.concat(level.name)); });\n    };\n\n    processLevel((manifest.children || []), []);\n\n    return {\n      numberOfFiles: numberOfFiles,\n      numberOfFolders: numberOfFolders,\n      sorted: sorted,\n    };\n  }\n\n  ////\n  // Private methods\n  ////\n\n  static _folderNameFromFullFolderPath(fullFolderPath) {\n    let pathComponents = fullFolderPath.split('/');\n    return pathComponents[pathComponents.length - 1];\n  }\n\n  static _hasNonFolderChild(level) {\n    return level.hasOwnProperty('children') && level.children && level.children.find((item) => {\n      if (item.hasOwnProperty('children')) {\n        return this._hasNonFolderChild(item);\n      } else {\n        return true;\n      }\n    });\n  }\n\n  static _isValid(component) {\n    let hasExtension = FileNameValidationService.containsExtension(component);\n    let firstTwoCharacters = component[0] + component[1];\n    return component.toLowerCase() !== '.ds_store' && firstTwoCharacters !== '._' && (!hasExtension || FileNameValidationService.containsValidExtension(component));\n  }\n\n\n  static _removeEmptyChildren(level) {\n    level.children.forEach((item, index) => {\n      if (item.children) {\n        if (!item.children.length) {\n          level.children.splice(index, 1);\n        } else {\n          this._removeEmptyChildren(item);\n        }\n      }\n    });\n  }\n\n  static _sort(collection) {\n    return collection.sort((a, b) => {\n      let lowerNameA = a.name.toLowerCase();\n      let lowerNameB = b.name.toLowerCase();\n      if (lowerNameA < lowerNameB) {\n        return -1;\n      } else if (lowerNameA > lowerNameB) {\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n  }\n}\n\nmodule.exports = { PackageManifestService };\n","const cloneDeep = require('lodash/cloneDeep');\n\nclass AsperaTransferSpecFormatterService {\n  static formatted(uploadResponseData, files) {\n    let nonPackageTransferSpec = cloneDeep(uploadResponseData.transfer_spec);\n    let packageIndex = 0;\n    let fileIndex = 0;\n    let collection = (nonPackageTransferSpec.paths.length) ? [nonPackageTransferSpec] : [];\n    let packageMappings = cloneDeep(uploadResponseData.package_transfer_specs);\n\n    files.forEach(function (file) {\n      let target;\n\n      if (file.fileObj.isFolder) {\n        let packageTransferSpec = packageMappings[packageIndex].transfer_spec;\n        collection.push(packageTransferSpec);\n        target = packageTransferSpec.paths[0];\n        packageIndex += 1;\n      } else {\n        target = nonPackageTransferSpec.paths[fileIndex];\n        fileIndex += 1;\n      }\n\n      target.source = file.fullFilePath;\n    });\n\n    return { all: collection, packageMappings: packageMappings };\n  }\n}\n\nmodule.exports = { AsperaTransferSpecFormatterService };\n","const { API } = require('../api');\nconst { AsperaConnectService } = require('./aspera_connect_service');\nconst { AsperaTransferSpecFormatterService } = require('./aspera_transfer_spec_formatter_service');\nconst { PackageManifestService } = require('./package_manifest_service');\n\nclass AsperaUploadService {\n  static get activeUploads() {\n    if (!this._activeUploads) {\n      this._activeUploads = {};\n    }\n    return this._activeUploads;\n  }\n\n  static get hasActiveUploads() {\n    return !!Object.keys(this.activeUploads).length;\n  }\n\n  static get asperaConnectService() {\n    if (!this._asperaConnectService) {\n      AsperaConnectService.eventCallbacks = {\n        transferComplete: [this._onTransferComplete.bind(this)]\n      };\n      this._asperaConnectService = AsperaConnectService;\n    }\n\n    return this._asperaConnectService;\n  }\n\n  static upload(currentFiles, options) {\n    let items = currentFiles.map((file) => {\n      let attrs = {\n        name: file.fileName,\n        package: file.fileObj.isFolder,\n      };\n\n      if (file.fileObj.fetchFolderContentsFromDragDropEvent) {\n        attrs.custom_metadata_fields = PackageManifestService.manifestForFiles(file.fileObj.fetchFolderContentsFromDragDropEvent(), file.fileName);\n      }\n\n      return attrs;\n    });\n\n    return API.upload(items, options || {})\n      .then((response) => {\n        let formatted = AsperaTransferSpecFormatterService.formatted(response.data, currentFiles);\n\n        let result = this.asperaConnectService.start(\n          formatted.all,\n          response.data.connection_settings\n        );\n\n        this.activeUploads[result.id] = {\n          files: currentFiles,\n          assetItemAttrsCollection: [],\n          packageMappings: formatted.packageMappings,\n          ingestBatchId: response.data.ingest_batch_id\n        };\n\n        return response;\n      });\n  }\n\n  ////\n  // private methods\n  ////\n\n  /**\n   * Callback executed on AW4 'transfer' event when AsperaConnectService\n   * determines the transfer has completed.\n   * @param {object}  data\n   * @param {object}  data.transfer - transfer data from AW4.Connect\n   * @param {number}  data.id - internal tracking ID for transfer batch. NOT the\n   *                            runner ingest batch ID\n   * @param {string}  data.token - aspera request_id\n   * @param {boolean} data.isBatchComplete\n   */\n  static _onTransferComplete(data) {\n    let activeUpload = this.activeUploads[data.id];\n    if (!activeUpload || !data.isBatchComplete) { return; }\n\n    activeUpload.files.forEach((file) => {\n      if (file.fileObj.isFolder && !file.fileObj.fetchFolderContentsFromDragDropEvent) {\n        let attrs = PackageManifestService.manifestForAsperaTransferEventData(\n          data.transfer,\n          activeUpload.packageMappings\n        );\n        activeUpload.assetItemAttrsCollection.push(attrs);\n      }\n    });\n\n    if (activeUpload.assetItemAttrsCollection.length) {\n      API.bulkUpdateAssetItems(activeUpload.assetItemAttrsCollection);\n    }\n\n    // Set asset items in the completed ingest to \"uploaded\"\n    API.completeIngestBatchUpload(activeUpload.ingestBatchId);\n    delete this.activeUploads[data.id];\n  }\n}\n\nmodule.exports = { AsperaUploadService };\n","class AsperaFileSerializer {\n  static serialize(result) {\n    let files = result.files ? result.files.dataTransfer.files : result.dataTransfer.files;\n\n    return files.map((file) => {\n      let attrs = {\n        name: file.name,\n        size: file.size,\n        isFolder: /directory/i.test(file.type),\n        doesNotRequireExtension: true,\n      };\n\n      if (attrs.isFolder && result.dragDropManifestGrouping) {\n        attrs.fetchFolderContentsFromDragDropEvent = function () {\n          let fileNameComponents = file.name.split(/\\/|\\\\/);\n          let fileName = fileNameComponents[fileNameComponents.length - 1];\n          return result.dragDropManifestGrouping[fileName];\n        };\n      }\n\n      return attrs;\n    });\n  }\n}\n\nmodule.exports = { AsperaFileSerializer };\n","const { AsperaConnectService } = require('./aspera_connect_service');\nconst { LogService } = require('./log_service');\nconst AW4 = window.AW4;\n\nconst DEFAULT_EVENT_CALLBACKS = {\n  all: [],\n  dragEnter: [],\n  dragLeave: [],\n  dragOver: [],\n  drop: []\n};\n\nclass AsperaDragDropService {\n  static addTarget(target, eventCallbacks) {\n    AsperaConnectService.connect.initSession();\n    this.target = target;\n\n    let callbacks = Object.assign({}, DEFAULT_EVENT_CALLBACKS, eventCallbacks);\n    let registerAll = !!callbacks.all.length;\n    if (!!callbacks.dragEnter.length || registerAll) {\n      this._dragEnterCallback = this.dragEnterCallback.bind(this);\n      target.addEventListener('dragenter', this._dragEnterCallback);\n    }\n    if (!!callbacks.dragLeave.length || registerAll) {\n      this._dragLeaveCallback = this.dragLeaveCallback.bind(this);\n      target.addEventListener('dragleave', this._dragLeaveCallback);\n    }\n    if (!!callbacks.dragOver.length || !!callbacks.drop.length || registerAll) {\n      this._dragOverCallback = this.dragOverCallback.bind(this);\n      target.addEventListener('dragover', this._dragOverCallback);\n    }\n    if (!!callbacks.drop.length || registerAll) {\n      this._dropCallback = this.dropCallback.bind(this);\n      target.addEventListener('drop', this._dropCallback);\n    }\n\n    this.eventCallbacks = callbacks;\n  }\n\n  static reset() {\n    this.target.removeEventListener('dragenter', this._dragEnterCallback);\n    this.target.removeEventListener('dragleave', this._dragLeaveCallback);\n    this.target.removeEventListener('dragover', this._dragOverCallback);\n    this.target.removeEventListener('drop', this._dropCallback);\n    this.eventCallbacks = Object.assign({}, DEFAULT_EVENT_CALLBACKS);\n    this._target = undefined;\n  }\n\n  static get target() {\n    return this._target;\n  }\n\n  static set target(el) {\n    if (this._target) {\n      throw new Error('[RunnerClient.AsperaDragDropService] Cannot set more than one target!');\n    }\n    this._target = el;\n  }\n\n  static dragEnterCallback(event) {\n    event.stopPropagation();\n    event.preventDefault();\n    this._executeEventCallbacksFor('dragEnter', { event: event });\n  }\n\n  static dragLeaveCallback(event) {\n    event.stopPropagation();\n    event.preventDefault();\n    this._executeEventCallbacksFor('dragLeave', { event: event });\n  }\n\n  static dragOverCallback(event) {\n    event.stopPropagation();\n    event.preventDefault();\n    this._executeEventCallbacksFor('dragOver', { event: event });\n  }\n\n  static dropCallback(event) {\n    event.stopPropagation();\n    event.preventDefault();\n\n    let filesDropped = event.dataTransfer.files;\n    let data = {};\n    data.dataTransfer = {};\n    data.dataTransfer.files = [];\n    for (let i = 0; i < filesDropped.length; i++) {\n      let fileObject  = {\n        'lastModifiedDate' : filesDropped[i].lastModifiedDate,\n        'name'             : filesDropped[i].name,\n        'size'             : filesDropped[i].size,\n        'type'             : filesDropped[i].type,\n      };\n      data.dataTransfer.files.push(fileObject);\n    }\n\n    this._groupedFolderContents(event).then((manifestGrouping) => {\n      let dropHelper = (response) => {\n        this._executeEventCallbacksFor(\n          'drop',\n          { event: event, files: response, dragDropManifestGrouping: manifestGrouping }\n        );\n      };\n\n      AsperaConnectService.connect.connectHttpRequest(\n        AW4.Connect.HTTP_METHOD.POST,\n        '/connect/file/dropped-files',\n        data,\n        AW4.Utils.SESSION_ID,\n        { success: dropHelper }\n      );\n    });\n  }\n\n  static _executeEventCallbacksFor(eventName, data) {\n    this.eventCallbacks[eventName].forEach((cb) => { cb(data); });\n    this.eventCallbacks.all.forEach((cb) => { cb(data); });\n  }\n\n  static _collectFiles(entries, path, collection) {\n    let promises = [];\n    return new Promise((resolve) => {\n      entries.forEach((entry) => {\n        if (entry.isDirectory) {\n          let promise = new Promise((readResolve, readReject) => {\n            let reader = entry.createReader();\n            let readEntries = () => {\n              reader.readEntries((childEntries) => {\n                if (childEntries.length) {\n                  let childReadPromise = this._collectFiles(childEntries, entry.fullPath, collection);\n                  promises.push(childReadPromise);\n                  readEntries();\n                } else {\n                  readResolve();\n                }\n              }, (err) => {\n                LogService.warn(`Failed to read directory contents for ${entry.fullPath}`, err);\n                readReject();\n              });\n            };\n\n            readEntries();\n          });\n          promises.push(promise);\n        } else {\n          collection.push(path + '/' + entry.name);\n        }\n      });\n\n      Promise.all(promises).then(() => {\n        resolve(collection);\n      });\n    });\n  }\n\n  static _groupedFolderContents(evt) {\n    return new Promise((resolve, reject) => {\n      let grouping = {};\n      let promises = [];\n\n      // IE & Safari don't support the `items` property\n      if (!evt.dataTransfer.items) { resolve(grouping); }\n\n      for (let i = 0; i < evt.dataTransfer.items.length; i++) {\n        let item = evt.dataTransfer.items[i];\n        let fsEntry = item.webkitGetAsEntry();\n        if (fsEntry.isDirectory) {\n          let reader = fsEntry.createReader();\n          promises.push(new Promise((dirResolve, dirReject) => {\n            reader.readEntries((entries) => {\n              let dirPromise = this._collectFiles(entries, fsEntry.fullPath, []);\n              promises.push(dirPromise);\n              dirPromise.then((result) => {\n                grouping[fsEntry.name] = result;\n                dirResolve();\n              }, dirReject);\n            }, (err) => {\n              LogService.warn(`Failed to read directory contents for ${fsEntry.fullPath}`, err);\n              dirReject();\n            });\n          }));\n        }\n      }\n\n      Promise.all(promises).then(() => {\n        LogService.debug('[RunnerClient.AsperaDragDropService] Parsed drag-drop contents:', grouping);\n        resolve(grouping);\n      }, reject);\n    });\n  }\n}\n\nmodule.exports = { AsperaDragDropService };\n","const { EVENTS } = require('../../constants');\nconst ELEMENT_NAME = 'runner-uploader--file';\nconst template = document.createElement('template');\ntemplate.innerHTML = `\n  <style>\n    :host {\n      border-bottom: 1px solid #ccc;\n      display: flex;\n      justify-content: space-between;\n      align-items: baseline;\n      padding: 8px;\n      position: relative;\n    }\n\n    :host > * {\n      box-sizing: border-box;\n    }\n\n    :host[hidden] {\n      display: none;\n    }\n\n    :host[locked] #remove {\n      display: none;\n    }\n\n    :host #remove {\n      -webkit-appearance: none;\n      background: none;\n      border: none;\n      cursor: pointer;\n      font-size: medium;\n    }\n\n    :host:before,\n    :host:after {\n      visibility: hidden;\n      pointer-events: none;\n    }\n\n    /* Triangle hack */\n    :host:after {\n      position: absolute;\n      top: calc(100% - 5px);\n      left: 20px;\n      margin-left: -5px;\n      width: 0;\n      border-bottom: 5px solid rgba(0,0,0,0.6);\n      border-right: 5px solid transparent;\n      border-left: 5px solid transparent;\n      content: \" \";\n      font-size: 0;\n      line-height: 0;\n    }\n\n    :host:before {\n      position: absolute;\n      background-color: rgba(0,0,0,0.6);\n      color: white;\n      content: attr(data-tooltip);\n      padding: 4px 8px;\n      border-radius: 4px;\n      top: 100%;\n      z-index: 3;\n    }\n\n    :host:hover:after,\n    :host:hover:before {\n      visibility: visible;\n    }\n  </style>\n  <slot name=\"fileName\"></slot>\n  <button type=\"button\" id=\"remove\">&times;</button>\n`;\n\n// ShadyCSS polyfills scoped styles in browsers that don't support this\n// ShadowDOM feature.\nif (window.ShadyCSS) {\n  window.ShadyCSS.prepareTemplate(template, ELEMENT_NAME);\n}\n\nclass RunnerUploader__File extends HTMLElement {\n  static get elName() { return ELEMENT_NAME; }\n\n  constructor() {\n    super();\n    let shadowRoot = this.attachShadow({mode: 'open'});\n    shadowRoot.appendChild(template.content.cloneNode(true));\n  }\n\n  connectedCallback() {\n    this.shadowRoot.getElementById('remove').addEventListener('click', (evt) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n\n      this.dispatchEvent(\n        new CustomEvent(EVENTS.REMOVE_FILE, {\n          bubbles: true,\n          detail: { uuid: this.dataset.uuid }\n        })\n      );\n    });\n  }\n\n  static get observedAttributes() {\n    return ['locked'];\n  }\n\n  get locked() {\n    return this.hasAttribute('locked');\n  }\n\n  set locked(val) {\n    if (val) {\n      this.setAttribute('locked', '');\n    } else {\n      this.removeAttribute('locked');\n    }\n  }\n\n  static register() {\n    // Register the custom element to the DOM\n    if (!window.customElements.get(this.elName)) {\n      window.customElements.define(\n        this.elName,\n        this\n      );\n    }\n  }\n}\n\nRunnerUploader__File.register();\n","require('./__file'); // <runner-uploader--file> sub-component\nconst { EVENTS } = require('../../constants');\nconst { AsperaConnectService } = require('../../services/aspera_connect_service');\nconst { AsperaDragDropService } = require('../../services/aspera_drag_drop_service');\nconst { AsperaFileSerializer } = require('../../services/aspera_file_serializer');\nconst { AsperaUploadService } = require('../../services/aspera_upload_service');\nconst { FileUploadService } = require('../../services/file_upload_service');\nconst template = require('./template');\nconst ELEMENT_NAME = 'runner-uploader';\n\n// ShadyCSS polyfills scoped styles in browsers that don't support this\n// ShadowDOM feature.\nif (window.ShadyCSS) {\n  window.ShadyCSS.prepareTemplate(template, ELEMENT_NAME);\n}\n\nclass RunnerUploader extends HTMLElement {\n  /**\n   * Name of the HTML element\n   */\n  static get elName() { return ELEMENT_NAME; }\n\n  /**\n   * An instance of the element is created or upgraded. Useful for initializing\n   * state, settings up event listeners, or creating shadow dom. See the spec\n   * for restrictions on what you can do in the constructor.\n   */\n  constructor() {\n    super();\n    this.empty = true;\n    let shadowRoot = this.attachShadow({mode: 'open'});\n    shadowRoot.appendChild(template.content.cloneNode(true));\n  }\n\n  /**\n   * Called every time the element is inserted into the DOM. Useful for running\n   * setup code, such as fetching resources or rendering. Generally, you should\n   * try to delay work until this time.\n   */\n  connectedCallback() {\n    this._connectDragDrop();\n\n    const uploadButton = this.shadowRoot.getElementById('upload-button');\n    uploadButton.addEventListener('click', this.initiateUpload.bind(this));\n\n    const addFilesButton = this.shadowRoot.getElementById('add-files-button');\n    addFilesButton.addEventListener('click', this.addFiles.bind(this));\n\n    const addMoreButton = this.shadowRoot.getElementById('add-more-button');\n    addMoreButton.addEventListener('click', this.reset.bind(this));\n\n    this._filesList.addEventListener(EVENTS.REMOVE_FILE, (evt) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n\n      if (this.uploading) { return; }\n\n      let target = evt.target;\n\n      FileUploadService.removeFileByUUID(this.files, evt.detail.uuid).then(\n        () => {\n          target.remove();\n          this._emitFilesRemovedEvent();\n        }\n      );\n    });\n  }\n\n  /**\n   * Called every time the element is removed from the DOM. Useful for running\n   * clean up code.\n   */\n  disconnectedCallback() {\n    AsperaDragDropService.reset();\n  }\n\n  /**\n   * Elements can react to attribute changes by defining a\n   * attributeChangedCallback. The browser will call this method for every\n   * change to attributes listed in the observedAttributes array.\n   */\n  static get observedAttributes() {\n    return [\n      'destinationFolder',\n      'empty',\n      'error',\n      'incoming',\n      'uploading',\n      'uploadComplete'\n    ];\n  }\n\n  get destinationFolder() {\n    return this.getAttribute('destination-folder');\n  }\n\n  set destinationFolder(val) {\n    if (!val) {\n      this.removeAttribute('destination-folder');\n    } else {\n      if (!/\\d+/.test(val)) {\n        throw new Error(`[<${this.elName}>] destination-folder must be an integer`);\n      }\n      this.setAttribute('destination-folder', val);\n    }\n  }\n\n  get error() {\n    return this.hasAttribute('error');\n  }\n\n  set error(val) {\n    if (val) {\n      this.setAttribute('error', '');\n    } else {\n      this.removeAttribute('error');\n    }\n  }\n\n  get empty() {\n    return this.hasAttribute('empty');\n  }\n\n  set empty(val) {\n    if (val) {\n      this.setAttribute('empty', '');\n    } else {\n      this.removeAttribute('empty');\n    }\n  }\n\n  get folderIDs() {\n    if (!this._folderIDs) {\n      if (this.destinationFolder) {\n        this._folderIDs = [this.destinationFolder];\n      } else {\n        this._folderIDs = [];\n      }\n    }\n    return this._folderIDs;\n  }\n\n  set folderIDs(val) {\n    if (val.constructor.name !== 'Array' || !val.every(id => /\\d+/.test(id))) {\n      throw new Error(`[<${this.elName}>] folderIDs must be an Array of numbers`);\n    }\n    this.destinationFolder = undefined;\n    this._folderIDs = val;\n  }\n\n  get incoming() {\n    return this.hasAttribute('incoming');\n  }\n\n  set incoming(val) {\n    if (val) {\n      this.setAttribute('incoming', '');\n    } else {\n      this.removeAttribute('incoming');\n    }\n  }\n\n  get uploading() {\n    return this.hasAttribute('uploading');\n  }\n\n  set uploading(val) {\n    if (val) {\n      this.setAttribute('uploading', '');\n    } else {\n      this.removeAttribute('uploading');\n    }\n  }\n\n  get uploadComplete() {\n    return this.hasAttribute('upload-complete');\n  }\n\n  set uploadComplete(val) {\n    if (val) {\n      this.setAttribute('upload-complete', '');\n    } else {\n      this.removeAttribute('upload-complete');\n    }\n  }\n\n  get files() {\n    if (!this._files) {\n      this._files = [];\n    }\n    return this._files;\n  }\n\n\n  addFiles() {\n    AsperaConnectService.showFileUploadDialog((result) => {\n      this._addFilesFromAspera(result);\n    });\n  }\n\n  initiateUpload() {\n    if (this.uploading) { return; }\n    if (this.error) { this.error = false; }\n\n    this.dispatchEvent(new CustomEvent(EVENTS.UPLOAD_STARTED, {\n      bubbles: true,\n      detail: {\n        files: this.files,\n      }\n    }));\n    this.uploading = true;\n    Array.from(this._filesList.children).forEach(file => file.locked = true);\n    AsperaDragDropService.reset();\n\n    AsperaUploadService.upload(this.files, { folderIds: this.folderIDs }).then(\n      this._listenForTransferComplete.bind(this),\n      this._handleUploadFailure.bind(this)\n    );\n  }\n\n  reset() {\n    this._files = undefined;\n    Array.from(this._filesList.children).forEach(file => file.remove());\n    this.uploadComplete = false;\n    this.empty = true;\n    this._connectDragDrop();\n  }\n\n  _addFilesFromAspera(data) {\n    FileUploadService.addFiles(\n      this.files,\n      AsperaFileSerializer.serialize(data)\n    ).then(\n      (data) => { this._emitFilesAddedEvent(true, data); },\n      (error) => { this._emitFilesAddedEvent(false, error); },\n    );\n  }\n\n  _connectDragDrop() {\n    AsperaDragDropService.addTarget(this, {\n      dragEnter: [\n        () => { this.incoming = true; }\n      ],\n      dragLeave: [\n        () => { this.incoming = false; }\n      ],\n      drop: [\n        (dragObject) => {\n          this.incoming = false;\n          this._addFilesFromAspera(dragObject);\n        }\n      ]\n    });\n  }\n\n  _handleUploadFailure() {\n    this.dispatchEvent(new CustomEvent(EVENTS.UPLOAD_FAILED, {\n      bubbles: true,\n      detail: {\n        currentFiles: this.files,\n      }\n    }));\n    this.uploading = false;\n    Array.from(this._filesList.children).forEach(file => file.locked = false);\n    this._connectDragDrop();\n    this.error = true;\n  }\n\n  _emitFilesAddedEvent(success, data) {\n    this._fileChangeHandler();\n    this.dispatchEvent(\n      new CustomEvent(EVENTS.FILES_ADDED, {\n        detail: Object.assign({ success }, data),\n        bubbles: true,\n      })\n    );\n  }\n\n  _emitFilesRemovedEvent() {\n    this.dispatchEvent(\n      new CustomEvent(EVENTS.FILES_REMOVED, {\n        detail: { currentFiles: this.files },\n        bubbles: true,\n      })\n    );\n  }\n\n  _listenForTransferComplete(transferInfo) {\n    let requestID = transferInfo.data.connection_settings.request_id;\n    let listener = (transferCompleteInfo) => {\n      if (transferCompleteInfo.token === requestID && transferCompleteInfo.isBatchComplete) {\n        this._uploadComplete();\n\n        let listenerIdx = AsperaConnectService.eventCallbacks.transferComplete.indexOf(listener);\n        AsperaConnectService.eventCallbacks.transferComplete.splice(listenerIdx, 1);\n      }\n    };\n    AsperaConnectService.eventCallbacks.transferComplete.push(listener);\n  }\n\n  _uploadComplete() {\n    this.dispatchEvent(new CustomEvent(EVENTS.UPLOAD_COMPLETE, {\n      bubbles: true,\n      detail: {\n        currentFiles: this.files,\n      }\n    }));\n\n    this.uploading = false;\n    this.uploadComplete = true;\n  }\n\n  _fileChangeHandler() {\n    let renderedUUIDs = Array.from(this._filesList.children).map(li => li.dataset.uuid);\n    this.files.forEach(file => {\n      if (!renderedUUIDs.includes(file.uuid)) {\n        let fileEl = document.createElement('runner-uploader--file');\n        fileEl.innerHTML = `<span slot=\"fileName\">${file.fileName}</span>`;\n        fileEl.dataset.uuid = file.uuid;\n        fileEl.dataset.tooltip = file.fullFilePath;\n        this._filesList.prepend(fileEl);\n      }\n    });\n    this.empty = !this.files.length;\n  }\n\n  get _filesList() {\n    if (!this._filesListEl) {\n      this._filesListEl = this.shadowRoot.getElementById('files-list');\n    }\n    return this._filesListEl;\n  }\n\n  static register() {\n    // Register the custom element to the DOM\n    if (!window.customElements.get(this.elName)) {\n      window.customElements.define(\n        this.elName,\n        this\n      );\n    }\n  }\n}\n\nRunnerUploader.register();\n\nmodule.exports = { RunnerUploader };\n","const RunnerClient = require('../../index');\nconst ELEMENT_NAME = 'runner-client-configuration';\n\nclass RunnerClientConfiguration extends HTMLElement {\n  static get elName() { return ELEMENT_NAME; }\n\n  static get observedAttributes() {\n    return [\n      'token',\n      'method',\n      'environment',\n      'locale',\n      'logLevel'\n    ];\n  }\n\n  connectedCallback() {\n    this.configureClient();\n  }\n\n  configureClient() {\n    RunnerClient.configure({\n      authentication: {\n        method: this.method,\n        token: this.token,\n      },\n      environment: this.environment,\n      locale: this.locale,\n      logLevel: this.logLevel\n    });\n  }\n\n  get method() {\n    return this.getAttribute('method');\n  }\n\n  set method(val) {\n    if (val) {\n      this.setAttribute('method', val);\n    } else {\n      this.removeAttribute('method');\n    }\n    this.configureClient();\n  }\n\n  get token() {\n    return this.getAttribute('token');\n  }\n\n  set token(val) {\n    if (val) {\n      this.setAttribute('token', val);\n    } else {\n      this.removeAttribute('token');\n    }\n    this.configureClient();\n  }\n\n  get environment() {\n    return this.getAttribute('environment');\n  }\n\n  set environment(val) {\n    if (val) {\n      this.setAttribute('environment', val);\n    } else {\n      this.removeAttribute('environment');\n    }\n    this.configureClient();\n  }\n\n  get locale() {\n    return this.getAttribute('locale');\n  }\n\n  set locale(val) {\n    if (val) {\n      this.setAttribute('locale', val);\n    } else {\n      this.removeAttribute('locale');\n    }\n    this.configureClient();\n  }\n\n  get logLevel() {\n    return this.getAttribute('log-level');\n  }\n\n  set logLevel(val) {\n    if (val) {\n      this.setAttribute('log-level', val);\n    } else {\n      this.removeAttribute('log-level');\n    }\n    this.configureClient();\n  }\n\n  static register() {\n    // Register the custom element to the DOM\n    if (!window.customElements.get(this.elName)) {\n      window.customElements.define(\n        this.elName,\n        this\n      );\n    }\n  }\n}\n\nRunnerClientConfiguration.register();\n\nmodule.exports = { RunnerClientConfiguration };\n"],"sourceRoot":""}