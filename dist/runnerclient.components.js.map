{"version":3,"sources":["webpack://RunnerClient/./src/components.js","webpack://RunnerClient/./src/services/translation_service.js","webpack://RunnerClient/./src/services/file_validation_service.js","webpack://RunnerClient/./src/services/log_service.js","webpack://RunnerClient/./src/services/aspera_connect_service.js","webpack://RunnerClient/./src/services/file_factory.js","webpack://RunnerClient/./src/services/file_name_validation_service.js","webpack://RunnerClient/./src/components/runner_thumbnail_updater/template.js","webpack://RunnerClient/./src/services/thumbnail_replacement_service.js","webpack://RunnerClient/./src/components/runner_thumbnail_updater/component.js","webpack://RunnerClient/./src/components/runner_uploader/template.js","webpack://RunnerClient/./src/services/thumbnail_validation_service.js","webpack://RunnerClient/./src/services/file_upload_service.js","webpack://RunnerClient/./src/services/package_manifest_service.js","webpack://RunnerClient/./src/services/aspera_transfer_spec_formatter_service.js","webpack://RunnerClient/./src/services/aspera_upload_service.js","webpack://RunnerClient/./src/services/aspera_file_serializer.js","webpack://RunnerClient/./src/services/aspera_drag_drop_service.js","webpack://RunnerClient/./src/components/runner_uploader/__file.js","webpack://RunnerClient/./src/components/runner_uploader/component.js","webpack://RunnerClient/./src/components/runner_client_config/component.js"],"names":["RunnerClientConfiguration","__webpack_require__","RunnerUploader","RunnerThumbnailUpdater","module","exports","I18n","Config","translations","TranslationService","_i18n","this","i18n","_configureI18n","t","apply","arguments","locale","FileValidationService","fileName","toLowerCase","match","filePath","replace","LogService","_console","logLevelInt","console","info","_console2","warn","_console3","log","DEFAULT_EVENT_CALLBACKS","transfer","transferComplete","status","start","AsperaConnectService","id","window","AW4","Utils","generateUuid","connectInstaller","ConnectInstaller","CONNECT_INSTALLER_OPTIONS","supportsInstallingExtensions","connectOptions","Object","assign","dragDropEnabled","minVersion","CONNECT_OPTIONS","_connect","Connect","addEventListener","EVENT","STATUS","_handleAsperaEvent","bind","initSession","activeTransfers","uploadBatchCount","transferSpecs","connectionSettings","_this","connect","TRANSFER","tokens","allPromises","map","transferSpec","Promise","resolve","reject","result","startTransfer","success","error","push","request_id","transfer_spec","_executeEventListenersFor","promise","all","successCallback","showSelectFileDialog","showSelectFolderDialog","eventName","eventData","_handleAsperaStatusEvent","_handleAsperaTransferEvent","eventCallbacks","forEach","cb","INITIALIZING","RETRYING","showLaunching","FAILED","showDownload","OUTDATED","showUpdate","RUNNING","connected","_this2","transfers","data","_getTransferDataFor","percentage","splice","index","length","token","isBatchComplete","hasActiveTransfers","_removeTransferListener","hasOwnProperty","aspera_connect_settings","indexOf","removeEventListener","_eventCallbacks","initialize","keys","options","__CONNECT_OPTIONS","__CONNECT_INSTALLER_OPTIONS","FileNameValidationService","ThumbnailValidationService","FileFactory","file","_classCallCheck","getFileName","name","fullFilePath","processing","size","fileObj","uuid","crypto","getRandomValues","Uint32Array","hasValidCharacters","containsValidCharacters","hasExtension","containsExtension","hasValidExtension","containsValidExtension","valid","doesNotRequireExtension","validThumbnail","validFile","UNSUPPORTED_FILE_EXTENSIONS","test","getExtension","includes","TRANSLATION_SCOPE","scope","key","translate","template","document","createElement","innerHTML","API","axios","ThumbnailReplacementService","assetItemID","replaceThumbnail","then","response","debug","mcsId","mcs_id","_uploadImageToMCS","mcsResponse","thumbnail","thumbnails","find","type","thumbnail_url","location","FormData","append","request","url","method","headers","Authorization","onUploadProgress","evt","EVENTS","ELEMENT_NAME","ShadyCSS","prepareTemplate","_possibleConstructorReturn","__proto__","getPrototypeOf","call","empty","attachShadow","mode","appendChild","content","cloneNode","_addEventListeners","_dragEnterListener","preventDefault","stopPropagation","incoming","_dragLeaveListener","_dragOverListener","_dropListener","_handleDrop","uploadBtn","shadowRoot","getElementById","_uploadClickListener","_beginUpload","addFileBtn","_addFilesClickListener","click","fileInput","_fileAddedListener","_handleFileAdded","_this3","errors","uploading","promises","assetItemIDs","replaceThumbnailFor","results","bulkUpdateAssetItems","uploadComplete","_emitUploadCompleteEvent","catch","err","_setErrorMessage","_emitUploadFailedEvent","dispatchEvent","CustomEvent","UPLOAD_COMPLETE","bubbles","detail","filename","UPLOAD_FAILED","event","files","dataTransfer","_setPreview","target","errMsg","errText","innerText","_this4","previewContainer","children","Array","from","el","remove","progressEl","reader","FileReader","onprogress","max","total","value","loaded","onload","img","src","onerror","readAsDataURL","getAttribute","val","Error","elName","setAttribute","removeAttribute","_assetItemIDs","constructor","every","undefined","hasAttribute","customElements","get","define","register","BROWSER","EDGE","VALID_THUMBNAIL_FILE_EXTENSIONS","MAX_THUMBNAIL_SIZE","fileSize","isValidFileSize","MAX_UPLOAD_COUNT","FileUploadService","currentFiles","fileList","removeDuplicates","_toConsumableArray","filesAdded","newFileList","existingFileNames","uniqueFileList","ffile","fileIdx","findIndex","PackageManifestService","asperaTransferEventData","packageTransferSpecs","path","paths","source","found","asset_item_id","custom_metadata_fields","manifestForFiles","category","label","fullFolderPath","roots","tree","_folderNameFromFullFolderPath","count","components","RegExp","exec","split","component","_isValid","child","nodeChildren","node","_removeEmptyChildren","manifestFor","manifest","numberOfFiles","numberOfFolders","sorted","processChildren","folderNames","foldersToProcess","_sort","_hasNonFolderChild","hash","join","folder","concat","pathComponents","level","item","firstTwoCharacters","collection","sort","a","b","lowerNameA","lowerNameB","cloneDeep","AsperaTransferSpecFormatterService","uploadResponseData","nonPackageTransferSpec","packageIndex","fileIndex","packageMappings","package_transfer_specs","isFolder","packageTransferSpec","AsperaUploadService","items","attrs","package","fetchFolderContentsFromDragDropEvent","upload","formatted","asperaConnectService","connection_settings","activeUploads","assetItemAttrsCollection","ingestBatchId","ingest_batch_id","activeUpload","manifestForAsperaTransferEventData","completeIngestBatchUpload","_activeUploads","_asperaConnectService","_onTransferComplete","AsperaFileSerializer","dragDropManifestGrouping","fileNameComponents","dragEnter","dragLeave","dragOver","drop","AsperaDragDropService","callbacks","registerAll","_dragEnterCallback","dragEnterCallback","_dragLeaveCallback","dragLeaveCallback","_dragOverCallback","dragOverCallback","_dropCallback","dropCallback","_target","_executeEventCallbacksFor","filesDropped","i","fileObject","lastModifiedDate","_groupedFolderContents","manifestGrouping","connectHttpRequest","HTTP_METHOD","POST","SESSION_ID","grouping","remaining","_loop","entry","webkitGetAsEntry","_processEntry","fullPath","topLevelEntry","directoryCount","processEntries","entries","isDirectory","read","readEntries","childEntries","createReader","RunnerUploader__File","REMOVE_FILE","dataset","_connectDragDrop","initiateUpload","addFiles","reset","_filesList","removeFileByUUID","_emitFilesRemovedEvent","showFileUploadDialog","_addFilesFromAspera","UPLOAD_STARTED","locked","folderIds","folderIDs","_listenForTransferComplete","_handleUploadFailure","_files","serialize","_emitFilesAddedEvent","_this5","addTarget","dragObject","_fileChangeHandler","FILES_ADDED","FILES_REMOVED","transferInfo","_this6","requestID","listener","transferCompleteInfo","_uploadComplete","listenerIdx","_this7","renderedUUIDs","li","fileEl","tooltip","prepend","_folderIDs","destinationFolder","_filesListEl","RunnerClient","configureClient","configure","authentication","environment","logLevel"],"mappings":"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","file":"runnerclient.components.js","sourcesContent":["const { RunnerClientConfiguration } = require('./components/runner_client_config/component');\nconst { RunnerUploader } = require('./components/runner_uploader/component');\nconst { RunnerThumbnailUpdater } = require('./components/runner_thumbnail_updater/component');\n\nmodule.exports = {\n  RunnerClientConfiguration,\n  RunnerThumbnailUpdater,\n  RunnerUploader\n};\n","const I18n = require('i18n-js');\nconst { Config } = require('../config');\nconst translations = require('../translations.js');\n\nclass TranslationService {\n  static translate(...args) {\n    if (!this.i18n) {\n      this._configureI18n();\n    }\n    return this.i18n.t(...args);\n  }\n\n  static _configureI18n() {\n    I18n.translations = translations;\n    I18n.locale = Config.locale;\n    this.i18n = I18n;\n  }\n}\n\nmodule.exports = { TranslationService };\n","class FileValidationService {\n  static getExtension(fileName) {\n    return (fileName.toLowerCase().match(/^[^.].*(\\.\\w+)$/) || [])[1];\n  }\n\n  static getFileName(filePath) {\n    return filePath.replace(/^[\\w\\W]*[/\\\\]/, '');\n  }\n}\n\nmodule.exports = { FileValidationService };\n","/* eslint no-console: \"off\" */\nconst { Config } = require('../config');\n\nclass LogService {\n  static info(...args) {\n    if (Config.logLevelInt >= 2) {\n      console.info(...args);\n    }\n  }\n\n  static warn(...args) {\n    if (Config.logLevelInt >= 1) {\n      console.warn(...args);\n    }\n  }\n\n  static debug(...args) {\n    if (Config.logLevelInt >= 3) {\n      console.log(...args);\n    }\n  }\n}\n\nmodule.exports = { LogService };\n","const REQUIRED_ASPERA_VERSION = '3.9.8';\nconst DEFAULT_EVENT_CALLBACKS = {\n  transfer: [],\n  transferComplete: [],\n  status: [],\n  start: []\n};\n\nclass AsperaConnectService {\n  static initialize() {\n    let id = window.AW4.Utils.generateUuid();\n    this.connectInstaller = new window.AW4.ConnectInstaller(this.CONNECT_INSTALLER_OPTIONS);\n    window.AW4.ConnectInstaller.supportsInstallingExtensions = true;\n\n    let connectOptions = Object.assign({\n      id: id,\n      dragDropEnabled: true,\n      minVersion: REQUIRED_ASPERA_VERSION\n    }, this.CONNECT_OPTIONS);\n    this._connect = new window.AW4.Connect(connectOptions);\n    this._connect.addEventListener(window.AW4.Connect.EVENT.STATUS, this._handleAsperaEvent.bind(this));\n    this._connect.initSession(id);\n\n    this.activeTransfers = {};\n    this.uploadBatchCount = 0;\n  }\n\n  static set eventCallbacks(eventCallbacks) {\n    this._eventCallbacks = Object.assign({}, DEFAULT_EVENT_CALLBACKS, eventCallbacks);\n  }\n\n  static get eventCallbacks() {\n    if (!this._eventCallbacks) {\n      this._eventCallbacks = Object.assign({}, DEFAULT_EVENT_CALLBACKS);\n    }\n    return this._eventCallbacks;\n  }\n\n  static get connect() {\n    if (!this._connect) {\n      this.initialize();\n    }\n    return this._connect;\n  }\n\n  static start(transferSpecs, connectionSettings) {\n    this.connect.addEventListener(window.AW4.Connect.EVENT.TRANSFER, this._handleAsperaEvent.bind(this));\n    let tokens = [];\n\n    let allPromises = transferSpecs.map((transferSpec) => {\n      return new Promise((resolve, reject) => {\n        let result = this.connect.startTransfer(transferSpec, connectionSettings, {\n          success: resolve,\n          error: reject\n        });\n\n        if (result.error) {\n          reject(result.error);\n        } else {\n          tokens.push(result.request_id);\n          result.transfer_spec = transferSpec;\n          this._executeEventListenersFor('start', result);\n        }\n      });\n    });\n\n    this.uploadBatchCount += 1;\n    this.activeTransfers[this.uploadBatchCount] = tokens;\n\n    return { id: this.uploadBatchCount, promise: Promise.all(allPromises) };\n  }\n\n  static showFileUploadDialog(successCallback) {\n    this.connect.showSelectFileDialog({\n      success: successCallback\n    });\n  }\n\n  static showFolderUploadDialog(successCallback) {\n    this.connect.showSelectFolderDialog({\n      success: successCallback\n    });\n  }\n\n  static _handleAsperaEvent(eventName, eventData) {\n    if (eventName === window.AW4.Connect.EVENT.STATUS)   { this._handleAsperaStatusEvent(eventData); }\n    if (eventName === window.AW4.Connect.EVENT.TRANSFER) { this._handleAsperaTransferEvent(eventData); }\n  }\n\n  static _executeEventListenersFor(eventName, eventData) {\n    this.eventCallbacks[eventName].forEach(cb => cb(eventData));\n  }\n\n  static _handleAsperaStatusEvent(eventData) {\n    this._executeEventListenersFor('status', eventData);\n\n    switch(eventData) {\n    case window.AW4.Connect.STATUS.INITIALIZING:\n    case window.AW4.Connect.STATUS.RETRYING:\n      this.connectInstaller.showLaunching();\n      break;\n    case window.AW4.Connect.STATUS.FAILED:\n      this.connectInstaller.showDownload();\n      break;\n    case window.AW4.Connect.STATUS.OUTDATED:\n      this.connectInstaller.showUpdate();\n      break;\n    case window.AW4.Connect.STATUS.RUNNING:\n      this.connectInstaller.connected();\n      break;\n    }\n  }\n\n  static _handleAsperaTransferEvent(eventData) {\n    eventData.transfers.forEach((transfer) => {\n      if (transfer.transfer_spec) {\n        this._executeEventListenersFor('transfer', transfer);\n\n        let data = this._getTransferDataFor(transfer);\n        if (data) {\n          if (transfer.percentage === 1) {\n            let tokens = this.activeTransfers[data.id];\n            tokens.splice(data.index, 1);\n\n            if (tokens.length === 0) {\n              delete(this.activeTransfers[data.id]);\n            }\n\n            this._executeEventListenersFor('transferComplete', {\n              transfer: transfer,\n              id: data.id,\n              token: data.token,\n              isBatchComplete: !tokens.length\n            });\n          }\n        }\n      }\n    });\n\n    if (!this.hasActiveTransfers) { this._removeTransferListener(); }\n  }\n\n  static get hasActiveTransfers() {\n    return !!Object.keys(this.activeTransfers).length;\n  }\n\n  static _getTransferDataFor(transfer) {\n    for (let id in this.activeTransfers) {\n      if (!this.activeTransfers.hasOwnProperty(id)) { continue; }\n\n      let tokens = this.activeTransfers[id];\n      if (tokens) {\n        let token = transfer.aspera_connect_settings.request_id;\n        let index = tokens.indexOf(token);\n        if (index !== -1) { return { id: id, token: token, index: index }; }\n      }\n    }\n  }\n\n  static _removeTransferListener() {\n    this.connect.removeEventListener(window.AW4.Connect.EVENT.TRANSFER);\n  }\n\n  /**\n   * Use this setter to provide non-default configuration to the\n   * AW4.Connect() constructor\n   */\n  static set CONNECT_OPTIONS (options) {\n    this.__CONNECT_OPTIONS = options;\n  }\n\n  static get CONNECT_OPTIONS () {\n    return this.__CONNECT_OPTIONS || {};\n  }\n\n  /**\n   * Use this setter to provide non-default configuration to the\n   * AW4.ConnectInstaller() constructor\n   */\n  static set CONNECT_INSTALLER_OPTIONS (options) {\n    this.__CONNECT_INSTALLER_OPTIONS = options;\n  }\n\n  static get CONNECT_INSTALLER_OPTIONS () {\n    return this.__CONNECT_INSTALLER_OPTIONS || {};\n  }\n}\n\nmodule.exports = { AsperaConnectService };\n","const { FileNameValidationService } = require('./file_name_validation_service');\nconst { FileValidationService } = require('./file_validation_service');\nconst { ThumbnailValidationService } = require('./thumbnail_validation_service');\n\nclass FileFactory {\n  constructor(file) {\n    this.fileName = FileValidationService.getFileName(file.name);\n    this.fullFilePath = file.name;\n    this.processing = false;\n    this.size = file.size;\n    this.fileObj = file;\n    this.uuid = window.crypto.getRandomValues(new Uint32Array(1))[0];\n\n    this.hasValidCharacters = FileNameValidationService.containsValidCharacters(this.fileName);\n    this.hasExtension = FileNameValidationService.containsExtension(this.fileName);\n    this.hasValidExtension = FileNameValidationService.containsValidExtension(this.fileName);\n\n    this.valid = function () {\n      return FileNameValidationService.valid(this.fileName, this.fileObj.doesNotRequireExtension);\n    };\n\n    this.validThumbnail = function () {\n      let validFile = this.valid();\n      let validThumbnail = ThumbnailValidationService.valid(file);\n\n      return validFile && validThumbnail;\n    };\n  }\n}\n\nmodule.exports = { FileFactory };\n","const { UNSUPPORTED_FILE_EXTENSIONS } = require('../constants');\nconst { FileValidationService } = require('./file_validation_service');\n\nclass FileNameValidationService {\n  static containsValidCharacters(fileName) {\n    return !(/:|\\/|\"|;|'|\\?|!|>|<|&|\\||\\*|@/.test(fileName));\n  }\n\n  static containsExtension(fileName) {\n    return !!FileValidationService.getExtension(fileName);\n  }\n\n  static containsValidExtension(fileName) {\n    return !UNSUPPORTED_FILE_EXTENSIONS.includes(FileValidationService.getExtension(fileName));\n  }\n\n  static valid(fileName, doesNotRequireExtension) {\n    if (doesNotRequireExtension) {\n      return this.containsValidCharacters(fileName);\n    } else {\n      return (this.containsValidCharacters(fileName) &&\n      this.containsExtension(fileName) &&\n      this.containsValidExtension(fileName));\n    }\n  }\n}\n\nmodule.exports = { FileNameValidationService };\n","const { TranslationService } = require('../../services/translation_service');\nconst TRANSLATION_SCOPE = { scope: 'RunnerThumbnailUpdater' };\nconst t = (key) => {\n  return TranslationService.translate(key, TRANSLATION_SCOPE);\n};\n\nconst template = document.createElement('template');\ntemplate.innerHTML = `\n  <style>\n    :host {\n      display: flex;\n      flex-direction: column;\n      position: relative;\n      border: 1px solid #999;\n      height: 500px;\n      width: 100%;\n    }\n\n    :host > * {\n      box-sizing: border-box;\n    }\n\n    :host([incoming][empty]) #incoming {\n      display: flex;\n    }\n\n    :host([incoming][empty]) #empty-dropzone {\n      display: none;\n    }\n\n    :host([empty]) #upload-button {\n      display: none;\n    }\n    :host([empty]) #empty-dropzone {\n      display: -ms-flexbox;\n      display: flex;\n    }\n\n    :host #preview {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      flex: 1 0 0.1px;\n    }\n\n    :host #preview img {\n      flex: 0 1 0.01px;\n      max-height: 100%;\n    }\n\n    :host #empty-dropzone {\n      display: none;\n      height: 100%;\n      justify-content: center;\n      align-items: center;\n      flex-direction: column;\n    }\n\n    :host #incoming {\n      align-items: center;\n      display: none;\n      height: 100%;\n      justify-content: center;\n      position: absolute;\n      width: 100%;\n      z-index: 10;\n    }\n\n    :host #error,\n    :host #uploading,\n    :host #upload-complete {\n      display: none;\n      flex: 1;\n      justify-content: space-between;\n    }\n\n    :host([error]) #error {\n      display: flex;\n    }\n\n    :host([uploading]) #uploading {\n      display: flex;\n    }\n    :host([uploading]) #upload-button,\n    :host([uploading]) #add-file-button {\n      display: none;\n    }\n\n    :host([upload-complete]) #upload-complete {\n      display: flex;\n    }\n    :host([upload-complete]) #upload-button,\n    :host([upload-complete]) #add-file-button {\n      display: none;\n    }\n\n    :host #add-file-input {\n      display: none;\n    }\n\n    :host footer {\n      background: rgba(0, 0, 0, 0.1);\n      width: 100%;\n      padding: 8px;\n      display: flex;\n      justify-content: flex-end;\n    }\n\n    :host footer span {\n      flex: 1;\n    }\n  </style>\n\n  <div id=\"empty-dropzone\">\n    <slot name=\"emptyDropzone\">\n      <h1>${t('emptyHeadingText')}</h1>\n      <h2>${t('emptySubheadingText')}</h2>\n      <h3>${t('emptyAdditionalText')}</h3>\n    </slot>\n  </div>\n\n  <div id=\"incoming\">\n    <slot name=\"incoming\">\n      <h1>${t('incoming')}</h1>\n    </slot>\n  </div>\n\n  <div id=\"preview\"></div>\n\n  <footer>\n    <div id=\"error\">\n      <slot name=\"error\">\n        <span id=\"error-message\">${t('error')}</span>\n      </slot>\n    </div>\n\n    <div id=\"uploading\">\n      <slot name=\"uploading\">\n        <span>${t('uploading')}</span>\n      </slot>\n    </div>\n\n    <div id=\"upload-complete\">\n      <slot name=\"uploadComplete\">\n        <span>${t('uploadComplete')}</span>\n      </slot>\n    </div>\n\n    <slot name=\"addFileButton\">\n      <button type=\"button\" id=\"add-file-button\">${t('addFile')}</button>\n      <input type=\"file\" id=\"add-file-input\" />\n    </slot>\n\n    <slot name=\"uploadButton\">\n      <button type=\"button\" id=\"upload-button\">${t('upload')}</button>\n    </slot>\n  </footer>\n`;\n\nmodule.exports = template;\n","const { API } = require('../api');\nconst { LogService } = require('./log_service');\nconst axios = require('axios');\n\nclass ThumbnailReplacementService {\n  static replaceThumbnailFor(assetItemID, file) {\n    // Fetch delegate token from runner\n    return API.replaceThumbnail(assetItemID, file.fileName)\n      .then((response) => {\n        LogService.debug(`[${this.name}] Delegate token recieved`, response);\n        const token = response.data.token;\n        const mcsId = response.data.mcs_id;\n        // Upload the image to MCS\n        return this._uploadImageToMCS(mcsId, token, file.fileObj);\n      })\n      .then((mcsResponse) => {\n        let thumbnail = mcsResponse.data.thumbnails.find(t => t.type === 'small');\n        return {\n          id: assetItemID,\n          thumbnail_url: thumbnail.location\n        };\n      });\n  }\n\n  static _uploadImageToMCS(mcsId, token, file) {\n    const data = new FormData();\n    data.append('file', file);\n\n    return axios.request({\n      url: `https://io.cimediacloud.com/assets/${mcsId}/coverelement/upload`,\n      method: 'post',\n      data: data,\n      headers: {\n        'Authorization': `Bearer ${token}`,\n      },\n      onUploadProgress: (evt) => { LogService.debug(`[${this.name}] Upload Progress`, evt); }\n    });\n  }\n}\n\nmodule.exports = { ThumbnailReplacementService };\n","// Base element for <runner-uploader> and <runner-thumbnail-updater>\nconst { API } = require('../../api');\nconst { FileFactory } = require('../../services/file_factory');\nconst { LogService } = require('../../services/log_service');\nconst { ThumbnailReplacementService } = require('../../services/thumbnail_replacement_service');\nconst { TranslationService } = require('../../services/translation_service');\nconst TRANSLATION_SCOPE = { scope: 'RunnerThumbnailUpdater' };\nconst { EVENTS } = require('../../constants');\nconst ELEMENT_NAME = 'runner-thumbnail-updater';\nconst template = require('./template');\nif (window.ShadyCSS) {\n  window.ShadyCSS.prepareTemplate(template, ELEMENT_NAME);\n}\n\nclass RunnerThumbnailUpdater extends HTMLElement {\n  static get elName() { return ELEMENT_NAME; }\n\n  constructor() {\n    super();\n    this.empty = true;\n    let shadowRoot = this.attachShadow({mode: 'open'});\n    shadowRoot.appendChild(template.content.cloneNode(true));\n  }\n\n  connectedCallback() {\n    this._addEventListeners();\n  }\n\n  static get observedAttributes() {\n    return [\n      'assetItemID',\n      'empty',\n      'error',\n      'incoming',\n      'uploading',\n      'uploadComplete'\n    ];\n  }\n\n  get assetItemID() {\n    return this.getAttribute('asset-item-id');\n  }\n\n  set assetItemID(val) {\n    if (!val) {\n      this.removeAttribute('asset-item-id');\n    } else {\n      if (!/\\d+/.test(val)) {\n        throw new Error(`[<${this.elName}>] asset-item-id must be an integer`);\n      }\n      this.setAttribute('asset-item-id', val);\n    }\n  }\n\n  get assetItemIDs() {\n    if (!this._assetItemIDs) {\n      if (this.assetItemID) {\n        this._assetItemIDs = [this.assetItemID];\n      } else {\n        this._assetItemIDs = [];\n      }\n    }\n    return this._assetItemIDs;\n  }\n\n  set assetItemIDs(val) {\n    if (val.constructor.name !== 'Array' || !val.every(id => /\\d+/.test(id))) {\n      throw new Error(`[<${this.elName}>] assetItemIDs must be an Array of numbers`);\n    }\n    this.assetItemID = undefined;\n    this._assetItemIDs = val;\n  }\n\n\n  get empty() {\n    return this.hasAttribute('empty');\n  }\n\n  set empty(val) {\n    if (val) {\n      this.setAttribute('empty', '');\n    } else {\n      this.removeAttribute('empty');\n    }\n  }\n\n  get error() {\n    return this.hasAttribute('error');\n  }\n\n  set error(val) {\n    if (val) {\n      this.setAttribute('error', '');\n    } else {\n      this.removeAttribute('error');\n    }\n  }\n\n  get incoming() {\n    return this.hasAttribute('incoming');\n  }\n\n  set incoming(val) {\n    if (val) {\n      this.setAttribute('incoming', '');\n    } else {\n      this.removeAttribute('incoming');\n    }\n  }\n\n  get uploading() {\n    return this.hasAttribute('uploading');\n  }\n\n  set uploading(val) {\n    if (val) {\n      this.setAttribute('uploading', '');\n    } else {\n      this.removeAttribute('uploading');\n    }\n  }\n\n  get uploadComplete() {\n    return this.hasAttribute('upload-complete');\n  }\n\n  set uploadComplete(val) {\n    if (val) {\n      this.setAttribute('upload-complete', '');\n    } else {\n      this.removeAttribute('upload-complete');\n    }\n  }\n\n  _addEventListeners() {\n    // Drag-drop setup\n    this._dragEnterListener = ((evt) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n      this.incoming = true;\n    }).bind(this);\n    this._dragLeaveListener = ((evt) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n      this.incoming = false;\n    }).bind(this);\n    this._dragOverListener = ((evt) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n    }).bind(this);\n    this._dropListener = ((evt) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n      this.incoming = false;\n      this._handleDrop(evt);\n    }).bind(this);\n\n    this.addEventListener('dragenter', this._dragEnterListener);\n    this.addEventListener('dragleave', this._dragLeaveListener);\n    this.addEventListener('dragover', this._dragOverListener);\n    this.addEventListener('drop', this._dropListener);\n\n    // \"Upload\" button setup\n    const uploadBtn = this.shadowRoot.getElementById('upload-button');\n    this._uploadClickListener = ((evt) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n      this._beginUpload();\n    }).bind(this);\n    uploadBtn.addEventListener('click', this._uploadClickListener);\n\n    // \"Add File\" button\n    const addFileBtn = this.shadowRoot.getElementById('add-file-button');\n    this._addFilesClickListener = ((evt) => {\n      evt.stopPropagation();\n      evt.preventDefault();\n      this.shadowRoot.getElementById('add-file-input').click();\n    }).bind(this);\n    addFileBtn.addEventListener('click', this._addFilesClickListener);\n\n    // File added via input\n    const fileInput = this.shadowRoot.getElementById('add-file-input');\n    this._fileAddedListener = ((evt) => {\n      evt.stopPropagation();\n      evt.preventDefault();\n      this._handleFileAdded(evt);\n    }).bind(this);\n    fileInput.addEventListener('change', this._fileAddedListener);\n  }\n\n  _beginUpload() {\n    this.errors = false;\n    this.uploading = true;\n    let promises = this.assetItemIDs.map(assetItemID => {\n      return ThumbnailReplacementService.replaceThumbnailFor(assetItemID, this.file);\n    });\n    Promise.all(promises).then(\n      (results) => {\n        return API.bulkUpdateAssetItems(results);\n      }\n    ).then(\n      () => {\n        this.uploading = false;\n        this.uploadComplete = true;\n        this._emitUploadCompleteEvent();\n      }\n    ).catch(\n      (err) => {\n        this.uploading = false;\n        LogService.warn(`[${ELEMENT_NAME}] Failed to update thumbnail!`, err);\n        this._setErrorMessage('error');\n        this._emitUploadFailedEvent(err);\n      }\n    );\n  }\n\n  _emitUploadCompleteEvent() {\n    this.dispatchEvent(\n      new CustomEvent(EVENTS.UPLOAD_COMPLETE, {\n        bubbles: true,\n        detail: {\n          assetItemIDs: this.assetItemIDs,\n          filename: this.file.fileName\n        }\n      })\n    );\n  }\n\n  _emitUploadFailedEvent(error) {\n    this.dispatchEvent(\n      new CustomEvent(EVENTS.UPLOAD_FAILED, {\n        bubbles: true,\n        detail: {\n          assetItemIDs: this.assetItemIDs,\n          filename: this.file.fileName,\n          error: error\n        }\n      })\n    );\n  }\n\n  _handleDrop(event) {\n    LogService.debug(`[${ELEMENT_NAME}] Drop event recieved`, event);\n    this.error = false;\n    let files = event.dataTransfer.files;\n    if (files.length > 1) {\n      this._setErrorMessage('tooMany');\n      return;\n    }\n\n    let file = new FileFactory(files[0]);\n    if (!file.validThumbnail()) {\n      this._setErrorMessage('invalidFile');\n      return;\n    }\n\n    this.file = file;\n    this._setPreview(file);\n  }\n\n  _handleFileAdded(event) {\n    LogService.debug(`[${ELEMENT_NAME}] File added via input`, event);\n    this.error = false;\n\n    let file = new FileFactory(event.target.files[0]);\n    if (!file.validThumbnail()) {\n      this._setErrorMessage('invalidFile');\n      return;\n    }\n\n    this.file = file;\n    this._setPreview(file);\n  }\n\n  _setErrorMessage(key) {\n    let errMsg = this.shadowRoot.getElementById('error-message');\n    let errText = TranslationService.translate(key, TRANSLATION_SCOPE);\n    errMsg.innerText = errText;\n    this.error = true;\n  }\n\n  _setPreview(file) {\n    this.empty = false;\n\n    let previewContainer = this.shadowRoot.getElementById('preview');\n    if (previewContainer.children.length) {\n      Array.from(previewContainer.children).forEach(el => el.remove());\n    }\n    let progressEl = document.createElement('progress');\n    previewContainer.appendChild(progressEl);\n\n    let reader = new FileReader();\n    reader.onprogress = (evt) => {\n      LogService.debug(`[${ELEMENT_NAME}] FileReader progress`, evt);\n      progressEl.max = evt.total;\n      progressEl.value = evt.loaded;\n    };\n\n    reader.onload = (evt) => {\n      LogService.debug(`[${ELEMENT_NAME}] FileReader loaded`, evt);\n      progressEl.remove();\n      let img = document.createElement('img');\n      img.src = reader.result;\n      previewContainer.appendChild(img);\n    };\n\n    reader.onerror = (evt) => {\n      LogService.warn(`[${ELEMENT_NAME}] FileReader load error`, evt);\n      this.empty = true;\n      this._setErrorMessage('fileReadFailed');\n    };\n\n    reader.readAsDataURL(file.fileObj);\n  }\n\n  static register() {\n    // Register the custom element to the DOM\n    if (!window.customElements.get(this.elName)) {\n      window.customElements.define(\n        this.elName,\n        this\n      );\n    }\n  }\n}\n\nRunnerThumbnailUpdater.register();\n\nmodule.exports = { RunnerThumbnailUpdater };\n","const { TranslationService } = require('../../services/translation_service');\n\nconst isEdge = window.AW4.Utils.BROWSER.EDGE;\nconst TRANSLATION_SCOPE = { scope: isEdge ? 'RunnerUploader.edge' : 'RunnerUploader' };\n\nconst t = (key) => {\n  return TranslationService.translate(key, TRANSLATION_SCOPE);\n};\n\nconst template = document.createElement('template');\ntemplate.innerHTML = `\n  <style>\n    :host {\n      display: block;\n      position: relative;\n      border: 1px solid #999;\n      height: 500px;\n      width: 100%;\n    }\n\n    :host > * {\n      box-sizing: border-box;\n    }\n\n    :host([incoming][empty]) #incoming {\n      display: flex;\n    }\n\n    :host([incoming][empty]) #empty-dropzone {\n      display: none;\n    }\n\n    :host([empty]) #upload-button {\n      display: none;\n    }\n    :host([empty]) #empty-dropzone {\n      display: flex;\n    }\n\n    :host #files-list {\n      height: 100%;\n      overflow-y: scroll;\n    }\n\n    :host #empty-dropzone {\n      display: none;\n      height: 100%;\n      justify-content: center;\n      align-items: center;\n      flex-direction: column;\n    }\n\n    :host #incoming {\n      align-items: center;\n      display: none;\n      height: 100%;\n      justify-content: center;\n      position: absolute;\n      width: 100%;\n      z-index: 10;\n    }\n\n    :host #error,\n    :host #uploading,\n    :host #upload-complete {\n      display: none;\n      flex: 1;\n      justify-content: space-between;\n    }\n\n    :host([error]) #error {\n      display: flex;\n    }\n\n    :host([uploading]) #uploading {\n      display: flex;\n    }\n    :host([uploading]) #upload-button,\n    :host([uploading]) #add-files-button {\n      display: none;\n    }\n\n    :host([upload-complete]) #upload-complete {\n      display: flex;\n    }\n    :host([upload-complete]) #upload-button,\n    :host([upload-complete]) #add-files-button {\n      display: none;\n    }\n\n    :host footer {\n      background: rgba(0, 0, 0, 0.1);\n      position: absolute;\n      width: 100%;\n      padding: 8px;\n      bottom: 0;\n      display: flex;\n      justify-content: flex-end;\n    }\n\n    :host footer span {\n      flex: 1;\n    }\n  </style>\n\n  <div id=\"empty-dropzone\">\n    <slot name=\"emptyDropzone\">\n      <h1>${t('emptyHeadingText')}</h1>\n      <h2>${t('emptySubheadingText')}</h2>\n    </slot>\n  </div>\n\n  <div id=\"incoming\">\n    <slot name=\"incoming\">\n      <h1>${t('incoming')}</h1>\n    </slot>\n  </div>\n\n  <div id=\"files-list\"></div>\n\n  <footer>\n    <div id=\"error\">\n      <slot name=\"error\">\n        <span>${t('error')}</span>\n      </slot>\n    </div>\n\n    <div id=\"uploading\">\n      <slot name=\"uploading\">\n        <span>${t('uploading')}</span>\n      </slot>\n    </div>\n\n    <div id=\"upload-complete\">\n      <slot name=\"uploadComplete\">\n        <span>${t('uploadComplete')}</span>\n        <button type=\"button\" id=\"add-more-button\">${t('uploadMore')}</button>\n      </slot>\n    </div>\n\n    <slot name=\"addFilesButton\">\n      <button type=\"button\" id=\"add-files-button\">${t('addFiles')}</button>\n    </slot>\n\n    <slot name=\"uploadButton\">\n      <button type=\"button\" id=\"upload-button\">${t('upload')}</button>\n    </slot>\n  </footer>\n`;\n\nmodule.exports = template;\n","const { VALID_THUMBNAIL_FILE_EXTENSIONS, MAX_THUMBNAIL_SIZE } = require('../constants');\nconst { FileValidationService } = require('./file_validation_service');\n\nclass ThumbnailValidationService {\n  static containsValidExtension(fileName) {\n    return VALID_THUMBNAIL_FILE_EXTENSIONS.includes(FileValidationService.getExtension(fileName));\n  }\n\n  static isValidFileSize(fileSize) {\n    return fileSize <= MAX_THUMBNAIL_SIZE;\n  }\n\n  static valid(file) {\n    return (this.containsValidExtension(file.name) && this.isValidFileSize(file.size));\n  }\n}\n\nmodule.exports = { ThumbnailValidationService };\n","const { FileFactory } = require('./file_factory');\nconst { MAX_UPLOAD_COUNT } = require('../constants');\n\nclass FileUploadService {\n  static addFiles(currentFiles, fileList) {\n    return new Promise((resolve, reject) => {\n      fileList = this.removeDuplicates(currentFiles, fileList);\n\n      if ((currentFiles.length + fileList.length) > MAX_UPLOAD_COUNT) {\n        reject({\n          error: `[RunnerClient] Too many files added. Uploads can have a maximum of ${MAX_UPLOAD_COUNT} files.`\n        });\n      } else {\n        currentFiles.push(...fileList);\n        resolve({ files: currentFiles, filesAdded: fileList.length });\n      }\n    });\n  }\n\n  static removeDuplicates(currentFiles, newFileList) {\n    let existingFileNames = currentFiles.map((file) => file.fullFilePath);\n    let uniqueFileList = [];\n\n    newFileList.forEach(function (file) {\n      if (!existingFileNames.includes(file.name)) {\n        let ffile = new FileFactory(file);\n        uniqueFileList.push(ffile);\n      }\n    });\n\n    return uniqueFileList;\n  }\n\n  static removeFileByUUID(files, uuid) {\n    return new Promise((resolve, reject) => {\n      let fileIdx = files.findIndex(file => { file.uuid === uuid; });\n      if (fileIdx) {\n        resolve(files.splice(fileIdx, 1));\n      } else {\n        reject();\n      }\n    });\n  }\n}\n\nmodule.exports = { FileUploadService };\n","const { FileNameValidationService } = require('./file_name_validation_service');\n\nclass PackageManifestService {\n  static manifestForAsperaTransferEventData(asperaTransferEventData, packageTransferSpecs) {\n    let path = asperaTransferEventData.transfer_spec.paths[0].source;\n    let found = packageTransferSpecs.find((data) => { return data.transfer_spec.paths[0].source === path; });\n    let files = asperaTransferEventData.files.map((fileObj) => { return fileObj.file; });\n    return { id: found.asset_item_id, custom_metadata_fields: this.manifestForFiles(files, path) };\n  }\n\n  static manifestForFiles(files, path) {\n    let manifestFor = (files, fullFolderPath) => {\n      let folderName = this._folderNameFromFullFolderPath(fullFolderPath);\n      let roots      = [];\n      let tree       = { name: folderName, children: roots, count: 0};\n      files.forEach((file) => {\n        let filePath   = RegExp(path + '/?(.*)').exec(file)[1];\n        let components = filePath.split('/');\n        let length     = components.length;\n        let children   = roots;\n        components.forEach((component, index) => {\n          if (index === length - 1) {\n            if (this._isValid(component)) {\n              children.push({ name: component });\n              tree.count += 1;\n            }\n          } else {\n            let found = children.find((child) => { return child.name === component; });\n            if (found) {\n              children = found.children;\n            } else {\n              let nodeChildren = [];\n              let node = { name: component, children: nodeChildren };\n              children.push(node);\n              children = nodeChildren;\n            }\n          }\n        });\n      });\n\n      this._removeEmptyChildren(tree);\n      return tree;\n    };\n\n    return [ { category: 'tech_info', label: 'manifest', value: manifestFor(files, path) } ];\n  }\n\n  static present(manifest) {\n    let numberOfFiles = 0;\n    let numberOfFolders = 0;\n    let sorted = [];\n\n    let processChildren = (children, folderNames) => {\n      let files = [];\n      let foldersToProcess = [];\n      children = this._sort(children);\n      children.forEach((child) => {\n        if (child.hasOwnProperty('children')) {\n          if (this._hasNonFolderChild(child)) {\n            numberOfFolders += 1;\n            foldersToProcess.push(child);\n          }\n        } else {\n          numberOfFiles += 1;\n          files.push(child);\n        }\n      });\n      let hash = {};\n      hash['/' + folderNames.join('/') + ':'] = files;\n      sorted.push(hash);\n\n      foldersToProcess.forEach((folder) => {\n        processChildren(folder.children, folderNames.concat(folder.name));\n      });\n    };\n\n    processChildren(manifest.children || [], []);\n\n    return { numberOfFiles, numberOfFolders, sorted };\n  }\n\n  ////\n  // Private methods\n  ////\n\n  static _folderNameFromFullFolderPath(fullFolderPath) {\n    let pathComponents = fullFolderPath.split('/');\n    return pathComponents[pathComponents.length - 1];\n  }\n\n  static _hasNonFolderChild(level) {\n    return level.hasOwnProperty('children') && level.children && level.children.find((item) => {\n      if (item.hasOwnProperty('children')) {\n        return this._hasNonFolderChild(item);\n      } else {\n        return true;\n      }\n    });\n  }\n\n  static _isValid(component) {\n    let hasExtension = FileNameValidationService.containsExtension(component);\n    let firstTwoCharacters = component[0] + component[1];\n    return component.toLowerCase() !== '.ds_store' && firstTwoCharacters !== '._' && (!hasExtension || FileNameValidationService.containsValidExtension(component));\n  }\n\n\n  static _removeEmptyChildren(level) {\n    level.children.forEach((item, index) => {\n      if (item.children) {\n        if (!item.children.length) {\n          level.children.splice(index, 1);\n        } else {\n          this._removeEmptyChildren(item);\n        }\n      }\n    });\n  }\n\n  static _sort(collection) {\n    return collection.sort((a, b) => {\n      let lowerNameA = a.name.toLowerCase();\n      let lowerNameB = b.name.toLowerCase();\n      if (lowerNameA < lowerNameB) {\n        return -1;\n      } else if (lowerNameA > lowerNameB) {\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n  }\n}\n\nmodule.exports = { PackageManifestService };\n","const cloneDeep = require('lodash/cloneDeep');\n\nclass AsperaTransferSpecFormatterService {\n  static formatted(uploadResponseData, files) {\n    let nonPackageTransferSpec = cloneDeep(uploadResponseData.transfer_spec);\n    let packageIndex = 0;\n    let fileIndex = 0;\n    let collection = (nonPackageTransferSpec.paths.length) ? [nonPackageTransferSpec] : [];\n    let packageMappings = cloneDeep(uploadResponseData.package_transfer_specs);\n\n    files.forEach(function (file) {\n      let target;\n\n      if (file.fileObj.isFolder) {\n        let packageTransferSpec = packageMappings[packageIndex].transfer_spec;\n        collection.push(packageTransferSpec);\n        target = packageTransferSpec.paths[0];\n        packageIndex += 1;\n      } else {\n        target = nonPackageTransferSpec.paths[fileIndex];\n        fileIndex += 1;\n      }\n\n      target.source = file.fullFilePath;\n    });\n\n    return { all: collection, packageMappings: packageMappings };\n  }\n}\n\nmodule.exports = { AsperaTransferSpecFormatterService };\n","const { API } = require('../api');\nconst { AsperaConnectService } = require('./aspera_connect_service');\nconst { AsperaTransferSpecFormatterService } = require('./aspera_transfer_spec_formatter_service');\nconst { PackageManifestService } = require('./package_manifest_service');\n\nclass AsperaUploadService {\n  static get activeUploads() {\n    if (!this._activeUploads) {\n      this._activeUploads = {};\n    }\n    return this._activeUploads;\n  }\n\n  static get hasActiveUploads() {\n    return !!Object.keys(this.activeUploads).length;\n  }\n\n  static get asperaConnectService() {\n    if (!this._asperaConnectService) {\n      AsperaConnectService.eventCallbacks = {\n        transferComplete: [this._onTransferComplete.bind(this)]\n      };\n      this._asperaConnectService = AsperaConnectService;\n    }\n\n    return this._asperaConnectService;\n  }\n\n  static upload(currentFiles, options) {\n    let items = currentFiles.map((file) => {\n      let attrs = {\n        name: file.fileName,\n        package: file.fileObj.isFolder,\n      };\n\n      if (file.fileObj.fetchFolderContentsFromDragDropEvent) {\n        attrs.custom_metadata_fields = PackageManifestService.manifestForFiles(file.fileObj.fetchFolderContentsFromDragDropEvent(), file.fileName);\n      }\n\n      return attrs;\n    });\n\n    return API.upload(items, options || {})\n      .then((response) => {\n        let formatted = AsperaTransferSpecFormatterService.formatted(response.data, currentFiles);\n\n        let result = this.asperaConnectService.start(\n          formatted.all,\n          response.data.connection_settings\n        );\n\n        this.activeUploads[result.id] = {\n          files: currentFiles,\n          assetItemAttrsCollection: [],\n          packageMappings: formatted.packageMappings,\n          ingestBatchId: response.data.ingest_batch_id\n        };\n\n        return response;\n      });\n  }\n\n  ////\n  // private methods\n  ////\n\n  /**\n   * Callback executed on AW4 'transfer' event when AsperaConnectService\n   * determines the transfer has completed.\n   * @param {object}  data\n   * @param {object}  data.transfer - transfer data from AW4.Connect\n   * @param {number}  data.id - internal tracking ID for transfer batch. NOT the\n   *                            runner ingest batch ID\n   * @param {string}  data.token - aspera request_id\n   * @param {boolean} data.isBatchComplete\n   */\n  static _onTransferComplete(data) {\n    let activeUpload = this.activeUploads[data.id];\n    if (!activeUpload || !data.isBatchComplete) { return; }\n\n    activeUpload.files.forEach((file) => {\n      if (file.fileObj.isFolder && !file.fileObj.fetchFolderContentsFromDragDropEvent) {\n        let attrs = PackageManifestService.manifestForAsperaTransferEventData(\n          data.transfer,\n          activeUpload.packageMappings\n        );\n        activeUpload.assetItemAttrsCollection.push(attrs);\n      }\n    });\n\n    if (activeUpload.assetItemAttrsCollection.length) {\n      API.bulkUpdateAssetItems(activeUpload.assetItemAttrsCollection);\n    }\n\n    // Set asset items in the completed ingest to \"uploaded\"\n    API.completeIngestBatchUpload(activeUpload.ingestBatchId);\n    delete this.activeUploads[data.id];\n  }\n}\n\nmodule.exports = { AsperaUploadService };\n","class AsperaFileSerializer {\n  static serialize(result) {\n    let files = result.files ? result.files.dataTransfer.files : result.dataTransfer.files;\n\n    return files.map((file) => {\n      let attrs = {\n        name: file.name,\n        size: file.size,\n        isFolder: /directory/i.test(file.type),\n        doesNotRequireExtension: true,\n      };\n\n      if (attrs.isFolder && result.dragDropManifestGrouping) {\n        attrs.fetchFolderContentsFromDragDropEvent = function () {\n          let fileNameComponents = file.name.split(/\\/|\\\\/);\n          let fileName = fileNameComponents[fileNameComponents.length - 1];\n          return result.dragDropManifestGrouping[fileName];\n        };\n      }\n\n      return attrs;\n    });\n  }\n}\n\nmodule.exports = { AsperaFileSerializer };\n","const { AsperaConnectService } = require('./aspera_connect_service');\nconst { LogService } = require('./log_service');\nconst AW4 = window.AW4;\n\nconst DEFAULT_EVENT_CALLBACKS = {\n  all: [],\n  dragEnter: [],\n  dragLeave: [],\n  dragOver: [],\n  drop: []\n};\n\nclass AsperaDragDropService {\n  static addTarget(target, eventCallbacks) {\n    AsperaConnectService.connect.initSession();\n    this.target = target;\n\n    let callbacks = Object.assign({}, DEFAULT_EVENT_CALLBACKS, eventCallbacks);\n    let registerAll = !!callbacks.all.length;\n    if (!!callbacks.dragEnter.length || registerAll) {\n      this._dragEnterCallback = this.dragEnterCallback.bind(this);\n      target.addEventListener('dragenter', this._dragEnterCallback);\n    }\n    if (!!callbacks.dragLeave.length || registerAll) {\n      this._dragLeaveCallback = this.dragLeaveCallback.bind(this);\n      target.addEventListener('dragleave', this._dragLeaveCallback);\n    }\n    if (!!callbacks.dragOver.length || !!callbacks.drop.length || registerAll) {\n      this._dragOverCallback = this.dragOverCallback.bind(this);\n      target.addEventListener('dragover', this._dragOverCallback);\n    }\n    if (!!callbacks.drop.length || registerAll) {\n      this._dropCallback = this.dropCallback.bind(this);\n      target.addEventListener('drop', this._dropCallback);\n    }\n\n    this.eventCallbacks = callbacks;\n  }\n\n  static reset() {\n    this.target.removeEventListener('dragenter', this._dragEnterCallback);\n    this.target.removeEventListener('dragleave', this._dragLeaveCallback);\n    this.target.removeEventListener('dragover', this._dragOverCallback);\n    this.target.removeEventListener('drop', this._dropCallback);\n    this.eventCallbacks = Object.assign({}, DEFAULT_EVENT_CALLBACKS);\n    this._target = undefined;\n  }\n\n  static get target() {\n    return this._target;\n  }\n\n  static set target(el) {\n    if (this._target) {\n      throw new Error('[RunnerClient.AsperaDragDropService] Cannot set more than one target!');\n    }\n    this._target = el;\n  }\n\n  static dragEnterCallback(event) {\n    event.stopPropagation();\n    event.preventDefault();\n    this._executeEventCallbacksFor('dragEnter', { event: event });\n  }\n\n  static dragLeaveCallback(event) {\n    event.stopPropagation();\n    event.preventDefault();\n    this._executeEventCallbacksFor('dragLeave', { event: event });\n  }\n\n  static dragOverCallback(event) {\n    event.stopPropagation();\n    event.preventDefault();\n    this._executeEventCallbacksFor('dragOver', { event: event });\n  }\n\n  static dropCallback(event) {\n    event.stopPropagation();\n    event.preventDefault();\n\n    let filesDropped = event.dataTransfer.files;\n    let data = {};\n    data.dataTransfer = {};\n    data.dataTransfer.files = [];\n    for (let i = 0; i < filesDropped.length; i++) {\n      let fileObject  = {\n        'lastModifiedDate' : filesDropped[i].lastModifiedDate,\n        'name'             : filesDropped[i].name,\n        'size'             : filesDropped[i].size,\n        'type'             : filesDropped[i].type,\n      };\n      data.dataTransfer.files.push(fileObject);\n    }\n\n    this._groupedFolderContents(event).then((manifestGrouping) => {\n      let dropHelper = (response) => {\n        this._executeEventCallbacksFor(\n          'drop',\n          { event: event, files: response, dragDropManifestGrouping: manifestGrouping }\n        );\n      };\n\n      AsperaConnectService.connect.connectHttpRequest(\n        AW4.Connect.HTTP_METHOD.POST,\n        '/connect/file/dropped-files',\n        data,\n        AW4.Utils.SESSION_ID,\n        { success: dropHelper }\n      );\n    });\n  }\n\n  static _executeEventCallbacksFor(eventName, data) {\n    this.eventCallbacks[eventName].forEach((cb) => { cb(data); });\n    this.eventCallbacks.all.forEach((cb) => { cb(data); });\n  }\n\n  static _groupedFolderContents(evt) {\n    return new Promise((resolve, reject) => {\n      let grouping = {};\n\n      if (!evt.dataTransfer.items) { resolve(grouping); }\n\n      let length = evt.dataTransfer.items.length;\n      let remaining = length;\n\n      for (let i = 0; i < length; i++) {\n        let item = evt.dataTransfer.items[i];\n        let entry = item.webkitGetAsEntry();\n        this._processEntry(entry, grouping).then(() => {\n          remaining--;\n          if (!remaining) {\n            LogService.debug('[RunnerClient.AsperaDragDropService] Parsed drag-drop contents:', grouping);\n            resolve(grouping);\n          }\n        }, (err) => {\n          LogService.warn(`Failed to read directory contents for ${entry.fullPath}`, err);\n          reject(err);\n        });\n      }\n    });\n  }\n\n  static _processEntry(topLevelEntry, grouping) {\n    return new Promise((resolve, reject) => {\n      let key = topLevelEntry.name;\n      let directoryCount = 0;\n      let processEntries = (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isDirectory) {\n            directoryCount++;\n            let read = (reader) => {\n              reader.readEntries((childEntries) => {\n                if (childEntries.length) {\n                  processEntries(childEntries);\n                  read(reader);\n                } else {\n                  directoryCount--;\n                  if (!directoryCount) { resolve(); }\n                }\n              }, (err) => {\n                LogService.warn(`Failed to read directory contents for ${entry.fullPath}`, err);\n                reject(err);\n              });\n            };\n\n            read(entry.createReader());\n          } else {\n            grouping[key] = grouping[key] || [];\n            grouping[key].push(entry.fullPath);\n            if (entry === topLevelEntry) { resolve(); }\n          }\n        });\n      };\n\n      processEntries([topLevelEntry]);\n    });\n  }\n}\n\nmodule.exports = { AsperaDragDropService };\n","const { EVENTS } = require('../../constants');\nconst ELEMENT_NAME = 'runner-uploader--file';\nconst template = document.createElement('template');\ntemplate.innerHTML = `\n  <style>\n    :host {\n      border-bottom: 1px solid #ccc;\n      display: flex;\n      justify-content: space-between;\n      align-items: baseline;\n      padding: 8px;\n      position: relative;\n    }\n\n    :host > * {\n      box-sizing: border-box;\n    }\n\n    :host[hidden] {\n      display: none;\n    }\n\n    :host[locked] #remove {\n      display: none;\n    }\n\n    :host #remove {\n      -webkit-appearance: none;\n      background: none;\n      border: none;\n      cursor: pointer;\n      font-size: medium;\n    }\n\n    :host:before,\n    :host:after {\n      visibility: hidden;\n      pointer-events: none;\n    }\n\n    /* Triangle hack */\n    :host:after {\n      position: absolute;\n      top: calc(100% - 5px);\n      left: 20px;\n      margin-left: -5px;\n      width: 0;\n      border-bottom: 5px solid rgba(0,0,0,0.6);\n      border-right: 5px solid transparent;\n      border-left: 5px solid transparent;\n      content: \" \";\n      font-size: 0;\n      line-height: 0;\n    }\n\n    :host:before {\n      position: absolute;\n      background-color: rgba(0,0,0,0.6);\n      color: white;\n      content: attr(data-tooltip);\n      padding: 4px 8px;\n      border-radius: 4px;\n      top: 100%;\n      z-index: 3;\n    }\n\n    :host:hover:after,\n    :host:hover:before {\n      visibility: visible;\n    }\n  </style>\n  <slot name=\"fileName\"></slot>\n  <button type=\"button\" id=\"remove\">&times;</button>\n`;\n\n// ShadyCSS polyfills scoped styles in browsers that don't support this\n// ShadowDOM feature.\nif (window.ShadyCSS) {\n  window.ShadyCSS.prepareTemplate(template, ELEMENT_NAME);\n}\n\nclass RunnerUploader__File extends HTMLElement {\n  static get elName() { return ELEMENT_NAME; }\n\n  constructor() {\n    super();\n    let shadowRoot = this.attachShadow({mode: 'open'});\n    shadowRoot.appendChild(template.content.cloneNode(true));\n  }\n\n  connectedCallback() {\n    this.shadowRoot.getElementById('remove').addEventListener('click', (evt) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n\n      this.dispatchEvent(\n        new CustomEvent(EVENTS.REMOVE_FILE, {\n          bubbles: true,\n          detail: { uuid: this.dataset.uuid }\n        })\n      );\n    });\n  }\n\n  static get observedAttributes() {\n    return ['locked'];\n  }\n\n  get locked() {\n    return this.hasAttribute('locked');\n  }\n\n  set locked(val) {\n    if (val) {\n      this.setAttribute('locked', '');\n    } else {\n      this.removeAttribute('locked');\n    }\n  }\n\n  static register() {\n    // Register the custom element to the DOM\n    if (!window.customElements.get(this.elName)) {\n      window.customElements.define(\n        this.elName,\n        this\n      );\n    }\n  }\n}\n\nRunnerUploader__File.register();\n","require('./__file'); // <runner-uploader--file> sub-component\nconst { EVENTS } = require('../../constants');\nconst { AsperaConnectService } = require('../../services/aspera_connect_service');\nconst { AsperaDragDropService } = require('../../services/aspera_drag_drop_service');\nconst { AsperaFileSerializer } = require('../../services/aspera_file_serializer');\nconst { AsperaUploadService } = require('../../services/aspera_upload_service');\nconst { FileUploadService } = require('../../services/file_upload_service');\nconst template = require('./template');\nconst ELEMENT_NAME = 'runner-uploader';\n\n// ShadyCSS polyfills scoped styles in browsers that don't support this\n// ShadowDOM feature.\nif (window.ShadyCSS) {\n  window.ShadyCSS.prepareTemplate(template, ELEMENT_NAME);\n}\n\nclass RunnerUploader extends HTMLElement {\n  /**\n   * Name of the HTML element\n   */\n  static get elName() { return ELEMENT_NAME; }\n\n  /**\n   * An instance of the element is created or upgraded. Useful for initializing\n   * state, settings up event listeners, or creating shadow dom. See the spec\n   * for restrictions on what you can do in the constructor.\n   */\n  constructor() {\n    super();\n    this.empty = true;\n    let shadowRoot = this.attachShadow({mode: 'open'});\n    shadowRoot.appendChild(template.content.cloneNode(true));\n  }\n\n  /**\n   * Called every time the element is inserted into the DOM. Useful for running\n   * setup code, such as fetching resources or rendering. Generally, you should\n   * try to delay work until this time.\n   */\n  connectedCallback() {\n    this._connectDragDrop();\n\n    const uploadButton = this.shadowRoot.getElementById('upload-button');\n    uploadButton.addEventListener('click', this.initiateUpload.bind(this));\n\n    const addFilesButton = this.shadowRoot.getElementById('add-files-button');\n    addFilesButton.addEventListener('click', this.addFiles.bind(this));\n\n    const addMoreButton = this.shadowRoot.getElementById('add-more-button');\n    addMoreButton.addEventListener('click', this.reset.bind(this));\n\n    this._filesList.addEventListener(EVENTS.REMOVE_FILE, (evt) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n\n      if (this.uploading) { return; }\n\n      let target = evt.target;\n\n      FileUploadService.removeFileByUUID(this.files, evt.detail.uuid).then(\n        () => {\n          target.remove();\n          this._emitFilesRemovedEvent();\n        }\n      );\n    });\n  }\n\n  /**\n   * Called every time the element is removed from the DOM. Useful for running\n   * clean up code.\n   */\n  disconnectedCallback() {\n    AsperaDragDropService.reset();\n  }\n\n  /**\n   * Elements can react to attribute changes by defining a\n   * attributeChangedCallback. The browser will call this method for every\n   * change to attributes listed in the observedAttributes array.\n   */\n  static get observedAttributes() {\n    return [\n      'destinationFolder',\n      'empty',\n      'error',\n      'incoming',\n      'uploading',\n      'uploadComplete'\n    ];\n  }\n\n  get destinationFolder() {\n    return this.getAttribute('destination-folder');\n  }\n\n  set destinationFolder(val) {\n    if (!val) {\n      this.removeAttribute('destination-folder');\n    } else {\n      if (!/\\d+/.test(val)) {\n        throw new Error(`[<${this.elName}>] destination-folder must be an integer`);\n      }\n      this.setAttribute('destination-folder', val);\n    }\n  }\n\n  get error() {\n    return this.hasAttribute('error');\n  }\n\n  set error(val) {\n    if (val) {\n      this.setAttribute('error', '');\n    } else {\n      this.removeAttribute('error');\n    }\n  }\n\n  get empty() {\n    return this.hasAttribute('empty');\n  }\n\n  set empty(val) {\n    if (val) {\n      this.setAttribute('empty', '');\n    } else {\n      this.removeAttribute('empty');\n    }\n  }\n\n  get folderIDs() {\n    if (!this._folderIDs) {\n      if (this.destinationFolder) {\n        this._folderIDs = [this.destinationFolder];\n      } else {\n        this._folderIDs = [];\n      }\n    }\n    return this._folderIDs;\n  }\n\n  set folderIDs(val) {\n    if (val.constructor.name !== 'Array' || !val.every(id => /\\d+/.test(id))) {\n      throw new Error(`[<${this.elName}>] folderIDs must be an Array of numbers`);\n    }\n    this.destinationFolder = undefined;\n    this._folderIDs = val;\n  }\n\n  get incoming() {\n    return this.hasAttribute('incoming');\n  }\n\n  set incoming(val) {\n    if (val) {\n      this.setAttribute('incoming', '');\n    } else {\n      this.removeAttribute('incoming');\n    }\n  }\n\n  get uploading() {\n    return this.hasAttribute('uploading');\n  }\n\n  set uploading(val) {\n    if (val) {\n      this.setAttribute('uploading', '');\n    } else {\n      this.removeAttribute('uploading');\n    }\n  }\n\n  get uploadComplete() {\n    return this.hasAttribute('upload-complete');\n  }\n\n  set uploadComplete(val) {\n    if (val) {\n      this.setAttribute('upload-complete', '');\n    } else {\n      this.removeAttribute('upload-complete');\n    }\n  }\n\n  get files() {\n    if (!this._files) {\n      this._files = [];\n    }\n    return this._files;\n  }\n\n\n  addFiles() {\n    AsperaConnectService.showFileUploadDialog((result) => {\n      this._addFilesFromAspera(result);\n    });\n  }\n\n  initiateUpload() {\n    if (this.uploading) { return; }\n    if (this.error) { this.error = false; }\n\n    this.dispatchEvent(new CustomEvent(EVENTS.UPLOAD_STARTED, {\n      bubbles: true,\n      detail: {\n        files: this.files,\n      }\n    }));\n    this.uploading = true;\n    Array.from(this._filesList.children).forEach(file => file.locked = true);\n    AsperaDragDropService.reset();\n\n    AsperaUploadService.upload(this.files, { folderIds: this.folderIDs }).then(\n      this._listenForTransferComplete.bind(this),\n      this._handleUploadFailure.bind(this)\n    );\n  }\n\n  reset() {\n    this._files = undefined;\n    Array.from(this._filesList.children).forEach(file => file.remove());\n    this.uploadComplete = false;\n    this.empty = true;\n    this._connectDragDrop();\n  }\n\n  _addFilesFromAspera(data) {\n    FileUploadService.addFiles(\n      this.files,\n      AsperaFileSerializer.serialize(data)\n    ).then(\n      (data) => { this._emitFilesAddedEvent(true, data); },\n      (error) => { this._emitFilesAddedEvent(false, error); },\n    );\n  }\n\n  _connectDragDrop() {\n    AsperaDragDropService.addTarget(this, {\n      dragEnter: [\n        () => { this.incoming = true; }\n      ],\n      dragLeave: [\n        () => { this.incoming = false; }\n      ],\n      drop: [\n        (dragObject) => {\n          this.incoming = false;\n          this._addFilesFromAspera(dragObject);\n        }\n      ]\n    });\n  }\n\n  _handleUploadFailure() {\n    this.dispatchEvent(new CustomEvent(EVENTS.UPLOAD_FAILED, {\n      bubbles: true,\n      detail: {\n        currentFiles: this.files,\n      }\n    }));\n    this.uploading = false;\n    Array.from(this._filesList.children).forEach(file => file.locked = false);\n    this._connectDragDrop();\n    this.error = true;\n  }\n\n  _emitFilesAddedEvent(success, data) {\n    this._fileChangeHandler();\n    this.dispatchEvent(\n      new CustomEvent(EVENTS.FILES_ADDED, {\n        detail: Object.assign({ success }, data),\n        bubbles: true,\n      })\n    );\n  }\n\n  _emitFilesRemovedEvent() {\n    this.dispatchEvent(\n      new CustomEvent(EVENTS.FILES_REMOVED, {\n        detail: { currentFiles: this.files },\n        bubbles: true,\n      })\n    );\n  }\n\n  _listenForTransferComplete(transferInfo) {\n    let requestID = transferInfo.data.connection_settings.request_id;\n    let listener = (transferCompleteInfo) => {\n      if (transferCompleteInfo.token === requestID && transferCompleteInfo.isBatchComplete) {\n        this._uploadComplete();\n\n        let listenerIdx = AsperaConnectService.eventCallbacks.transferComplete.indexOf(listener);\n        AsperaConnectService.eventCallbacks.transferComplete.splice(listenerIdx, 1);\n      }\n    };\n    AsperaConnectService.eventCallbacks.transferComplete.push(listener);\n  }\n\n  _uploadComplete() {\n    this.dispatchEvent(new CustomEvent(EVENTS.UPLOAD_COMPLETE, {\n      bubbles: true,\n      detail: {\n        currentFiles: this.files,\n      }\n    }));\n\n    this.uploading = false;\n    this.uploadComplete = true;\n  }\n\n  _fileChangeHandler() {\n    let renderedUUIDs = Array.from(this._filesList.children).map(li => li.dataset.uuid);\n    this.files.forEach(file => {\n      if (!renderedUUIDs.includes(file.uuid)) {\n        let fileEl = document.createElement('runner-uploader--file');\n        fileEl.innerHTML = `<span slot=\"fileName\">${file.fileName}</span>`;\n        fileEl.dataset.uuid = file.uuid;\n        fileEl.dataset.tooltip = file.fullFilePath;\n        this._filesList.prepend(fileEl);\n      }\n    });\n    this.empty = !this.files.length;\n  }\n\n  get _filesList() {\n    if (!this._filesListEl) {\n      this._filesListEl = this.shadowRoot.getElementById('files-list');\n    }\n    return this._filesListEl;\n  }\n\n  static register() {\n    // Register the custom element to the DOM\n    if (!window.customElements.get(this.elName)) {\n      window.customElements.define(\n        this.elName,\n        this\n      );\n    }\n  }\n}\n\nRunnerUploader.register();\n\nmodule.exports = { RunnerUploader };\n","const RunnerClient = require('../../index');\nconst ELEMENT_NAME = 'runner-client-configuration';\n\nclass RunnerClientConfiguration extends HTMLElement {\n  static get elName() { return ELEMENT_NAME; }\n\n  static get observedAttributes() {\n    return [\n      'token',\n      'method',\n      'environment',\n      'locale',\n      'logLevel'\n    ];\n  }\n\n  connectedCallback() {\n    this.configureClient();\n  }\n\n  configureClient() {\n    RunnerClient.configure({\n      authentication: {\n        method: this.method,\n        token: this.token,\n      },\n      environment: this.environment,\n      locale: this.locale,\n      logLevel: this.logLevel\n    });\n  }\n\n  get method() {\n    return this.getAttribute('method');\n  }\n\n  set method(val) {\n    if (val) {\n      this.setAttribute('method', val);\n    } else {\n      this.removeAttribute('method');\n    }\n    this.configureClient();\n  }\n\n  get token() {\n    return this.getAttribute('token');\n  }\n\n  set token(val) {\n    if (val) {\n      this.setAttribute('token', val);\n    } else {\n      this.removeAttribute('token');\n    }\n    this.configureClient();\n  }\n\n  get environment() {\n    return this.getAttribute('environment');\n  }\n\n  set environment(val) {\n    if (val) {\n      this.setAttribute('environment', val);\n    } else {\n      this.removeAttribute('environment');\n    }\n    this.configureClient();\n  }\n\n  get locale() {\n    return this.getAttribute('locale');\n  }\n\n  set locale(val) {\n    if (val) {\n      this.setAttribute('locale', val);\n    } else {\n      this.removeAttribute('locale');\n    }\n    this.configureClient();\n  }\n\n  get logLevel() {\n    return this.getAttribute('log-level');\n  }\n\n  set logLevel(val) {\n    if (val) {\n      this.setAttribute('log-level', val);\n    } else {\n      this.removeAttribute('log-level');\n    }\n    this.configureClient();\n  }\n\n  static register() {\n    // Register the custom element to the DOM\n    if (!window.customElements.get(this.elName)) {\n      window.customElements.define(\n        this.elName,\n        this\n      );\n    }\n  }\n}\n\nRunnerClientConfiguration.register();\n\nmodule.exports = { RunnerClientConfiguration };\n"],"sourceRoot":""}