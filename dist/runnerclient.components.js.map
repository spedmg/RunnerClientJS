{"version":3,"sources":["webpack://RunnerClient/./src/components.js","webpack://RunnerClient/./src/services/translation_service.js","webpack://RunnerClient/./src/services/file_validation_service.js","webpack://RunnerClient/./src/services/log_service.js","webpack://RunnerClient/./src/services/aspera_connect_service.js","webpack://RunnerClient/./src/services/file_factory.js","webpack://RunnerClient/./src/services/file_name_validation_service.js","webpack://RunnerClient/./src/components/runner_thumbnail_updater/template.js","webpack://RunnerClient/./src/services/thumbnail_replacement_service.js","webpack://RunnerClient/./src/components/runner_thumbnail_updater/component.js","webpack://RunnerClient/./src/components/runner_uploader/template.js","webpack://RunnerClient/./src/services/thumbnail_validation_service.js","webpack://RunnerClient/./src/services/file_upload_service.js","webpack://RunnerClient/./src/services/package_manifest_service.js","webpack://RunnerClient/./src/services/aspera_transfer_spec_formatter_service.js","webpack://RunnerClient/./src/services/aspera_upload_service.js","webpack://RunnerClient/./src/services/aspera_file_serializer.js","webpack://RunnerClient/./src/services/aspera_drag_drop_service.js","webpack://RunnerClient/./src/components/runner_uploader/__file.js","webpack://RunnerClient/./src/components/runner_uploader/component.js","webpack://RunnerClient/./src/components/runner_client_config/component.js"],"names":["RunnerClientConfiguration","__webpack_require__","RunnerUploader","RunnerThumbnailUpdater","module","exports","I18n","Config","translations","TranslationService","_i18n","this","i18n","_configureI18n","t","apply","arguments","locale","FileValidationService","fileName","toLowerCase","match","filePath","replace","LogService","_console","logLevelInt","console","info","_console2","warn","_console3","log","DEFAULT_EVENT_CALLBACKS","transfer","transferComplete","status","start","AsperaConnectService","id","window","AW4","Utils","generateUuid","connectInstaller","ConnectInstaller","CONNECT_INSTALLER_OPTIONS","connectOptions","Object","assign","dragDropEnabled","minVersion","CONNECT_OPTIONS","_connect","Connect","addEventListener","EVENT","STATUS","_handleAsperaEvent","bind","initSession","activeTransfers","uploadBatchCount","transferSpecs","connectionSettings","_this","connect","TRANSFER","tokens","currentPromise","startTransfer","transferSpec","Promise","resolve","reject","result","success","error","push","request_id","transfer_spec","_executeEventListenersFor","allPromises","map","newPromise","then","promise","all","successCallback","showSelectFileDialog","showSelectFolderDialog","eventName","eventData","_handleAsperaStatusEvent","_handleAsperaTransferEvent","eventCallbacks","forEach","cb","INITIALIZING","RETRYING","showLaunching","FAILED","showDownload","OUTDATED","showUpdate","RUNNING","connected","_this2","transfers","data","_getTransferDataFor","percentage","splice","index","length","token","isBatchComplete","hasActiveTransfers","_removeTransferListener","hasOwnProperty","aspera_connect_settings","indexOf","removeEventListener","_eventCallbacks","initialize","keys","options","__CONNECT_OPTIONS","__CONNECT_INSTALLER_OPTIONS","FileNameValidationService","ThumbnailValidationService","FileFactory","file","_classCallCheck","getFileName","name","fullFilePath","processing","size","fileObj","uuid","crypto","getRandomValues","Uint32Array","hasValidCharacters","containsValidCharacters","hasExtension","containsExtension","hasValidExtension","containsValidExtension","valid","doesNotRequireExtension","validThumbnail","validFile","UNSUPPORTED_FILE_EXTENSIONS","test","getExtension","includes","TRANSLATION_SCOPE","scope","key","translate","template","document","createElement","innerHTML","API","axios","ThumbnailReplacementService","assetItemID","replaceThumbnail","response","debug","mcsId","mcs_id","_uploadImageToMCS","mcsResponse","thumbnail","thumbnails","find","type","thumbnail_url","location","FormData","append","request","url","method","headers","Authorization","onUploadProgress","evt","EVENTS","ELEMENT_NAME","ShadyCSS","prepareTemplate","_possibleConstructorReturn","__proto__","getPrototypeOf","call","empty","attachShadow","mode","appendChild","content","cloneNode","_addEventListeners","_dragEnterListener","preventDefault","stopPropagation","incoming","_dragLeaveListener","_dragOverListener","_dropListener","_handleDrop","uploadBtn","shadowRoot","getElementById","_uploadClickListener","_beginUpload","addFileBtn","_addFilesClickListener","click","fileInput","_fileAddedListener","_handleFileAdded","_this3","errors","uploading","promises","assetItemIDs","replaceThumbnailFor","results","bulkUpdateAssetItems","uploadComplete","_emitUploadCompleteEvent","catch","err","_setErrorMessage","_emitUploadFailedEvent","dispatchEvent","CustomEvent","UPLOAD_COMPLETE","bubbles","detail","filename","UPLOAD_FAILED","event","files","dataTransfer","_setPreview","target","errMsg","errText","innerText","_this4","previewContainer","children","Array","from","el","remove","progressEl","reader","FileReader","onprogress","max","total","value","loaded","onload","img","src","onerror","readAsDataURL","getAttribute","val","Error","elName","setAttribute","removeAttribute","_assetItemIDs","constructor","every","undefined","hasAttribute","customElements","get","define","register","BROWSER","EDGE","VALID_THUMBNAIL_FILE_EXTENSIONS","MAX_THUMBNAIL_SIZE","fileSize","isValidFileSize","MAX_UPLOAD_COUNT","FileUploadService","currentFiles","fileList","removeDuplicates","_toConsumableArray","filesAdded","newFileList","existingFileNames","uniqueFileList","ffile","fileIdx","findIndex","PackageManifestService","asperaTransferEventData","packageTransferSpecs","path","paths","source","found","asset_item_id","custom_metadata_fields","manifestForFiles","category","label","fullFolderPath","roots","tree","_folderNameFromFullFolderPath","count","components","RegExp","exec","split","component","_isValid","child","nodeChildren","node","_removeEmptyChildren","manifestFor","manifest","numberOfFiles","numberOfFolders","sorted","processChildren","folderNames","foldersToProcess","_sort","_hasNonFolderChild","hash","join","folder","concat","pathComponents","level","item","firstTwoCharacters","collection","sort","a","b","lowerNameA","lowerNameB","cloneDeep","AsperaTransferSpecFormatterService","uploadResponseData","nonPackageTransferSpec","packageIndex","fileIndex","packageMappings","package_transfer_specs","isFolder","packageTransferSpec","AsperaUploadService","items","attrs","package","fetchFolderContentsFromDragDropEvent","upload","formatted","asperaConnectService","connection_settings","activeUploads","assetItemAttrsCollection","ingestBatchId","ingest_batch_id","activeUpload","manifestForAsperaTransferEventData","completeIngestBatchUpload","_activeUploads","_asperaConnectService","_onTransferComplete","AsperaFileSerializer","dragDropManifestGrouping","fileNameComponents","dragEnter","dragLeave","dragOver","drop","AsperaDragDropService","callbacks","registerAll","_dragEnterCallback","dragEnterCallback","_dragLeaveCallback","dragLeaveCallback","_dragOverCallback","dragOverCallback","_dropCallback","dropCallback","_target","_executeEventCallbacksFor","filesDropped","i","fileObject","lastModifiedDate","_groupedFolderContents","manifestGrouping","connectHttpRequest","HTTP_METHOD","POST","SESSION_ID","entries","entry","isDirectory","readResolve","readReject","createReader","readEntries","childEntries","childReadPromise","_collectFiles","fullPath","grouping","_loop","fsEntry","webkitGetAsEntry","dirResolve","dirReject","dirPromise","RunnerUploader__File","REMOVE_FILE","dataset","_connectDragDrop","initiateUpload","addFiles","reset","_filesList","removeFileByUUID","_emitFilesRemovedEvent","showFileUploadDialog","_addFilesFromAspera","UPLOAD_STARTED","locked","folderIds","folderIDs","_listenForTransferComplete","_handleUploadFailure","_files","serialize","_emitFilesAddedEvent","_this5","addTarget","dragObject","_fileChangeHandler","FILES_ADDED","FILES_REMOVED","transferInfo","_this6","requestID","listener","transferCompleteInfo","_uploadComplete","listenerIdx","_this7","renderedUUIDs","li","fileEl","tooltip","prepend","_folderIDs","destinationFolder","_filesListEl","RunnerClient","configureClient","configure","authentication","environment","logLevel"],"mappings":"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","file":"runnerclient.components.js","sourcesContent":["const { RunnerClientConfiguration } = require('./components/runner_client_config/component');\nconst { RunnerUploader } = require('./components/runner_uploader/component');\nconst { RunnerThumbnailUpdater } = require('./components/runner_thumbnail_updater/component');\n\nmodule.exports = {\n  RunnerClientConfiguration,\n  RunnerThumbnailUpdater,\n  RunnerUploader\n};\n","const I18n = require('i18n-js');\nconst { Config } = require('../config');\nconst translations = require('../translations.js');\n\nclass TranslationService {\n  static translate(...args) {\n    if (!this.i18n) {\n      this._configureI18n();\n    }\n    return this.i18n.t(...args);\n  }\n\n  static _configureI18n() {\n    I18n.translations = translations;\n    I18n.locale = Config.locale;\n    this.i18n = I18n;\n  }\n}\n\nmodule.exports = { TranslationService };\n","class FileValidationService {\n  static getExtension(fileName) {\n    return (fileName.toLowerCase().match(/^[^.].*(\\.\\w+)$/) || [])[1];\n  }\n\n  static getFileName(filePath) {\n    return filePath.replace(/^[\\w\\W]*[/\\\\]/, '');\n  }\n}\n\nmodule.exports = { FileValidationService };\n","/* eslint no-console: \"off\" */\nconst { Config } = require('../config');\n\nclass LogService {\n  static info(...args) {\n    if (Config.logLevelInt >= 2) {\n      console.info(...args);\n    }\n  }\n\n  static warn(...args) {\n    if (Config.logLevelInt >= 1) {\n      console.warn(...args);\n    }\n  }\n\n  static debug(...args) {\n    if (Config.logLevelInt >= 3) {\n      console.log(...args);\n    }\n  }\n}\n\nmodule.exports = { LogService };\n","const REQUIRED_ASPERA_VERSION = '3.9.1';\nconst DEFAULT_EVENT_CALLBACKS = {\n  transfer: [],\n  transferComplete: [],\n  status: [],\n  start: []\n};\n\nclass AsperaConnectService {\n  static initialize() {\n    let id = window.AW4.Utils.generateUuid();\n    this.connectInstaller = new window.AW4.ConnectInstaller(this.CONNECT_INSTALLER_OPTIONS);\n    let connectOptions = Object.assign({\n      id: id,\n      dragDropEnabled: true,\n      minVersion: REQUIRED_ASPERA_VERSION\n    }, this.CONNECT_OPTIONS);\n    this._connect = new window.AW4.Connect(connectOptions);\n    this._connect.addEventListener(window.AW4.Connect.EVENT.STATUS, this._handleAsperaEvent.bind(this));\n    this._connect.initSession(id);\n\n    this.activeTransfers = {};\n    this.uploadBatchCount = 0;\n  }\n\n  static set eventCallbacks(eventCallbacks) {\n    this._eventCallbacks = Object.assign({}, DEFAULT_EVENT_CALLBACKS, eventCallbacks);\n  }\n\n  static get eventCallbacks() {\n    if (!this._eventCallbacks) {\n      this._eventCallbacks = Object.assign({}, DEFAULT_EVENT_CALLBACKS);\n    }\n    return this._eventCallbacks;\n  }\n\n  static get connect() {\n    if (!this._connect) {\n      this.initialize();\n    }\n    return this._connect;\n  }\n\n  static start(transferSpecs, connectionSettings) {\n    this.connect.addEventListener(window.AW4.Connect.EVENT.TRANSFER, this._handleAsperaEvent.bind(this));\n    let tokens = [];\n    let currentPromise;\n    let startTransfer = (transferSpec) => {\n      return new Promise((resolve, reject) => {\n        let result = this.connect.startTransfer(transferSpec, connectionSettings, {\n          success: resolve,\n          error: reject\n        });\n\n        if (result.error) {\n          reject(result.error);\n        } else {\n          tokens.push(result.request_id);\n          result.transfer_spec = transferSpec;\n          this._executeEventListenersFor('start', result);\n        }\n      });\n    };\n\n    let allPromises = transferSpecs.map((transferSpec) => {\n      if (currentPromise) {\n        let newPromise = currentPromise.then(() => {\n          return startTransfer(transferSpec);\n        });\n        currentPromise = newPromise;\n        return newPromise;\n      } else {\n        currentPromise = startTransfer(transferSpec);\n        return currentPromise;\n      }\n    });\n\n    this.uploadBatchCount += 1;\n    this.activeTransfers[this.uploadBatchCount] = tokens;\n\n    return { id: this.uploadBatchCount, promise: Promise.all(allPromises) };\n  }\n\n  static showFileUploadDialog(successCallback) {\n    this.connect.showSelectFileDialog({\n      success: successCallback\n    });\n  }\n\n  static showFolderUploadDialog(successCallback) {\n    this.connect.showSelectFolderDialog({\n      success: successCallback\n    });\n  }\n\n  static _handleAsperaEvent(eventName, eventData) {\n    if (eventName === window.AW4.Connect.EVENT.STATUS)   { this._handleAsperaStatusEvent(eventData); }\n    if (eventName === window.AW4.Connect.EVENT.TRANSFER) { this._handleAsperaTransferEvent(eventData); }\n  }\n\n  static _executeEventListenersFor(eventName, eventData) {\n    this.eventCallbacks[eventName].forEach(cb => cb(eventData));\n  }\n\n  static _handleAsperaStatusEvent(eventData) {\n    this._executeEventListenersFor('status', eventData);\n\n    switch(eventData) {\n    case window.AW4.Connect.STATUS.INITIALIZING:\n    case window.AW4.Connect.STATUS.RETRYING:\n      this.connectInstaller.showLaunching();\n      break;\n    case window.AW4.Connect.STATUS.FAILED:\n      this.connectInstaller.showDownload();\n      break;\n    case window.AW4.Connect.STATUS.OUTDATED:\n      this.connectInstaller.showUpdate();\n      break;\n    case window.AW4.Connect.STATUS.RUNNING:\n      this.connectInstaller.connected();\n      break;\n    }\n  }\n\n  static _handleAsperaTransferEvent(eventData) {\n    eventData.transfers.forEach((transfer) => {\n      if (transfer.transfer_spec) {\n        this._executeEventListenersFor('transfer', transfer);\n\n        let data = this._getTransferDataFor(transfer);\n        if (data) {\n          if (transfer.percentage === 1) {\n            let tokens = this.activeTransfers[data.id];\n            tokens.splice(data.index, 1);\n\n            if (tokens.length === 0) {\n              delete(this.activeTransfers[data.id]);\n            }\n\n            this._executeEventListenersFor('transferComplete', {\n              transfer: transfer,\n              id: data.id,\n              token: data.token,\n              isBatchComplete: !tokens.length\n            });\n          }\n        }\n      }\n    });\n\n    if (!this.hasActiveTransfers) { this._removeTransferListener(); }\n  }\n\n  static get hasActiveTransfers() {\n    return !!Object.keys(this.activeTransfers).length;\n  }\n\n  static _getTransferDataFor(transfer) {\n    for (let id in this.activeTransfers) {\n      if (!this.activeTransfers.hasOwnProperty(id)) { continue; }\n\n      let tokens = this.activeTransfers[id];\n      if (tokens) {\n        let token = transfer.aspera_connect_settings.request_id;\n        let index = tokens.indexOf(token);\n        if (index !== -1) { return { id: id, token: token, index: index }; }\n      }\n    }\n  }\n\n  static _removeTransferListener() {\n    this.connect.removeEventListener(window.AW4.Connect.EVENT.TRANSFER);\n  }\n\n  static set CONNECT_OPTIONS (options) {\n    this.__CONNECT_OPTIONS = options;\n  }\n\n  static get CONNECT_OPTIONS () {\n    return this.__CONNECT_OPTIONS || {};\n  }\n\n  static set CONNECT_INSTALLER_OPTIONS (options) {\n    this.__CONNECT_INSTALLER_OPTIONS = options;\n  }\n\n  static get CONNECT_INSTALLER_OPTIONS () {\n    return this.__CONNECT_INSTALLER_OPTIONS || {};\n  }\n}\n\nmodule.exports = { AsperaConnectService };\n","const { FileNameValidationService } = require('./file_name_validation_service');\nconst { FileValidationService } = require('./file_validation_service');\nconst { ThumbnailValidationService } = require('./thumbnail_validation_service');\n\nclass FileFactory {\n  constructor(file) {\n    this.fileName = FileValidationService.getFileName(file.name);\n    this.fullFilePath = file.name;\n    this.processing = false;\n    this.size = file.size;\n    this.fileObj = file;\n    this.uuid = window.crypto.getRandomValues(new Uint32Array(1))[0];\n\n    this.hasValidCharacters = FileNameValidationService.containsValidCharacters(this.fileName);\n    this.hasExtension = FileNameValidationService.containsExtension(this.fileName);\n    this.hasValidExtension = FileNameValidationService.containsValidExtension(this.fileName);\n\n    this.valid = function () {\n      return FileNameValidationService.valid(this.fileName, this.fileObj.doesNotRequireExtension);\n    };\n\n    this.validThumbnail = function () {\n      let validFile = this.valid();\n      let validThumbnail = ThumbnailValidationService.valid(file);\n\n      return validFile && validThumbnail;\n    };\n  }\n}\n\nmodule.exports = { FileFactory };\n","const { UNSUPPORTED_FILE_EXTENSIONS } = require('../constants');\nconst { FileValidationService } = require('./file_validation_service');\n\nclass FileNameValidationService {\n  static containsValidCharacters(fileName) {\n    return !(/:|\\/|\"|;|'|\\?|!|>|<|&|\\||\\*|@/.test(fileName));\n  }\n\n  static containsExtension(fileName) {\n    return !!FileValidationService.getExtension(fileName);\n  }\n\n  static containsValidExtension(fileName) {\n    return !UNSUPPORTED_FILE_EXTENSIONS.includes(FileValidationService.getExtension(fileName));\n  }\n\n  static valid(fileName, doesNotRequireExtension) {\n    if (doesNotRequireExtension) {\n      return this.containsValidCharacters(fileName);\n    } else {\n      return (this.containsValidCharacters(fileName) &&\n      this.containsExtension(fileName) &&\n      this.containsValidExtension(fileName));\n    }\n  }\n}\n\nmodule.exports = { FileNameValidationService };\n","const { TranslationService } = require('../../services/translation_service');\nconst TRANSLATION_SCOPE = { scope: 'RunnerThumbnailUpdater' };\nconst t = (key) => {\n  return TranslationService.translate(key, TRANSLATION_SCOPE);\n};\n\nconst template = document.createElement('template');\ntemplate.innerHTML = `\n  <style>\n    :host {\n      display: flex;\n      flex-direction: column;\n      position: relative;\n      border: 1px solid #999;\n      height: 500px;\n      width: 100%;\n    }\n\n    :host > * {\n      box-sizing: border-box;\n    }\n\n    :host([incoming][empty]) #incoming {\n      display: flex;\n    }\n\n    :host([incoming][empty]) #empty-dropzone {\n      display: none;\n    }\n\n    :host([empty]) #upload-button {\n      display: none;\n    }\n    :host([empty]) #empty-dropzone {\n      display: -ms-flexbox;\n      display: flex;\n    }\n\n    :host #preview {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      flex: 1 0 0.1px;\n    }\n\n    :host #preview img {\n      flex: 0 1 0.01px;\n      max-height: 100%;\n    }\n\n    :host #empty-dropzone {\n      display: none;\n      height: 100%;\n      justify-content: center;\n      align-items: center;\n      flex-direction: column;\n    }\n\n    :host #incoming {\n      align-items: center;\n      display: none;\n      height: 100%;\n      justify-content: center;\n      position: absolute;\n      width: 100%;\n      z-index: 10;\n    }\n\n    :host #error,\n    :host #uploading,\n    :host #upload-complete {\n      display: none;\n      flex: 1;\n      justify-content: space-between;\n    }\n\n    :host([error]) #error {\n      display: flex;\n    }\n\n    :host([uploading]) #uploading {\n      display: flex;\n    }\n    :host([uploading]) #upload-button,\n    :host([uploading]) #add-file-button {\n      display: none;\n    }\n\n    :host([upload-complete]) #upload-complete {\n      display: flex;\n    }\n    :host([upload-complete]) #upload-button,\n    :host([upload-complete]) #add-file-button {\n      display: none;\n    }\n\n    :host #add-file-input {\n      display: none;\n    }\n\n    :host footer {\n      background: rgba(0, 0, 0, 0.1);\n      width: 100%;\n      padding: 8px;\n      display: flex;\n      justify-content: flex-end;\n    }\n\n    :host footer span {\n      flex: 1;\n    }\n  </style>\n\n  <div id=\"empty-dropzone\">\n    <slot name=\"emptyDropzone\">\n      <h1>${t('emptyHeadingText')}</h1>\n      <h2>${t('emptySubheadingText')}</h2>\n      <h3>${t('emptyAdditionalText')}</h3>\n    </slot>\n  </div>\n\n  <div id=\"incoming\">\n    <slot name=\"incoming\">\n      <h1>${t('incoming')}</h1>\n    </slot>\n  </div>\n\n  <div id=\"preview\"></div>\n\n  <footer>\n    <div id=\"error\">\n      <slot name=\"error\">\n        <span id=\"error-message\">${t('error')}</span>\n      </slot>\n    </div>\n\n    <div id=\"uploading\">\n      <slot name=\"uploading\">\n        <span>${t('uploading')}</span>\n      </slot>\n    </div>\n\n    <div id=\"upload-complete\">\n      <slot name=\"uploadComplete\">\n        <span>${t('uploadComplete')}</span>\n      </slot>\n    </div>\n\n    <slot name=\"addFileButton\">\n      <button type=\"button\" id=\"add-file-button\">${t('addFile')}</button>\n      <input type=\"file\" id=\"add-file-input\" />\n    </slot>\n\n    <slot name=\"uploadButton\">\n      <button type=\"button\" id=\"upload-button\">${t('upload')}</button>\n    </slot>\n  </footer>\n`;\n\nmodule.exports = template;\n","const { API } = require('../api');\nconst { LogService } = require('./log_service');\nconst axios = require('axios');\n\nclass ThumbnailReplacementService {\n  static replaceThumbnailFor(assetItemID, file) {\n    // Fetch delegate token from runner\n    return API.replaceThumbnail(assetItemID, file.fileName)\n      .then((response) => {\n        LogService.debug(`[${this.name}] Delegate token recieved`, response);\n        const token = response.data.token;\n        const mcsId = response.data.mcs_id;\n        // Upload the image to MCS\n        return this._uploadImageToMCS(mcsId, token, file.fileObj);\n      })\n      .then((mcsResponse) => {\n        let thumbnail = mcsResponse.data.thumbnails.find(t => t.type === 'small');\n        return {\n          id: assetItemID,\n          thumbnail_url: thumbnail.location\n        };\n      });\n  }\n\n  static _uploadImageToMCS(mcsId, token, file) {\n    const data = new FormData();\n    data.append('file', file);\n\n    return axios.request({\n      url: `https://io.cimediacloud.com/assets/${mcsId}/coverelement/upload`,\n      method: 'post',\n      data: data,\n      headers: {\n        'Authorization': `Bearer ${token}`,\n      },\n      onUploadProgress: (evt) => { LogService.debug(`[${this.name}] Upload Progress`, evt); }\n    });\n  }\n}\n\nmodule.exports = { ThumbnailReplacementService };\n","// Base element for <runner-uploader> and <runner-thumbnail-updater>\nconst { API } = require('../../api');\nconst { FileFactory } = require('../../services/file_factory');\nconst { LogService } = require('../../services/log_service');\nconst { ThumbnailReplacementService } = require('../../services/thumbnail_replacement_service');\nconst { TranslationService } = require('../../services/translation_service');\nconst TRANSLATION_SCOPE = { scope: 'RunnerThumbnailUpdater' };\nconst { EVENTS } = require('../../constants');\nconst ELEMENT_NAME = 'runner-thumbnail-updater';\nconst template = require('./template');\nif (window.ShadyCSS) {\n  window.ShadyCSS.prepareTemplate(template, ELEMENT_NAME);\n}\n\nclass RunnerThumbnailUpdater extends HTMLElement {\n  static get elName() { return ELEMENT_NAME; }\n\n  constructor() {\n    super();\n    this.empty = true;\n    let shadowRoot = this.attachShadow({mode: 'open'});\n    shadowRoot.appendChild(template.content.cloneNode(true));\n  }\n\n  connectedCallback() {\n    this._addEventListeners();\n  }\n\n  static get observedAttributes() {\n    return [\n      'assetItemID',\n      'empty',\n      'error',\n      'incoming',\n      'uploading',\n      'uploadComplete'\n    ];\n  }\n\n  get assetItemID() {\n    return this.getAttribute('asset-item-id');\n  }\n\n  set assetItemID(val) {\n    if (!val) {\n      this.removeAttribute('asset-item-id');\n    } else {\n      if (!/\\d+/.test(val)) {\n        throw new Error(`[<${this.elName}>] asset-item-id must be an integer`);\n      }\n      this.setAttribute('asset-item-id', val);\n    }\n  }\n\n  get assetItemIDs() {\n    if (!this._assetItemIDs) {\n      if (this.assetItemID) {\n        this._assetItemIDs = [this.assetItemID];\n      } else {\n        this._assetItemIDs = [];\n      }\n    }\n    return this._assetItemIDs;\n  }\n\n  set assetItemIDs(val) {\n    if (val.constructor.name !== 'Array' || !val.every(id => /\\d+/.test(id))) {\n      throw new Error(`[<${this.elName}>] assetItemIDs must be an Array of numbers`);\n    }\n    this.assetItemID = undefined;\n    this._assetItemIDs = val;\n  }\n\n\n  get empty() {\n    return this.hasAttribute('empty');\n  }\n\n  set empty(val) {\n    if (val) {\n      this.setAttribute('empty', '');\n    } else {\n      this.removeAttribute('empty');\n    }\n  }\n\n  get error() {\n    return this.hasAttribute('error');\n  }\n\n  set error(val) {\n    if (val) {\n      this.setAttribute('error', '');\n    } else {\n      this.removeAttribute('error');\n    }\n  }\n\n  get incoming() {\n    return this.hasAttribute('incoming');\n  }\n\n  set incoming(val) {\n    if (val) {\n      this.setAttribute('incoming', '');\n    } else {\n      this.removeAttribute('incoming');\n    }\n  }\n\n  get uploading() {\n    return this.hasAttribute('uploading');\n  }\n\n  set uploading(val) {\n    if (val) {\n      this.setAttribute('uploading', '');\n    } else {\n      this.removeAttribute('uploading');\n    }\n  }\n\n  get uploadComplete() {\n    return this.hasAttribute('upload-complete');\n  }\n\n  set uploadComplete(val) {\n    if (val) {\n      this.setAttribute('upload-complete', '');\n    } else {\n      this.removeAttribute('upload-complete');\n    }\n  }\n\n  _addEventListeners() {\n    // Drag-drop setup\n    this._dragEnterListener = ((evt) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n      this.incoming = true;\n    }).bind(this);\n    this._dragLeaveListener = ((evt) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n      this.incoming = false;\n    }).bind(this);\n    this._dragOverListener = ((evt) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n    }).bind(this);\n    this._dropListener = ((evt) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n      this.incoming = false;\n      this._handleDrop(evt);\n    }).bind(this);\n\n    this.addEventListener('dragenter', this._dragEnterListener);\n    this.addEventListener('dragleave', this._dragLeaveListener);\n    this.addEventListener('dragover', this._dragOverListener);\n    this.addEventListener('drop', this._dropListener);\n\n    // \"Upload\" button setup\n    const uploadBtn = this.shadowRoot.getElementById('upload-button');\n    this._uploadClickListener = ((evt) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n      this._beginUpload();\n    }).bind(this);\n    uploadBtn.addEventListener('click', this._uploadClickListener);\n\n    // \"Add File\" button\n    const addFileBtn = this.shadowRoot.getElementById('add-file-button');\n    this._addFilesClickListener = ((evt) => {\n      evt.stopPropagation();\n      evt.preventDefault();\n      this.shadowRoot.getElementById('add-file-input').click();\n    }).bind(this);\n    addFileBtn.addEventListener('click', this._addFilesClickListener);\n\n    // File added via input\n    const fileInput = this.shadowRoot.getElementById('add-file-input');\n    this._fileAddedListener = ((evt) => {\n      evt.stopPropagation();\n      evt.preventDefault();\n      this._handleFileAdded(evt);\n    }).bind(this);\n    fileInput.addEventListener('change', this._fileAddedListener);\n  }\n\n  _beginUpload() {\n    this.errors = false;\n    this.uploading = true;\n    let promises = this.assetItemIDs.map(assetItemID => {\n      return ThumbnailReplacementService.replaceThumbnailFor(assetItemID, this.file);\n    });\n    Promise.all(promises).then(\n      (results) => {\n        return API.bulkUpdateAssetItems(results);\n      }\n    ).then(\n      () => {\n        this.uploading = false;\n        this.uploadComplete = true;\n        this._emitUploadCompleteEvent();\n      }\n    ).catch(\n      (err) => {\n        this.uploading = false;\n        LogService.warn(`[${ELEMENT_NAME}] Failed to update thumbnail!`, err);\n        this._setErrorMessage('error');\n        this._emitUploadFailedEvent(err);\n      }\n    );\n  }\n\n  _emitUploadCompleteEvent() {\n    this.dispatchEvent(\n      new CustomEvent(EVENTS.UPLOAD_COMPLETE, {\n        bubbles: true,\n        detail: {\n          assetItemIDs: this.assetItemIDs,\n          filename: this.file.fileName\n        }\n      })\n    );\n  }\n\n  _emitUploadFailedEvent(error) {\n    this.dispatchEvent(\n      new CustomEvent(EVENTS.UPLOAD_FAILED, {\n        bubbles: true,\n        detail: {\n          assetItemIDs: this.assetItemIDs,\n          filename: this.file.fileName,\n          error: error\n        }\n      })\n    );\n  }\n\n  _handleDrop(event) {\n    LogService.debug(`[${ELEMENT_NAME}] Drop event recieved`, event);\n    this.error = false;\n    let files = event.dataTransfer.files;\n    if (files.length > 1) {\n      this._setErrorMessage('tooMany');\n      return;\n    }\n\n    let file = new FileFactory(files[0]);\n    if (!file.validThumbnail()) {\n      this._setErrorMessage('invalidFile');\n      return;\n    }\n\n    this.file = file;\n    this._setPreview(file);\n  }\n\n  _handleFileAdded(event) {\n    LogService.debug(`[${ELEMENT_NAME}] File added via input`, event);\n    this.error = false;\n\n    let file = new FileFactory(event.target.files[0]);\n    if (!file.validThumbnail()) {\n      this._setErrorMessage('invalidFile');\n      return;\n    }\n\n    this.file = file;\n    this._setPreview(file);\n  }\n\n  _setErrorMessage(key) {\n    let errMsg = this.shadowRoot.getElementById('error-message');\n    let errText = TranslationService.translate(key, TRANSLATION_SCOPE);\n    errMsg.innerText = errText;\n    this.error = true;\n  }\n\n  _setPreview(file) {\n    this.empty = false;\n\n    let previewContainer = this.shadowRoot.getElementById('preview');\n    if (previewContainer.children.length) {\n      Array.from(previewContainer.children).forEach(el => el.remove());\n    }\n    let progressEl = document.createElement('progress');\n    previewContainer.appendChild(progressEl);\n\n    let reader = new FileReader();\n    reader.onprogress = (evt) => {\n      LogService.debug(`[${ELEMENT_NAME}] FileReader progress`, evt);\n      progressEl.max = evt.total;\n      progressEl.value = evt.loaded;\n    };\n\n    reader.onload = (evt) => {\n      LogService.debug(`[${ELEMENT_NAME}] FileReader loaded`, evt);\n      progressEl.remove();\n      let img = document.createElement('img');\n      img.src = reader.result;\n      previewContainer.appendChild(img);\n    };\n\n    reader.onerror = (evt) => {\n      LogService.warn(`[${ELEMENT_NAME}] FileReader load error`, evt);\n      this.empty = true;\n      this._setErrorMessage('fileReadFailed');\n    };\n\n    reader.readAsDataURL(file.fileObj);\n  }\n\n  static register() {\n    // Register the custom element to the DOM\n    if (!window.customElements.get(this.elName)) {\n      window.customElements.define(\n        this.elName,\n        this\n      );\n    }\n  }\n}\n\nRunnerThumbnailUpdater.register();\n\nmodule.exports = { RunnerThumbnailUpdater };\n","const { TranslationService } = require('../../services/translation_service');\n\nconst isEdge = window.AW4.Utils.BROWSER.EDGE;\nconst TRANSLATION_SCOPE = { scope: isEdge ? 'RunnerUploader.edge' : 'RunnerUploader' };\n\nconst t = (key) => {\n  return TranslationService.translate(key, TRANSLATION_SCOPE);\n};\n\nconst template = document.createElement('template');\ntemplate.innerHTML = `\n  <style>\n    :host {\n      display: block;\n      position: relative;\n      border: 1px solid #999;\n      height: 500px;\n      width: 100%;\n    }\n\n    :host > * {\n      box-sizing: border-box;\n    }\n\n    :host([incoming][empty]) #incoming {\n      display: flex;\n    }\n\n    :host([incoming][empty]) #empty-dropzone {\n      display: none;\n    }\n\n    :host([empty]) #upload-button {\n      display: none;\n    }\n    :host([empty]) #empty-dropzone {\n      display: flex;\n    }\n\n    :host #files-list {\n      height: 100%;\n      overflow-y: scroll;\n    }\n\n    :host #empty-dropzone {\n      display: none;\n      height: 100%;\n      justify-content: center;\n      align-items: center;\n      flex-direction: column;\n    }\n\n    :host #incoming {\n      align-items: center;\n      display: none;\n      height: 100%;\n      justify-content: center;\n      position: absolute;\n      width: 100%;\n      z-index: 10;\n    }\n\n    :host #error,\n    :host #uploading,\n    :host #upload-complete {\n      display: none;\n      flex: 1;\n      justify-content: space-between;\n    }\n\n    :host([error]) #error {\n      display: flex;\n    }\n\n    :host([uploading]) #uploading {\n      display: flex;\n    }\n    :host([uploading]) #upload-button,\n    :host([uploading]) #add-files-button {\n      display: none;\n    }\n\n    :host([upload-complete]) #upload-complete {\n      display: flex;\n    }\n    :host([upload-complete]) #upload-button,\n    :host([upload-complete]) #add-files-button {\n      display: none;\n    }\n\n    :host footer {\n      background: rgba(0, 0, 0, 0.1);\n      position: absolute;\n      width: 100%;\n      padding: 8px;\n      bottom: 0;\n      display: flex;\n      justify-content: flex-end;\n    }\n\n    :host footer span {\n      flex: 1;\n    }\n  </style>\n\n  <div id=\"empty-dropzone\">\n    <slot name=\"emptyDropzone\">\n      <h1>${t('emptyHeadingText')}</h1>\n      <h2>${t('emptySubheadingText')}</h2>\n    </slot>\n  </div>\n\n  <div id=\"incoming\">\n    <slot name=\"incoming\">\n      <h1>${t('incoming')}</h1>\n    </slot>\n  </div>\n\n  <div id=\"files-list\"></div>\n\n  <footer>\n    <div id=\"error\">\n      <slot name=\"error\">\n        <span>${t('error')}</span>\n      </slot>\n    </div>\n\n    <div id=\"uploading\">\n      <slot name=\"uploading\">\n        <span>${t('uploading')}</span>\n      </slot>\n    </div>\n\n    <div id=\"upload-complete\">\n      <slot name=\"uploadComplete\">\n        <span>${t('uploadComplete')}</span>\n        <button type=\"button\" id=\"add-more-button\">${t('uploadMore')}</button>\n      </slot>\n    </div>\n\n    <slot name=\"addFilesButton\">\n      <button type=\"button\" id=\"add-files-button\">${t('addFiles')}</button>\n    </slot>\n\n    <slot name=\"uploadButton\">\n      <button type=\"button\" id=\"upload-button\">${t('upload')}</button>\n    </slot>\n  </footer>\n`;\n\nmodule.exports = template;\n","const { VALID_THUMBNAIL_FILE_EXTENSIONS, MAX_THUMBNAIL_SIZE } = require('../constants');\nconst { FileValidationService } = require('./file_validation_service');\n\nclass ThumbnailValidationService {\n  static containsValidExtension(fileName) {\n    return VALID_THUMBNAIL_FILE_EXTENSIONS.includes(FileValidationService.getExtension(fileName));\n  }\n\n  static isValidFileSize(fileSize) {\n    return fileSize <= MAX_THUMBNAIL_SIZE;\n  }\n\n  static valid(file) {\n    return (this.containsValidExtension(file.name) && this.isValidFileSize(file.size));\n  }\n}\n\nmodule.exports = { ThumbnailValidationService };\n","const { FileFactory } = require('./file_factory');\nconst { MAX_UPLOAD_COUNT } = require('../constants');\n\nclass FileUploadService {\n  static addFiles(currentFiles, fileList) {\n    return new Promise((resolve, reject) => {\n      fileList = this.removeDuplicates(currentFiles, fileList);\n\n      if ((currentFiles.length + fileList.length) > MAX_UPLOAD_COUNT) {\n        reject({\n          error: `[RunnerClient] Too many files added. Uploads can have a maximum of ${MAX_UPLOAD_COUNT} files.`\n        });\n      } else {\n        currentFiles.push(...fileList);\n        resolve({ files: currentFiles, filesAdded: fileList.length });\n      }\n    });\n  }\n\n  static removeDuplicates(currentFiles, newFileList) {\n    let existingFileNames = currentFiles.map((file) => file.fullFilePath);\n    let uniqueFileList = [];\n\n    newFileList.forEach(function (file) {\n      if (!existingFileNames.includes(file.name)) {\n        let ffile = new FileFactory(file);\n        uniqueFileList.push(ffile);\n      }\n    });\n\n    return uniqueFileList;\n  }\n\n  static removeFileByUUID(files, uuid) {\n    return new Promise((resolve, reject) => {\n      let fileIdx = files.findIndex(file => { file.uuid === uuid; });\n      if (fileIdx) {\n        resolve(files.splice(fileIdx, 1));\n      } else {\n        reject();\n      }\n    });\n  }\n}\n\nmodule.exports = { FileUploadService };\n","const { FileNameValidationService } = require('./file_name_validation_service');\n\nclass PackageManifestService {\n  static manifestForAsperaTransferEventData(asperaTransferEventData, packageTransferSpecs) {\n    let path = asperaTransferEventData.transfer_spec.paths[0].source;\n    let found = packageTransferSpecs.find((data) => { return data.transfer_spec.paths[0].source === path; });\n    let files = asperaTransferEventData.files.map((fileObj) => { return fileObj.file; });\n    return { id: found.asset_item_id, custom_metadata_fields: this.manifestForFiles(files, path) };\n  }\n\n  static manifestForFiles(files, path) {\n    let manifestFor = (files, fullFolderPath) => {\n      let folderName = this._folderNameFromFullFolderPath(fullFolderPath);\n      let roots      = [];\n      let tree       = { name: folderName, children: roots, count: 0};\n      files.forEach((file) => {\n        let filePath   = RegExp(path + '\\/?(.*)').exec(file)[1];\n        let components = filePath.split('/');\n        let length     = components.length;\n        let children   = roots;\n        components.forEach((component, index) => {\n          if (index === length - 1) {\n            if (this._isValid(component)) {\n              children.push({ name: component });\n              tree.count += 1;\n            }\n          } else {\n            let found = children.find((child) => { return child.name === component; });\n            if (found) {\n              children = found.children;\n            } else {\n              let nodeChildren = [];\n              let node = { name: component, children: nodeChildren };\n              children.push(node);\n              children = nodeChildren;\n            }\n          }\n        });\n      });\n\n      this._removeEmptyChildren(tree);\n      return tree;\n    };\n\n    return [ { category: 'tech_info', label: 'manifest', value: manifestFor(files, path) } ];\n  }\n\n  static present(manifest) {\n    let numberOfFiles = 0;\n    let numberOfFolders = 0;\n    let sorted = [];\n\n    let processChildren = (children, folderNames) => {\n      let files = [];\n      let foldersToProcess = [];\n      children = this._sort(children);\n      children.forEach((child) => {\n        if (child.hasOwnProperty('children')) {\n          if (this._hasNonFolderChild(child)) {\n            numberOfFolders += 1;\n            foldersToProcess.push(child);  \n          }\n        } else {\n          numberOfFiles += 1;\n          files.push(child.name);\n        }\n      });\n      let hash = {};\n      hash['/' + folderNames.join('/') + ':'] = files;\n      sorted.push(hash);\n\n      foldersToProcess.forEach((folder) => {\n        processChildren(folder.children, folderNames.concat(folder.name));\n      });\n    };\n\n    processChildren(manifest.children || [], []);\n\n    return {\n      numberOfFiles: numberOfFiles,\n      numberOfFolders: numberOfFolders,\n      sorted: sorted\n    };\n  }\n\n  ////\n  // Private methods\n  ////\n\n  static _folderNameFromFullFolderPath(fullFolderPath) {\n    let pathComponents = fullFolderPath.split('/');\n    return pathComponents[pathComponents.length - 1];\n  }\n\n  static _hasNonFolderChild(level) {\n    return level.hasOwnProperty('children') && level.children && level.children.find((item) => {\n      if (item.hasOwnProperty('children')) {\n        return this._hasNonFolderChild(item);\n      } else {\n        return true;\n      }\n    });\n  }\n\n  static _isValid(component) {\n    let hasExtension = FileNameValidationService.containsExtension(component);\n    let firstTwoCharacters = component[0] + component[1];\n    return component.toLowerCase() !== '.ds_store' && firstTwoCharacters !== '._' && (!hasExtension || FileNameValidationService.containsValidExtension(component));\n  }\n\n\n  static _removeEmptyChildren(level) {\n    level.children.forEach((item, index) => {\n      if (item.children) {\n        if (!item.children.length) {\n          level.children.splice(index, 1);\n        } else {\n          this._removeEmptyChildren(item);\n        }\n      }\n    });\n  }\n\n  static _sort(collection) {\n    return collection.sort((a, b) => {\n      let lowerNameA = a.name.toLowerCase();\n      let lowerNameB = b.name.toLowerCase();\n      if (lowerNameA < lowerNameB) {\n        return -1;\n      } else if (lowerNameA > lowerNameB) {\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n  }\n}\n\nmodule.exports = { PackageManifestService };\n","const cloneDeep = require('lodash/cloneDeep');\n\nclass AsperaTransferSpecFormatterService {\n  static formatted(uploadResponseData, files) {\n    let nonPackageTransferSpec = cloneDeep(uploadResponseData.transfer_spec);\n    let packageIndex = 0;\n    let fileIndex = 0;\n    let collection = (nonPackageTransferSpec.paths.length) ? [nonPackageTransferSpec] : [];\n    let packageMappings = cloneDeep(uploadResponseData.package_transfer_specs);\n\n    files.forEach(function (file) {\n      let target;\n\n      if (file.fileObj.isFolder) {\n        let packageTransferSpec = packageMappings[packageIndex].transfer_spec;\n        collection.push(packageTransferSpec);\n        target = packageTransferSpec.paths[0];\n        packageIndex += 1;\n      } else {\n        target = nonPackageTransferSpec.paths[fileIndex];\n        fileIndex += 1;\n      }\n\n      target.source = file.fullFilePath;\n    });\n\n    return { all: collection, packageMappings: packageMappings };\n  }\n}\n\nmodule.exports = { AsperaTransferSpecFormatterService };\n","const { API } = require('../api');\nconst { AsperaConnectService } = require('./aspera_connect_service');\nconst { AsperaTransferSpecFormatterService } = require('./aspera_transfer_spec_formatter_service');\nconst { PackageManifestService } = require('./package_manifest_service');\n\nclass AsperaUploadService {\n  static get activeUploads() {\n    if (!this._activeUploads) {\n      this._activeUploads = {};\n    }\n    return this._activeUploads;\n  }\n\n  static get hasActiveUploads() {\n    return !!Object.keys(this.activeUploads).length;\n  }\n\n  static get asperaConnectService() {\n    if (!this._asperaConnectService) {\n      AsperaConnectService.eventCallbacks = {\n        transferComplete: [this._onTransferComplete.bind(this)]\n      };\n      this._asperaConnectService = AsperaConnectService;\n    }\n\n    return this._asperaConnectService;\n  }\n\n  static upload(currentFiles, options) {\n    let items = currentFiles.map((file) => {\n      let attrs = {\n        name: file.fileName,\n        package: file.fileObj.isFolder,\n      };\n\n      if (file.fileObj.fetchFolderContentsFromDragDropEvent) {\n        attrs.custom_metadata_fields = PackageManifestService.manifestForFiles(file.fileObj.fetchFolderContentsFromDragDropEvent(), file.fileName);\n      }\n\n      return attrs;\n    });\n\n    return API.upload(items, options || {})\n      .then((response) => {\n        let formatted = AsperaTransferSpecFormatterService.formatted(response.data, currentFiles);\n\n        let result = this.asperaConnectService.start(\n          formatted.all,\n          response.data.connection_settings\n        );\n\n        this.activeUploads[result.id] = {\n          files: currentFiles,\n          assetItemAttrsCollection: [],\n          packageMappings: formatted.packageMappings,\n          ingestBatchId: response.data.ingest_batch_id\n        };\n\n        return response;\n      });\n  }\n\n  ////\n  // private methods\n  ////\n\n  /**\n   * Callback executed on AW4 'transfer' event when AsperaConnectService\n   * determines the transfer has completed.\n   * @param {object}  data\n   * @param {object}  data.transfer - transfer data from AW4.Connect\n   * @param {number}  data.id - internal tracking ID for transfer batch. NOT the\n   *                            runner ingest batch ID\n   * @param {string}  data.token - aspera request_id\n   * @param {boolean} data.isBatchComplete\n   */\n  static _onTransferComplete(data) {\n    let activeUpload = this.activeUploads[data.id];\n    if (!activeUpload || !data.isBatchComplete) { return; }\n\n    activeUpload.files.forEach((file) => {\n      if (file.fileObj.isFolder && !file.fileObj.fetchFolderContentsFromDragDropEvent) {\n        let attrs = PackageManifestService.manifestForAsperaTransferEventData(\n          data.transfer,\n          activeUpload.packageMappings\n        );\n        activeUpload.assetItemAttrsCollection.push(attrs);\n      }\n    });\n\n    if (activeUpload.assetItemAttrsCollection.length) {\n      API.bulkUpdateAssetItems(activeUpload.assetItemAttrsCollection);\n    }\n\n    // Set asset items in the completed ingest to \"uploaded\"\n    API.completeIngestBatchUpload(activeUpload.ingestBatchId);\n    delete this.activeUploads[data.id];\n  }\n}\n\nmodule.exports = { AsperaUploadService };\n","class AsperaFileSerializer {\n  static serialize(result) {\n    let files = result.files ? result.files.dataTransfer.files : result.dataTransfer.files;\n\n    return files.map((file) => {\n      let attrs = {\n        name: file.name,\n        size: file.size,\n        isFolder: /directory/i.test(file.type),\n        doesNotRequireExtension: true,\n      };\n\n      if (attrs.isFolder && result.dragDropManifestGrouping) {\n        attrs.fetchFolderContentsFromDragDropEvent = function () {\n          let fileNameComponents = file.name.split(/\\/|\\\\/);\n          let fileName = fileNameComponents[fileNameComponents.length - 1];\n          return result.dragDropManifestGrouping[fileName];\n        };\n      }\n\n      return attrs;\n    });\n  }\n}\n\nmodule.exports = { AsperaFileSerializer };\n","const { AsperaConnectService } = require('./aspera_connect_service');\nconst { LogService } = require('./log_service');\nconst AW4 = window.AW4;\n\nconst DEFAULT_EVENT_CALLBACKS = {\n  all: [],\n  dragEnter: [],\n  dragLeave: [],\n  dragOver: [],\n  drop: []\n};\n\nclass AsperaDragDropService {\n  static addTarget(target, eventCallbacks) {\n    AsperaConnectService.connect.initSession();\n    this.target = target;\n\n    let callbacks = Object.assign({}, DEFAULT_EVENT_CALLBACKS, eventCallbacks);\n    let registerAll = !!callbacks.all.length;\n    if (!!callbacks.dragEnter.length || registerAll) {\n      this._dragEnterCallback = this.dragEnterCallback.bind(this);\n      target.addEventListener('dragenter', this._dragEnterCallback);\n    }\n    if (!!callbacks.dragLeave.length || registerAll) {\n      this._dragLeaveCallback = this.dragLeaveCallback.bind(this);\n      target.addEventListener('dragleave', this._dragLeaveCallback);\n    }\n    if (!!callbacks.dragOver.length || !!callbacks.drop.length || registerAll) {\n      this._dragOverCallback = this.dragOverCallback.bind(this);\n      target.addEventListener('dragover', this._dragOverCallback);\n    }\n    if (!!callbacks.drop.length || registerAll) {\n      this._dropCallback = this.dropCallback.bind(this);\n      target.addEventListener('drop', this._dropCallback);\n    }\n\n    this.eventCallbacks = callbacks;\n  }\n\n  static reset() {\n    this.target.removeEventListener('dragenter', this._dragEnterCallback);\n    this.target.removeEventListener('dragleave', this._dragLeaveCallback);\n    this.target.removeEventListener('dragover', this._dragOverCallback);\n    this.target.removeEventListener('drop', this._dropCallback);\n    this.eventCallbacks = Object.assign({}, DEFAULT_EVENT_CALLBACKS);\n    this._target = undefined;\n  }\n\n  static get target() {\n    return this._target;\n  }\n\n  static set target(el) {\n    if (this._target) {\n      throw new Error('[RunnerClient.AsperaDragDropService] Cannot set more than one target!');\n    }\n    this._target = el;\n  }\n\n  static dragEnterCallback(event) {\n    event.stopPropagation();\n    event.preventDefault();\n    this._executeEventCallbacksFor('dragEnter', { event: event });\n  }\n\n  static dragLeaveCallback(event) {\n    event.stopPropagation();\n    event.preventDefault();\n    this._executeEventCallbacksFor('dragLeave', { event: event });\n  }\n\n  static dragOverCallback(event) {\n    event.stopPropagation();\n    event.preventDefault();\n    this._executeEventCallbacksFor('dragOver', { event: event });\n  }\n\n  static dropCallback(event) {\n    event.stopPropagation();\n    event.preventDefault();\n\n    let filesDropped = event.dataTransfer.files;\n    let data = {};\n    data.dataTransfer = {};\n    data.dataTransfer.files = [];\n    for (let i = 0; i < filesDropped.length; i++) {\n      let fileObject  = {\n        'lastModifiedDate' : filesDropped[i].lastModifiedDate,\n        'name'             : filesDropped[i].name,\n        'size'             : filesDropped[i].size,\n        'type'             : filesDropped[i].type,\n      };\n      data.dataTransfer.files.push(fileObject);\n    }\n\n    this._groupedFolderContents(event).then((manifestGrouping) => {\n      let dropHelper = (response) => {\n        this._executeEventCallbacksFor(\n          'drop',\n          { event: event, files: response, dragDropManifestGrouping: manifestGrouping }\n        );\n      };\n\n      AsperaConnectService.connect.connectHttpRequest(\n        AW4.Connect.HTTP_METHOD.POST,\n        '/connect/file/dropped-files',\n        data,\n        AW4.Utils.SESSION_ID,\n        { success: dropHelper }\n      );\n    });\n  }\n\n  static _executeEventCallbacksFor(eventName, data) {\n    this.eventCallbacks[eventName].forEach((cb) => { cb(data); });\n    this.eventCallbacks.all.forEach((cb) => { cb(data); });\n  }\n\n  static _collectFiles(entries, path, collection) {\n    let promises = [];\n    return new Promise((resolve) => {\n      entries.forEach((entry) => {\n        if (entry.isDirectory) {\n          let promise = new Promise((readResolve, readReject) => {\n            let reader = entry.createReader();\n            let readEntries = () => {\n              reader.readEntries((childEntries) => {\n                if (childEntries.length) {\n                  let childReadPromise = this._collectFiles(childEntries, entry.fullPath, collection);\n                  promises.push(childReadPromise);\n                  readEntries();\n                } else {\n                  readResolve();\n                }\n              }, (err) => {\n                LogService.warn(`Failed to read directory contents for ${entry.fullPath}`, err);\n                readReject();\n              });\n            };\n\n            readEntries();\n          });\n          promises.push(promise);\n        } else {\n          collection.push(path + '/' + entry.name);\n        }\n      });\n\n      Promise.all(promises).then(() => {\n        resolve(collection);\n      });\n    });\n  }\n\n  static _groupedFolderContents(evt) {\n    return new Promise((resolve, reject) => {\n      let grouping = {};\n      let promises = [];\n\n      // IE & Safari don't support the `items` property\n      if (!evt.dataTransfer.items) { resolve(grouping); }\n\n      for (let i = 0; i < evt.dataTransfer.items.length; i++) {\n        let item = evt.dataTransfer.items[i];\n        let fsEntry = item.webkitGetAsEntry();\n        if (fsEntry.isDirectory) {\n          let reader = fsEntry.createReader();\n          promises.push(new Promise((dirResolve, dirReject) => {\n            reader.readEntries((entries) => {\n              let dirPromise = this._collectFiles(entries, fsEntry.fullPath, []);\n              promises.push(dirPromise);\n              dirPromise.then((result) => {\n                grouping[fsEntry.name] = result;\n                dirResolve();\n              }, dirReject);\n            }, (err) => {\n              LogService.warn(`Failed to read directory contents for ${fsEntry.fullPath}`, err);\n              dirReject();\n            });\n          }));\n        }\n      }\n\n      Promise.all(promises).then(() => {\n        LogService.debug('[RunnerClient.AsperaDragDropService] Parsed drag-drop contents:', grouping);\n        resolve(grouping);\n      }, reject);\n    });\n  }\n}\n\nmodule.exports = { AsperaDragDropService };\n","const { EVENTS } = require('../../constants');\nconst ELEMENT_NAME = 'runner-uploader--file';\nconst template = document.createElement('template');\ntemplate.innerHTML = `\n  <style>\n    :host {\n      border-bottom: 1px solid #ccc;\n      display: flex;\n      justify-content: space-between;\n      align-items: baseline;\n      padding: 8px;\n      position: relative;\n    }\n\n    :host > * {\n      box-sizing: border-box;\n    }\n\n    :host[hidden] {\n      display: none;\n    }\n\n    :host[locked] #remove {\n      display: none;\n    }\n\n    :host #remove {\n      -webkit-appearance: none;\n      background: none;\n      border: none;\n      cursor: pointer;\n      font-size: medium;\n    }\n\n    :host:before,\n    :host:after {\n      visibility: hidden;\n      pointer-events: none;\n    }\n\n    /* Triangle hack */\n    :host:after {\n      position: absolute;\n      top: calc(100% - 5px);\n      left: 20px;\n      margin-left: -5px;\n      width: 0;\n      border-bottom: 5px solid rgba(0,0,0,0.6);\n      border-right: 5px solid transparent;\n      border-left: 5px solid transparent;\n      content: \" \";\n      font-size: 0;\n      line-height: 0;\n    }\n\n    :host:before {\n      position: absolute;\n      background-color: rgba(0,0,0,0.6);\n      color: white;\n      content: attr(data-tooltip);\n      padding: 4px 8px;\n      border-radius: 4px;\n      top: 100%;\n      z-index: 3;\n    }\n\n    :host:hover:after,\n    :host:hover:before {\n      visibility: visible;\n    }\n  </style>\n  <slot name=\"fileName\"></slot>\n  <button type=\"button\" id=\"remove\">&times;</button>\n`;\n\n// ShadyCSS polyfills scoped styles in browsers that don't support this\n// ShadowDOM feature.\nif (window.ShadyCSS) {\n  window.ShadyCSS.prepareTemplate(template, ELEMENT_NAME);\n}\n\nclass RunnerUploader__File extends HTMLElement {\n  static get elName() { return ELEMENT_NAME; }\n\n  constructor() {\n    super();\n    let shadowRoot = this.attachShadow({mode: 'open'});\n    shadowRoot.appendChild(template.content.cloneNode(true));\n  }\n\n  connectedCallback() {\n    this.shadowRoot.getElementById('remove').addEventListener('click', (evt) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n\n      this.dispatchEvent(\n        new CustomEvent(EVENTS.REMOVE_FILE, {\n          bubbles: true,\n          detail: { uuid: this.dataset.uuid }\n        })\n      );\n    });\n  }\n\n  static get observedAttributes() {\n    return ['locked'];\n  }\n\n  get locked() {\n    return this.hasAttribute('locked');\n  }\n\n  set locked(val) {\n    if (val) {\n      this.setAttribute('locked', '');\n    } else {\n      this.removeAttribute('locked');\n    }\n  }\n\n  static register() {\n    // Register the custom element to the DOM\n    if (!window.customElements.get(this.elName)) {\n      window.customElements.define(\n        this.elName,\n        this\n      );\n    }\n  }\n}\n\nRunnerUploader__File.register();\n","require('./__file'); // <runner-uploader--file> sub-component\nconst { EVENTS } = require('../../constants');\nconst { AsperaConnectService } = require('../../services/aspera_connect_service');\nconst { AsperaDragDropService } = require('../../services/aspera_drag_drop_service');\nconst { AsperaFileSerializer } = require('../../services/aspera_file_serializer');\nconst { AsperaUploadService } = require('../../services/aspera_upload_service');\nconst { FileUploadService } = require('../../services/file_upload_service');\nconst template = require('./template');\nconst ELEMENT_NAME = 'runner-uploader';\n\n// ShadyCSS polyfills scoped styles in browsers that don't support this\n// ShadowDOM feature.\nif (window.ShadyCSS) {\n  window.ShadyCSS.prepareTemplate(template, ELEMENT_NAME);\n}\n\nclass RunnerUploader extends HTMLElement {\n  /**\n   * Name of the HTML element\n   */\n  static get elName() { return ELEMENT_NAME; }\n\n  /**\n   * An instance of the element is created or upgraded. Useful for initializing\n   * state, settings up event listeners, or creating shadow dom. See the spec\n   * for restrictions on what you can do in the constructor.\n   */\n  constructor() {\n    super();\n    this.empty = true;\n    let shadowRoot = this.attachShadow({mode: 'open'});\n    shadowRoot.appendChild(template.content.cloneNode(true));\n  }\n\n  /**\n   * Called every time the element is inserted into the DOM. Useful for running\n   * setup code, such as fetching resources or rendering. Generally, you should\n   * try to delay work until this time.\n   */\n  connectedCallback() {\n    this._connectDragDrop();\n\n    const uploadButton = this.shadowRoot.getElementById('upload-button');\n    uploadButton.addEventListener('click', this.initiateUpload.bind(this));\n\n    const addFilesButton = this.shadowRoot.getElementById('add-files-button');\n    addFilesButton.addEventListener('click', this.addFiles.bind(this));\n\n    const addMoreButton = this.shadowRoot.getElementById('add-more-button');\n    addMoreButton.addEventListener('click', this.reset.bind(this));\n\n    this._filesList.addEventListener(EVENTS.REMOVE_FILE, (evt) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n\n      if (this.uploading) { return; }\n\n      let target = evt.target;\n\n      FileUploadService.removeFileByUUID(this.files, evt.detail.uuid).then(\n        () => {\n          target.remove();\n          this._emitFilesRemovedEvent();\n        }\n      );\n    });\n  }\n\n  /**\n   * Called every time the element is removed from the DOM. Useful for running\n   * clean up code.\n   */\n  disconnectedCallback() {\n    AsperaDragDropService.reset();\n  }\n\n  /**\n   * Elements can react to attribute changes by defining a\n   * attributeChangedCallback. The browser will call this method for every\n   * change to attributes listed in the observedAttributes array.\n   */\n  static get observedAttributes() {\n    return [\n      'destinationFolder',\n      'empty',\n      'error',\n      'incoming',\n      'uploading',\n      'uploadComplete'\n    ];\n  }\n\n  get destinationFolder() {\n    return this.getAttribute('destination-folder');\n  }\n\n  set destinationFolder(val) {\n    if (!val) {\n      this.removeAttribute('destination-folder');\n    } else {\n      if (!/\\d+/.test(val)) {\n        throw new Error(`[<${this.elName}>] destination-folder must be an integer`);\n      }\n      this.setAttribute('destination-folder', val);\n    }\n  }\n\n  get error() {\n    return this.hasAttribute('error');\n  }\n\n  set error(val) {\n    if (val) {\n      this.setAttribute('error', '');\n    } else {\n      this.removeAttribute('error');\n    }\n  }\n\n  get empty() {\n    return this.hasAttribute('empty');\n  }\n\n  set empty(val) {\n    if (val) {\n      this.setAttribute('empty', '');\n    } else {\n      this.removeAttribute('empty');\n    }\n  }\n\n  get folderIDs() {\n    if (!this._folderIDs) {\n      if (this.destinationFolder) {\n        this._folderIDs = [this.destinationFolder];\n      } else {\n        this._folderIDs = [];\n      }\n    }\n    return this._folderIDs;\n  }\n\n  set folderIDs(val) {\n    if (val.constructor.name !== 'Array' || !val.every(id => /\\d+/.test(id))) {\n      throw new Error(`[<${this.elName}>] folderIDs must be an Array of numbers`);\n    }\n    this.destinationFolder = undefined;\n    this._folderIDs = val;\n  }\n\n  get incoming() {\n    return this.hasAttribute('incoming');\n  }\n\n  set incoming(val) {\n    if (val) {\n      this.setAttribute('incoming', '');\n    } else {\n      this.removeAttribute('incoming');\n    }\n  }\n\n  get uploading() {\n    return this.hasAttribute('uploading');\n  }\n\n  set uploading(val) {\n    if (val) {\n      this.setAttribute('uploading', '');\n    } else {\n      this.removeAttribute('uploading');\n    }\n  }\n\n  get uploadComplete() {\n    return this.hasAttribute('upload-complete');\n  }\n\n  set uploadComplete(val) {\n    if (val) {\n      this.setAttribute('upload-complete', '');\n    } else {\n      this.removeAttribute('upload-complete');\n    }\n  }\n\n  get files() {\n    if (!this._files) {\n      this._files = [];\n    }\n    return this._files;\n  }\n\n\n  addFiles() {\n    AsperaConnectService.showFileUploadDialog((result) => {\n      this._addFilesFromAspera(result);\n    });\n  }\n\n  initiateUpload() {\n    if (this.uploading) { return; }\n    if (this.error) { this.error = false; }\n\n    this.dispatchEvent(new CustomEvent(EVENTS.UPLOAD_STARTED, {\n      bubbles: true,\n      detail: {\n        files: this.files,\n      }\n    }));\n    this.uploading = true;\n    Array.from(this._filesList.children).forEach(file => file.locked = true);\n    AsperaDragDropService.reset();\n\n    AsperaUploadService.upload(this.files, { folderIds: this.folderIDs }).then(\n      this._listenForTransferComplete.bind(this),\n      this._handleUploadFailure.bind(this)\n    );\n  }\n\n  reset() {\n    this._files = undefined;\n    Array.from(this._filesList.children).forEach(file => file.remove());\n    this.uploadComplete = false;\n    this.empty = true;\n    this._connectDragDrop();\n  }\n\n  _addFilesFromAspera(data) {\n    FileUploadService.addFiles(\n      this.files,\n      AsperaFileSerializer.serialize(data)\n    ).then(\n      (data) => { this._emitFilesAddedEvent(true, data); },\n      (error) => { this._emitFilesAddedEvent(false, error); },\n    );\n  }\n\n  _connectDragDrop() {\n    AsperaDragDropService.addTarget(this, {\n      dragEnter: [\n        () => { this.incoming = true; }\n      ],\n      dragLeave: [\n        () => { this.incoming = false; }\n      ],\n      drop: [\n        (dragObject) => {\n          this.incoming = false;\n          this._addFilesFromAspera(dragObject);\n        }\n      ]\n    });\n  }\n\n  _handleUploadFailure() {\n    this.dispatchEvent(new CustomEvent(EVENTS.UPLOAD_FAILED, {\n      bubbles: true,\n      detail: {\n        currentFiles: this.files,\n      }\n    }));\n    this.uploading = false;\n    Array.from(this._filesList.children).forEach(file => file.locked = false);\n    this._connectDragDrop();\n    this.error = true;\n  }\n\n  _emitFilesAddedEvent(success, data) {\n    this._fileChangeHandler();\n    this.dispatchEvent(\n      new CustomEvent(EVENTS.FILES_ADDED, {\n        detail: Object.assign({ success }, data),\n        bubbles: true,\n      })\n    );\n  }\n\n  _emitFilesRemovedEvent() {\n    this.dispatchEvent(\n      new CustomEvent(EVENTS.FILES_REMOVED, {\n        detail: { currentFiles: this.files },\n        bubbles: true,\n      })\n    );\n  }\n\n  _listenForTransferComplete(transferInfo) {\n    let requestID = transferInfo.data.connection_settings.request_id;\n    let listener = (transferCompleteInfo) => {\n      if (transferCompleteInfo.token === requestID && transferCompleteInfo.isBatchComplete) {\n        this._uploadComplete();\n\n        let listenerIdx = AsperaConnectService.eventCallbacks.transferComplete.indexOf(listener);\n        AsperaConnectService.eventCallbacks.transferComplete.splice(listenerIdx, 1);\n      }\n    };\n    AsperaConnectService.eventCallbacks.transferComplete.push(listener);\n  }\n\n  _uploadComplete() {\n    this.dispatchEvent(new CustomEvent(EVENTS.UPLOAD_COMPLETE, {\n      bubbles: true,\n      detail: {\n        currentFiles: this.files,\n      }\n    }));\n\n    this.uploading = false;\n    this.uploadComplete = true;\n  }\n\n  _fileChangeHandler() {\n    let renderedUUIDs = Array.from(this._filesList.children).map(li => li.dataset.uuid);\n    this.files.forEach(file => {\n      if (!renderedUUIDs.includes(file.uuid)) {\n        let fileEl = document.createElement('runner-uploader--file');\n        fileEl.innerHTML = `<span slot=\"fileName\">${file.fileName}</span>`;\n        fileEl.dataset.uuid = file.uuid;\n        fileEl.dataset.tooltip = file.fullFilePath;\n        this._filesList.prepend(fileEl);\n      }\n    });\n    this.empty = !this.files.length;\n  }\n\n  get _filesList() {\n    if (!this._filesListEl) {\n      this._filesListEl = this.shadowRoot.getElementById('files-list');\n    }\n    return this._filesListEl;\n  }\n\n  static register() {\n    // Register the custom element to the DOM\n    if (!window.customElements.get(this.elName)) {\n      window.customElements.define(\n        this.elName,\n        this\n      );\n    }\n  }\n}\n\nRunnerUploader.register();\n\nmodule.exports = { RunnerUploader };\n","const RunnerClient = require('../../index');\nconst ELEMENT_NAME = 'runner-client-configuration';\n\nclass RunnerClientConfiguration extends HTMLElement {\n  static get elName() { return ELEMENT_NAME; }\n\n  static get observedAttributes() {\n    return [\n      'token',\n      'method',\n      'environment',\n      'locale',\n      'logLevel'\n    ];\n  }\n\n  connectedCallback() {\n    this.configureClient();\n  }\n\n  configureClient() {\n    RunnerClient.configure({\n      authentication: {\n        method: this.method,\n        token: this.token,\n      },\n      environment: this.environment,\n      locale: this.locale,\n      logLevel: this.logLevel\n    });\n  }\n\n  get method() {\n    return this.getAttribute('method');\n  }\n\n  set method(val) {\n    if (val) {\n      this.setAttribute('method', val);\n    } else {\n      this.removeAttribute('method');\n    }\n    this.configureClient();\n  }\n\n  get token() {\n    return this.getAttribute('token');\n  }\n\n  set token(val) {\n    if (val) {\n      this.setAttribute('token', val);\n    } else {\n      this.removeAttribute('token');\n    }\n    this.configureClient();\n  }\n\n  get environment() {\n    return this.getAttribute('environment');\n  }\n\n  set environment(val) {\n    if (val) {\n      this.setAttribute('environment', val);\n    } else {\n      this.removeAttribute('environment');\n    }\n    this.configureClient();\n  }\n\n  get locale() {\n    return this.getAttribute('locale');\n  }\n\n  set locale(val) {\n    if (val) {\n      this.setAttribute('locale', val);\n    } else {\n      this.removeAttribute('locale');\n    }\n    this.configureClient();\n  }\n\n  get logLevel() {\n    return this.getAttribute('log-level');\n  }\n\n  set logLevel(val) {\n    if (val) {\n      this.setAttribute('log-level', val);\n    } else {\n      this.removeAttribute('log-level');\n    }\n    this.configureClient();\n  }\n\n  static register() {\n    // Register the custom element to the DOM\n    if (!window.customElements.get(this.elName)) {\n      window.customElements.define(\n        this.elName,\n        this\n      );\n    }\n  }\n}\n\nRunnerClientConfiguration.register();\n\nmodule.exports = { RunnerClientConfiguration };\n"],"sourceRoot":""}