{"version":3,"sources":["webpack://RunnerClient/./src/components.js","webpack://RunnerClient/./src/services/translation_service.js","webpack://RunnerClient/./src/services/file_validation_service.js","webpack://RunnerClient/./src/services/log_service.js","webpack://RunnerClient/./src/services/aspera_connect_service.js","webpack://RunnerClient/./src/services/file_factory.js","webpack://RunnerClient/./src/services/file_name_validation_service.js","webpack://RunnerClient/./src/components/runner_thumbnail_updater/template.js","webpack://RunnerClient/./src/services/thumbnail_replacement_service.js","webpack://RunnerClient/./src/components/runner_thumbnail_updater/component.js","webpack://RunnerClient/./src/components/runner_uploader/template.js","webpack://RunnerClient/./src/services/thumbnail_validation_service.js","webpack://RunnerClient/./src/services/file_upload_service.js","webpack://RunnerClient/./src/services/package_manifest_service.js","webpack://RunnerClient/./src/services/aspera_transfer_spec_formatter_service.js","webpack://RunnerClient/./src/services/aspera_upload_service.js","webpack://RunnerClient/./src/services/aspera_file_serializer.js","webpack://RunnerClient/./src/services/aspera_drag_drop_service.js","webpack://RunnerClient/./src/components/runner_uploader/__file.js","webpack://RunnerClient/./src/components/runner_uploader/component.js","webpack://RunnerClient/./src/components/runner_client_config/component.js"],"names":["RunnerClientConfiguration","__webpack_require__","RunnerUploader","RunnerThumbnailUpdater","module","exports","I18n","Config","translations","TranslationService","_i18n","this","i18n","_configureI18n","t","apply","arguments","locale","FileValidationService","fileName","toLowerCase","match","filePath","replace","LogService","_console","logLevelInt","console","info","_console2","warn","_console3","log","DEFAULT_EVENT_CALLBACKS","transfer","transferComplete","status","start","AsperaConnectService","id","window","AW4","Utils","generateUuid","connectInstaller","ConnectInstaller","CONNECT_INSTALLER_OPTIONS","supportsInstallingExtensions","connectOptions","Object","assign","dragDropEnabled","minVersion","CONNECT_OPTIONS","_connect","Connect","addEventListener","EVENT","STATUS","_handleAsperaEvent","bind","initSession","activeTransfers","uploadBatchCount","transferSpecs","connectionSettings","_this","connect","TRANSFER","tokens","allPromises","promiseFunctions","forEach","transferSpec","index","promise","Promise","resolve","reject","push","startTransferForIndex","result","startTransfer","success","length","error","request_id","transfer_spec","_executeEventListenersFor","all","successCallback","showSelectFileDialog","showSelectFolderDialog","eventName","eventData","_handleAsperaStatusEvent","_handleAsperaTransferEvent","eventCallbacks","cb","INITIALIZING","RETRYING","showLaunching","FAILED","showDownload","OUTDATED","showUpdate","RUNNING","connected","_this2","transfers","data","_getTransferDataFor","percentage","splice","token","isBatchComplete","hasActiveTransfers","_removeTransferListener","hasOwnProperty","aspera_connect_settings","indexOf","removeEventListener","_eventCallbacks","initialize","keys","options","__CONNECT_OPTIONS","__CONNECT_INSTALLER_OPTIONS","FileNameValidationService","ThumbnailValidationService","FileFactory","file","_classCallCheck","getFileName","name","fullFilePath","processing","size","fileObj","uuid","crypto","getRandomValues","Uint32Array","hasValidCharacters","containsValidCharacters","hasExtension","containsExtension","hasValidExtension","containsValidExtension","valid","doesNotRequireExtension","validThumbnail","validFile","UNSUPPORTED_FILE_EXTENSIONS","test","getExtension","includes","TRANSLATION_SCOPE","scope","key","translate","template","document","createElement","innerHTML","API","axios","ThumbnailReplacementService","assetItemID","replaceThumbnail","then","response","debug","mcsId","mcs_id","_uploadImageToMCS","mcsResponse","thumbnail","thumbnails","find","type","thumbnail_url","location","FormData","append","request","url","method","headers","Authorization","onUploadProgress","evt","EVENTS","ELEMENT_NAME","ShadyCSS","prepareTemplate","_possibleConstructorReturn","__proto__","getPrototypeOf","call","empty","attachShadow","mode","appendChild","content","cloneNode","_addEventListeners","_dragEnterListener","preventDefault","stopPropagation","incoming","_dragLeaveListener","_dragOverListener","_dropListener","_handleDrop","uploadBtn","shadowRoot","getElementById","_uploadClickListener","_beginUpload","addFileBtn","_addFilesClickListener","click","fileInput","_fileAddedListener","_handleFileAdded","_this3","errors","uploading","promises","assetItemIDs","map","replaceThumbnailFor","results","bulkUpdateAssetItems","uploadComplete","_emitUploadCompleteEvent","catch","err","_setErrorMessage","_emitUploadFailedEvent","dispatchEvent","CustomEvent","UPLOAD_COMPLETE","bubbles","detail","filename","UPLOAD_FAILED","event","files","dataTransfer","_setPreview","target","errMsg","errText","innerText","_this4","previewContainer","children","Array","from","el","remove","progressEl","reader","FileReader","onprogress","max","total","value","loaded","onload","img","src","onerror","readAsDataURL","getAttribute","val","Error","elName","setAttribute","removeAttribute","_assetItemIDs","constructor","every","undefined","hasAttribute","customElements","get","define","register","BROWSER","EDGE","VALID_THUMBNAIL_FILE_EXTENSIONS","MAX_THUMBNAIL_SIZE","fileSize","isValidFileSize","MAX_UPLOAD_COUNT","FileUploadService","currentFiles","fileList","removeDuplicates","_toConsumableArray","filesAdded","newFileList","existingFileNames","uniqueFileList","ffile","fileIdx","findIndex","PackageManifestService","asperaTransferEventData","packageTransferSpecs","path","paths","source","found","asset_item_id","custom_metadata_fields","manifestForFiles","category","label","fullFolderPath","roots","tree","_folderNameFromFullFolderPath","count","components","RegExp","exec","split","component","_isValid","child","nodeChildren","node","_removeEmptyChildren","manifestFor","manifest","numberOfFiles","numberOfFolders","sorted","processChildren","folderNames","foldersToProcess","_sort","_hasNonFolderChild","hash","join","folder","concat","pathComponents","level","item","firstTwoCharacters","collection","sort","a","b","lowerNameA","lowerNameB","cloneDeep","AsperaTransferSpecFormatterService","uploadResponseData","nonPackageTransferSpec","packageIndex","fileIndex","packageMappings","package_transfer_specs","isFolder","packageTransferSpec","AsperaUploadService","items","attrs","package","fetchFolderContentsFromDragDropEvent","upload","formatted","asperaConnectService","connection_settings","activeUploads","assetItemAttrsCollection","ingestBatchId","ingest_batch_id","activeUpload","manifestForAsperaTransferEventData","completeIngestBatchUpload","_activeUploads","_asperaConnectService","_onTransferComplete","AsperaFileSerializer","dragDropManifestGrouping","fileNameComponents","dragEnter","dragLeave","dragOver","drop","AsperaDragDropService","callbacks","registerAll","_dragEnterCallback","dragEnterCallback","_dragLeaveCallback","dragLeaveCallback","_dragOverCallback","dragOverCallback","_dropCallback","dropCallback","_target","_executeEventCallbacksFor","filesDropped","i","fileObject","lastModifiedDate","_groupedFolderContents","manifestGrouping","connectHttpRequest","HTTP_METHOD","POST","SESSION_ID","grouping","remaining","_loop","entry","webkitGetAsEntry","_processEntry","fullPath","topLevelEntry","directoryCount","processEntries","entries","isDirectory","read","readEntries","childEntries","createReader","RunnerUploader__File","REMOVE_FILE","dataset","_connectDragDrop","initiateUpload","addFiles","reset","_filesList","removeFileByUUID","_emitFilesRemovedEvent","showFileUploadDialog","_addFilesFromAspera","UPLOAD_STARTED","locked","folderIds","folderIDs","_listenForTransferComplete","_handleUploadFailure","_files","serialize","_emitFilesAddedEvent","_this5","addTarget","dragObject","_fileChangeHandler","FILES_ADDED","FILES_REMOVED","transferInfo","_this6","requestID","listener","transferCompleteInfo","_uploadComplete","listenerIdx","_this7","renderedUUIDs","li","fileEl","tooltip","prepend","_folderIDs","destinationFolder","_filesListEl","RunnerClient","configureClient","configure","authentication","environment","logLevel"],"mappings":"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","file":"runnerclient.components.js","sourcesContent":["const { RunnerClientConfiguration } = require('./components/runner_client_config/component');\nconst { RunnerUploader } = require('./components/runner_uploader/component');\nconst { RunnerThumbnailUpdater } = require('./components/runner_thumbnail_updater/component');\n\nmodule.exports = {\n  RunnerClientConfiguration,\n  RunnerThumbnailUpdater,\n  RunnerUploader\n};\n","const I18n = require('i18n-js');\nconst { Config } = require('../config');\nconst translations = require('../translations.js');\n\nclass TranslationService {\n  static translate(...args) {\n    if (!this.i18n) {\n      this._configureI18n();\n    }\n    return this.i18n.t(...args);\n  }\n\n  static _configureI18n() {\n    I18n.translations = translations;\n    I18n.locale = Config.locale;\n    this.i18n = I18n;\n  }\n}\n\nmodule.exports = { TranslationService };\n","class FileValidationService {\n  static getExtension(fileName) {\n    return (fileName.toLowerCase().match(/^[^.].*(\\.\\w+)$/) || [])[1];\n  }\n\n  static getFileName(filePath) {\n    return filePath.replace(/^[\\w\\W]*[/\\\\]/, '');\n  }\n}\n\nmodule.exports = { FileValidationService };\n","/* eslint no-console: \"off\" */\nconst { Config } = require('../config');\n\nclass LogService {\n  static info(...args) {\n    if (Config.logLevelInt >= 2) {\n      console.info(...args);\n    }\n  }\n\n  static warn(...args) {\n    if (Config.logLevelInt >= 1) {\n      console.warn(...args);\n    }\n  }\n\n  static debug(...args) {\n    if (Config.logLevelInt >= 3) {\n      console.log(...args);\n    }\n  }\n}\n\nmodule.exports = { LogService };\n","const REQUIRED_ASPERA_VERSION = '3.9.8';\nconst DEFAULT_EVENT_CALLBACKS = {\n  transfer: [],\n  transferComplete: [],\n  status: [],\n  start: []\n};\n\nclass AsperaConnectService {\n  static initialize() {\n    let id = window.AW4.Utils.generateUuid();\n    this.connectInstaller = new window.AW4.ConnectInstaller(this.CONNECT_INSTALLER_OPTIONS);\n    window.AW4.ConnectInstaller.supportsInstallingExtensions = true;\n\n    let connectOptions = Object.assign({\n      id: id,\n      dragDropEnabled: true,\n      minVersion: REQUIRED_ASPERA_VERSION\n    }, this.CONNECT_OPTIONS);\n    this._connect = new window.AW4.Connect(connectOptions);\n    this._connect.addEventListener(window.AW4.Connect.EVENT.STATUS, this._handleAsperaEvent.bind(this));\n    this._connect.initSession(id);\n\n    this.activeTransfers = {};\n    this.uploadBatchCount = 0;\n  }\n\n  static set eventCallbacks(eventCallbacks) {\n    this._eventCallbacks = Object.assign({}, DEFAULT_EVENT_CALLBACKS, eventCallbacks);\n  }\n\n  static get eventCallbacks() {\n    if (!this._eventCallbacks) {\n      this._eventCallbacks = Object.assign({}, DEFAULT_EVENT_CALLBACKS);\n    }\n    return this._eventCallbacks;\n  }\n\n  static get connect() {\n    if (!this._connect) {\n      this.initialize();\n    }\n    return this._connect;\n  }\n\n  static start(transferSpecs, connectionSettings) {\n    this.connect.addEventListener(window.AW4.Connect.EVENT.TRANSFER, this._handleAsperaEvent.bind(this));\n    let tokens = [];\n\n    let startTransferForIndex = (index) => {\n      let result = this.connect.startTransfer(transferSpecs[index], connectionSettings, {\n        success: () => {\n          if (index < transferSpecs.length - 1) {\n            startTransferForIndex(index + 1);\n          }\n          promiseFunctions[index].resolve();\n        },\n        error: promiseFunctions[index].reject\n      });\n\n      if (result.error) {\n        reject(result.error);\n      } else {\n        tokens.push(result.request_id);\n        result.transfer_spec = transferSpecs[index];\n        this._executeEventListenersFor('start', result);\n      }\n    };\n\n    let allPromises = [];\n    let promiseFunctions = {};\n\n    transferSpecs.forEach((transferSpec, index) => {\n      let promise = new Promise((resolve, reject) => {\n        promiseFunctions[index] = { resolve, reject };\n      });\n      allPromises.push(promise);\n    });\n\n    startTransferForIndex(0);\n\n    //let allPromises = transferSpecs.map((transferSpec) => {\n    //  return new Promise((resolve, reject) => {\n    //    let result = this.connect.startTransfer(transferSpec, connectionSettings, {\n    //      success: resolve,\n    //      error: reject\n    //    });\n\n    //    if (result.error) {\n    //      reject(result.error);\n    //    } else {\n    //      tokens.push(result.request_id);\n    //      result.transfer_spec = transferSpec;\n    //      this._executeEventListenersFor('start', result);\n    //    }\n    //  });\n    //});\n\n    this.uploadBatchCount += 1;\n    this.activeTransfers[this.uploadBatchCount] = tokens;\n\n    return { id: this.uploadBatchCount, promise: Promise.all(allPromises) };\n  }\n\n  static showFileUploadDialog(successCallback) {\n    this.connect.showSelectFileDialog({\n      success: successCallback\n    });\n  }\n\n  static showFolderUploadDialog(successCallback) {\n    this.connect.showSelectFolderDialog({\n      success: successCallback\n    });\n  }\n\n  static _handleAsperaEvent(eventName, eventData) {\n    if (eventName === window.AW4.Connect.EVENT.STATUS)   { this._handleAsperaStatusEvent(eventData); }\n    if (eventName === window.AW4.Connect.EVENT.TRANSFER) { this._handleAsperaTransferEvent(eventData); }\n  }\n\n  static _executeEventListenersFor(eventName, eventData) {\n    this.eventCallbacks[eventName].forEach(cb => cb(eventData));\n  }\n\n  static _handleAsperaStatusEvent(eventData) {\n    this._executeEventListenersFor('status', eventData);\n\n    switch(eventData) {\n    case window.AW4.Connect.STATUS.INITIALIZING:\n    case window.AW4.Connect.STATUS.RETRYING:\n      this.connectInstaller.showLaunching();\n      break;\n    case window.AW4.Connect.STATUS.FAILED:\n      this.connectInstaller.showDownload();\n      break;\n    case window.AW4.Connect.STATUS.OUTDATED:\n      this.connectInstaller.showUpdate();\n      break;\n    case window.AW4.Connect.STATUS.RUNNING:\n      this.connectInstaller.connected();\n      break;\n    }\n  }\n\n  static _handleAsperaTransferEvent(eventData) {\n    eventData.transfers.forEach((transfer) => {\n      if (transfer.transfer_spec) {\n        this._executeEventListenersFor('transfer', transfer);\n\n        let data = this._getTransferDataFor(transfer);\n        if (data) {\n          if (transfer.percentage === 1) {\n            let tokens = this.activeTransfers[data.id];\n            tokens.splice(data.index, 1);\n\n            if (tokens.length === 0) {\n              delete(this.activeTransfers[data.id]);\n            }\n\n            this._executeEventListenersFor('transferComplete', {\n              transfer: transfer,\n              id: data.id,\n              token: data.token,\n              isBatchComplete: !tokens.length\n            });\n          }\n        }\n      }\n    });\n\n    if (!this.hasActiveTransfers) { this._removeTransferListener(); }\n  }\n\n  static get hasActiveTransfers() {\n    return !!Object.keys(this.activeTransfers).length;\n  }\n\n  static _getTransferDataFor(transfer) {\n    for (let id in this.activeTransfers) {\n      if (!this.activeTransfers.hasOwnProperty(id)) { continue; }\n\n      let tokens = this.activeTransfers[id];\n      if (tokens) {\n        let token = transfer.aspera_connect_settings.request_id;\n        let index = tokens.indexOf(token);\n        if (index !== -1) { return { id: id, token: token, index: index }; }\n      }\n    }\n  }\n\n  static _removeTransferListener() {\n    this.connect.removeEventListener(window.AW4.Connect.EVENT.TRANSFER);\n  }\n\n  /**\n   * Use this setter to provide non-default configuration to the\n   * AW4.Connect() constructor\n   */\n  static set CONNECT_OPTIONS (options) {\n    this.__CONNECT_OPTIONS = options;\n  }\n\n  static get CONNECT_OPTIONS () {\n    return this.__CONNECT_OPTIONS || {};\n  }\n\n  /**\n   * Use this setter to provide non-default configuration to the\n   * AW4.ConnectInstaller() constructor\n   */\n  static set CONNECT_INSTALLER_OPTIONS (options) {\n    this.__CONNECT_INSTALLER_OPTIONS = options;\n  }\n\n  static get CONNECT_INSTALLER_OPTIONS () {\n    return this.__CONNECT_INSTALLER_OPTIONS || {};\n  }\n}\n\nmodule.exports = { AsperaConnectService };\n","const { FileNameValidationService } = require('./file_name_validation_service');\nconst { FileValidationService } = require('./file_validation_service');\nconst { ThumbnailValidationService } = require('./thumbnail_validation_service');\n\nclass FileFactory {\n  constructor(file) {\n    this.fileName = FileValidationService.getFileName(file.name);\n    this.fullFilePath = file.name;\n    this.processing = false;\n    this.size = file.size;\n    this.fileObj = file;\n    this.uuid = window.crypto.getRandomValues(new Uint32Array(1))[0];\n\n    this.hasValidCharacters = FileNameValidationService.containsValidCharacters(this.fileName);\n    this.hasExtension = FileNameValidationService.containsExtension(this.fileName);\n    this.hasValidExtension = FileNameValidationService.containsValidExtension(this.fileName);\n\n    this.valid = function () {\n      return FileNameValidationService.valid(this.fileName, this.fileObj.doesNotRequireExtension);\n    };\n\n    this.validThumbnail = function () {\n      let validFile = this.valid();\n      let validThumbnail = ThumbnailValidationService.valid(file);\n\n      return validFile && validThumbnail;\n    };\n  }\n}\n\nmodule.exports = { FileFactory };\n","const { UNSUPPORTED_FILE_EXTENSIONS } = require('../constants');\nconst { FileValidationService } = require('./file_validation_service');\n\nclass FileNameValidationService {\n  static containsValidCharacters(fileName) {\n    return !(/:|\\/|\"|;|'|\\?|!|>|<|&|\\||\\*|@/.test(fileName));\n  }\n\n  static containsExtension(fileName) {\n    return !!FileValidationService.getExtension(fileName);\n  }\n\n  static containsValidExtension(fileName) {\n    return !UNSUPPORTED_FILE_EXTENSIONS.includes(FileValidationService.getExtension(fileName));\n  }\n\n  static valid(fileName, doesNotRequireExtension) {\n    if (doesNotRequireExtension) {\n      return this.containsValidCharacters(fileName);\n    } else {\n      return (this.containsValidCharacters(fileName) &&\n      this.containsExtension(fileName) &&\n      this.containsValidExtension(fileName));\n    }\n  }\n}\n\nmodule.exports = { FileNameValidationService };\n","const { TranslationService } = require('../../services/translation_service');\nconst TRANSLATION_SCOPE = { scope: 'RunnerThumbnailUpdater' };\nconst t = (key) => {\n  return TranslationService.translate(key, TRANSLATION_SCOPE);\n};\n\nconst template = document.createElement('template');\ntemplate.innerHTML = `\n  <style>\n    :host {\n      display: flex;\n      flex-direction: column;\n      position: relative;\n      border: 1px solid #999;\n      height: 500px;\n      width: 100%;\n    }\n\n    :host > * {\n      box-sizing: border-box;\n    }\n\n    :host([incoming][empty]) #incoming {\n      display: flex;\n    }\n\n    :host([incoming][empty]) #empty-dropzone {\n      display: none;\n    }\n\n    :host([empty]) #upload-button {\n      display: none;\n    }\n    :host([empty]) #empty-dropzone {\n      display: -ms-flexbox;\n      display: flex;\n    }\n\n    :host #preview {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      flex: 1 0 0.1px;\n    }\n\n    :host #preview img {\n      flex: 0 1 0.01px;\n      max-height: 100%;\n    }\n\n    :host #empty-dropzone {\n      display: none;\n      height: 100%;\n      justify-content: center;\n      align-items: center;\n      flex-direction: column;\n    }\n\n    :host #incoming {\n      align-items: center;\n      display: none;\n      height: 100%;\n      justify-content: center;\n      position: absolute;\n      width: 100%;\n      z-index: 10;\n    }\n\n    :host #error,\n    :host #uploading,\n    :host #upload-complete {\n      display: none;\n      flex: 1;\n      justify-content: space-between;\n    }\n\n    :host([error]) #error {\n      display: flex;\n    }\n\n    :host([uploading]) #uploading {\n      display: flex;\n    }\n    :host([uploading]) #upload-button,\n    :host([uploading]) #add-file-button {\n      display: none;\n    }\n\n    :host([upload-complete]) #upload-complete {\n      display: flex;\n    }\n    :host([upload-complete]) #upload-button,\n    :host([upload-complete]) #add-file-button {\n      display: none;\n    }\n\n    :host #add-file-input {\n      display: none;\n    }\n\n    :host footer {\n      background: rgba(0, 0, 0, 0.1);\n      width: 100%;\n      padding: 8px;\n      display: flex;\n      justify-content: flex-end;\n    }\n\n    :host footer span {\n      flex: 1;\n    }\n  </style>\n\n  <div id=\"empty-dropzone\">\n    <slot name=\"emptyDropzone\">\n      <h1>${t('emptyHeadingText')}</h1>\n      <h2>${t('emptySubheadingText')}</h2>\n      <h3>${t('emptyAdditionalText')}</h3>\n    </slot>\n  </div>\n\n  <div id=\"incoming\">\n    <slot name=\"incoming\">\n      <h1>${t('incoming')}</h1>\n    </slot>\n  </div>\n\n  <div id=\"preview\"></div>\n\n  <footer>\n    <div id=\"error\">\n      <slot name=\"error\">\n        <span id=\"error-message\">${t('error')}</span>\n      </slot>\n    </div>\n\n    <div id=\"uploading\">\n      <slot name=\"uploading\">\n        <span>${t('uploading')}</span>\n      </slot>\n    </div>\n\n    <div id=\"upload-complete\">\n      <slot name=\"uploadComplete\">\n        <span>${t('uploadComplete')}</span>\n      </slot>\n    </div>\n\n    <slot name=\"addFileButton\">\n      <button type=\"button\" id=\"add-file-button\">${t('addFile')}</button>\n      <input type=\"file\" id=\"add-file-input\" />\n    </slot>\n\n    <slot name=\"uploadButton\">\n      <button type=\"button\" id=\"upload-button\">${t('upload')}</button>\n    </slot>\n  </footer>\n`;\n\nmodule.exports = template;\n","const { API } = require('../api');\nconst { LogService } = require('./log_service');\nconst axios = require('axios');\n\nclass ThumbnailReplacementService {\n  static replaceThumbnailFor(assetItemID, file) {\n    // Fetch delegate token from runner\n    return API.replaceThumbnail(assetItemID, file.fileName)\n      .then((response) => {\n        LogService.debug(`[${this.name}] Delegate token recieved`, response);\n        const token = response.data.token;\n        const mcsId = response.data.mcs_id;\n        // Upload the image to MCS\n        return this._uploadImageToMCS(mcsId, token, file.fileObj);\n      })\n      .then((mcsResponse) => {\n        let thumbnail = mcsResponse.data.thumbnails.find(t => t.type === 'small');\n        return {\n          id: assetItemID,\n          thumbnail_url: thumbnail.location\n        };\n      });\n  }\n\n  static _uploadImageToMCS(mcsId, token, file) {\n    const data = new FormData();\n    data.append('file', file);\n\n    return axios.request({\n      url: `https://io.cimediacloud.com/assets/${mcsId}/coverelement/upload`,\n      method: 'post',\n      data: data,\n      headers: {\n        'Authorization': `Bearer ${token}`,\n      },\n      onUploadProgress: (evt) => { LogService.debug(`[${this.name}] Upload Progress`, evt); }\n    });\n  }\n}\n\nmodule.exports = { ThumbnailReplacementService };\n","// Base element for <runner-uploader> and <runner-thumbnail-updater>\nconst { API } = require('../../api');\nconst { FileFactory } = require('../../services/file_factory');\nconst { LogService } = require('../../services/log_service');\nconst { ThumbnailReplacementService } = require('../../services/thumbnail_replacement_service');\nconst { TranslationService } = require('../../services/translation_service');\nconst TRANSLATION_SCOPE = { scope: 'RunnerThumbnailUpdater' };\nconst { EVENTS } = require('../../constants');\nconst ELEMENT_NAME = 'runner-thumbnail-updater';\nconst template = require('./template');\nif (window.ShadyCSS) {\n  window.ShadyCSS.prepareTemplate(template, ELEMENT_NAME);\n}\n\nclass RunnerThumbnailUpdater extends HTMLElement {\n  static get elName() { return ELEMENT_NAME; }\n\n  constructor() {\n    super();\n    this.empty = true;\n    let shadowRoot = this.attachShadow({mode: 'open'});\n    shadowRoot.appendChild(template.content.cloneNode(true));\n  }\n\n  connectedCallback() {\n    this._addEventListeners();\n  }\n\n  static get observedAttributes() {\n    return [\n      'assetItemID',\n      'empty',\n      'error',\n      'incoming',\n      'uploading',\n      'uploadComplete'\n    ];\n  }\n\n  get assetItemID() {\n    return this.getAttribute('asset-item-id');\n  }\n\n  set assetItemID(val) {\n    if (!val) {\n      this.removeAttribute('asset-item-id');\n    } else {\n      if (!/\\d+/.test(val)) {\n        throw new Error(`[<${this.elName}>] asset-item-id must be an integer`);\n      }\n      this.setAttribute('asset-item-id', val);\n    }\n  }\n\n  get assetItemIDs() {\n    if (!this._assetItemIDs) {\n      if (this.assetItemID) {\n        this._assetItemIDs = [this.assetItemID];\n      } else {\n        this._assetItemIDs = [];\n      }\n    }\n    return this._assetItemIDs;\n  }\n\n  set assetItemIDs(val) {\n    if (val.constructor.name !== 'Array' || !val.every(id => /\\d+/.test(id))) {\n      throw new Error(`[<${this.elName}>] assetItemIDs must be an Array of numbers`);\n    }\n    this.assetItemID = undefined;\n    this._assetItemIDs = val;\n  }\n\n\n  get empty() {\n    return this.hasAttribute('empty');\n  }\n\n  set empty(val) {\n    if (val) {\n      this.setAttribute('empty', '');\n    } else {\n      this.removeAttribute('empty');\n    }\n  }\n\n  get error() {\n    return this.hasAttribute('error');\n  }\n\n  set error(val) {\n    if (val) {\n      this.setAttribute('error', '');\n    } else {\n      this.removeAttribute('error');\n    }\n  }\n\n  get incoming() {\n    return this.hasAttribute('incoming');\n  }\n\n  set incoming(val) {\n    if (val) {\n      this.setAttribute('incoming', '');\n    } else {\n      this.removeAttribute('incoming');\n    }\n  }\n\n  get uploading() {\n    return this.hasAttribute('uploading');\n  }\n\n  set uploading(val) {\n    if (val) {\n      this.setAttribute('uploading', '');\n    } else {\n      this.removeAttribute('uploading');\n    }\n  }\n\n  get uploadComplete() {\n    return this.hasAttribute('upload-complete');\n  }\n\n  set uploadComplete(val) {\n    if (val) {\n      this.setAttribute('upload-complete', '');\n    } else {\n      this.removeAttribute('upload-complete');\n    }\n  }\n\n  _addEventListeners() {\n    // Drag-drop setup\n    this._dragEnterListener = ((evt) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n      this.incoming = true;\n    }).bind(this);\n    this._dragLeaveListener = ((evt) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n      this.incoming = false;\n    }).bind(this);\n    this._dragOverListener = ((evt) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n    }).bind(this);\n    this._dropListener = ((evt) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n      this.incoming = false;\n      this._handleDrop(evt);\n    }).bind(this);\n\n    this.addEventListener('dragenter', this._dragEnterListener);\n    this.addEventListener('dragleave', this._dragLeaveListener);\n    this.addEventListener('dragover', this._dragOverListener);\n    this.addEventListener('drop', this._dropListener);\n\n    // \"Upload\" button setup\n    const uploadBtn = this.shadowRoot.getElementById('upload-button');\n    this._uploadClickListener = ((evt) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n      this._beginUpload();\n    }).bind(this);\n    uploadBtn.addEventListener('click', this._uploadClickListener);\n\n    // \"Add File\" button\n    const addFileBtn = this.shadowRoot.getElementById('add-file-button');\n    this._addFilesClickListener = ((evt) => {\n      evt.stopPropagation();\n      evt.preventDefault();\n      this.shadowRoot.getElementById('add-file-input').click();\n    }).bind(this);\n    addFileBtn.addEventListener('click', this._addFilesClickListener);\n\n    // File added via input\n    const fileInput = this.shadowRoot.getElementById('add-file-input');\n    this._fileAddedListener = ((evt) => {\n      evt.stopPropagation();\n      evt.preventDefault();\n      this._handleFileAdded(evt);\n    }).bind(this);\n    fileInput.addEventListener('change', this._fileAddedListener);\n  }\n\n  _beginUpload() {\n    this.errors = false;\n    this.uploading = true;\n    let promises = this.assetItemIDs.map(assetItemID => {\n      return ThumbnailReplacementService.replaceThumbnailFor(assetItemID, this.file);\n    });\n    Promise.all(promises).then(\n      (results) => {\n        return API.bulkUpdateAssetItems(results);\n      }\n    ).then(\n      () => {\n        this.uploading = false;\n        this.uploadComplete = true;\n        this._emitUploadCompleteEvent();\n      }\n    ).catch(\n      (err) => {\n        this.uploading = false;\n        LogService.warn(`[${ELEMENT_NAME}] Failed to update thumbnail!`, err);\n        this._setErrorMessage('error');\n        this._emitUploadFailedEvent(err);\n      }\n    );\n  }\n\n  _emitUploadCompleteEvent() {\n    this.dispatchEvent(\n      new CustomEvent(EVENTS.UPLOAD_COMPLETE, {\n        bubbles: true,\n        detail: {\n          assetItemIDs: this.assetItemIDs,\n          filename: this.file.fileName\n        }\n      })\n    );\n  }\n\n  _emitUploadFailedEvent(error) {\n    this.dispatchEvent(\n      new CustomEvent(EVENTS.UPLOAD_FAILED, {\n        bubbles: true,\n        detail: {\n          assetItemIDs: this.assetItemIDs,\n          filename: this.file.fileName,\n          error: error\n        }\n      })\n    );\n  }\n\n  _handleDrop(event) {\n    LogService.debug(`[${ELEMENT_NAME}] Drop event recieved`, event);\n    this.error = false;\n    let files = event.dataTransfer.files;\n    if (files.length > 1) {\n      this._setErrorMessage('tooMany');\n      return;\n    }\n\n    let file = new FileFactory(files[0]);\n    if (!file.validThumbnail()) {\n      this._setErrorMessage('invalidFile');\n      return;\n    }\n\n    this.file = file;\n    this._setPreview(file);\n  }\n\n  _handleFileAdded(event) {\n    LogService.debug(`[${ELEMENT_NAME}] File added via input`, event);\n    this.error = false;\n\n    let file = new FileFactory(event.target.files[0]);\n    if (!file.validThumbnail()) {\n      this._setErrorMessage('invalidFile');\n      return;\n    }\n\n    this.file = file;\n    this._setPreview(file);\n  }\n\n  _setErrorMessage(key) {\n    let errMsg = this.shadowRoot.getElementById('error-message');\n    let errText = TranslationService.translate(key, TRANSLATION_SCOPE);\n    errMsg.innerText = errText;\n    this.error = true;\n  }\n\n  _setPreview(file) {\n    this.empty = false;\n\n    let previewContainer = this.shadowRoot.getElementById('preview');\n    if (previewContainer.children.length) {\n      Array.from(previewContainer.children).forEach(el => el.remove());\n    }\n    let progressEl = document.createElement('progress');\n    previewContainer.appendChild(progressEl);\n\n    let reader = new FileReader();\n    reader.onprogress = (evt) => {\n      LogService.debug(`[${ELEMENT_NAME}] FileReader progress`, evt);\n      progressEl.max = evt.total;\n      progressEl.value = evt.loaded;\n    };\n\n    reader.onload = (evt) => {\n      LogService.debug(`[${ELEMENT_NAME}] FileReader loaded`, evt);\n      progressEl.remove();\n      let img = document.createElement('img');\n      img.src = reader.result;\n      previewContainer.appendChild(img);\n    };\n\n    reader.onerror = (evt) => {\n      LogService.warn(`[${ELEMENT_NAME}] FileReader load error`, evt);\n      this.empty = true;\n      this._setErrorMessage('fileReadFailed');\n    };\n\n    reader.readAsDataURL(file.fileObj);\n  }\n\n  static register() {\n    // Register the custom element to the DOM\n    if (!window.customElements.get(this.elName)) {\n      window.customElements.define(\n        this.elName,\n        this\n      );\n    }\n  }\n}\n\nRunnerThumbnailUpdater.register();\n\nmodule.exports = { RunnerThumbnailUpdater };\n","const { TranslationService } = require('../../services/translation_service');\n\nconst isEdge = window.AW4.Utils.BROWSER.EDGE;\nconst TRANSLATION_SCOPE = { scope: isEdge ? 'RunnerUploader.edge' : 'RunnerUploader' };\n\nconst t = (key) => {\n  return TranslationService.translate(key, TRANSLATION_SCOPE);\n};\n\nconst template = document.createElement('template');\ntemplate.innerHTML = `\n  <style>\n    :host {\n      display: block;\n      position: relative;\n      border: 1px solid #999;\n      height: 500px;\n      width: 100%;\n    }\n\n    :host > * {\n      box-sizing: border-box;\n    }\n\n    :host([incoming][empty]) #incoming {\n      display: flex;\n    }\n\n    :host([incoming][empty]) #empty-dropzone {\n      display: none;\n    }\n\n    :host([empty]) #upload-button {\n      display: none;\n    }\n    :host([empty]) #empty-dropzone {\n      display: flex;\n    }\n\n    :host #files-list {\n      height: 100%;\n      overflow-y: scroll;\n    }\n\n    :host #empty-dropzone {\n      display: none;\n      height: 100%;\n      justify-content: center;\n      align-items: center;\n      flex-direction: column;\n    }\n\n    :host #incoming {\n      align-items: center;\n      display: none;\n      height: 100%;\n      justify-content: center;\n      position: absolute;\n      width: 100%;\n      z-index: 10;\n    }\n\n    :host #error,\n    :host #uploading,\n    :host #upload-complete {\n      display: none;\n      flex: 1;\n      justify-content: space-between;\n    }\n\n    :host([error]) #error {\n      display: flex;\n    }\n\n    :host([uploading]) #uploading {\n      display: flex;\n    }\n    :host([uploading]) #upload-button,\n    :host([uploading]) #add-files-button {\n      display: none;\n    }\n\n    :host([upload-complete]) #upload-complete {\n      display: flex;\n    }\n    :host([upload-complete]) #upload-button,\n    :host([upload-complete]) #add-files-button {\n      display: none;\n    }\n\n    :host footer {\n      background: rgba(0, 0, 0, 0.1);\n      position: absolute;\n      width: 100%;\n      padding: 8px;\n      bottom: 0;\n      display: flex;\n      justify-content: flex-end;\n    }\n\n    :host footer span {\n      flex: 1;\n    }\n  </style>\n\n  <div id=\"empty-dropzone\">\n    <slot name=\"emptyDropzone\">\n      <h1>${t('emptyHeadingText')}</h1>\n      <h2>${t('emptySubheadingText')}</h2>\n    </slot>\n  </div>\n\n  <div id=\"incoming\">\n    <slot name=\"incoming\">\n      <h1>${t('incoming')}</h1>\n    </slot>\n  </div>\n\n  <div id=\"files-list\"></div>\n\n  <footer>\n    <div id=\"error\">\n      <slot name=\"error\">\n        <span>${t('error')}</span>\n      </slot>\n    </div>\n\n    <div id=\"uploading\">\n      <slot name=\"uploading\">\n        <span>${t('uploading')}</span>\n      </slot>\n    </div>\n\n    <div id=\"upload-complete\">\n      <slot name=\"uploadComplete\">\n        <span>${t('uploadComplete')}</span>\n        <button type=\"button\" id=\"add-more-button\">${t('uploadMore')}</button>\n      </slot>\n    </div>\n\n    <slot name=\"addFilesButton\">\n      <button type=\"button\" id=\"add-files-button\">${t('addFiles')}</button>\n    </slot>\n\n    <slot name=\"uploadButton\">\n      <button type=\"button\" id=\"upload-button\">${t('upload')}</button>\n    </slot>\n  </footer>\n`;\n\nmodule.exports = template;\n","const { VALID_THUMBNAIL_FILE_EXTENSIONS, MAX_THUMBNAIL_SIZE } = require('../constants');\nconst { FileValidationService } = require('./file_validation_service');\n\nclass ThumbnailValidationService {\n  static containsValidExtension(fileName) {\n    return VALID_THUMBNAIL_FILE_EXTENSIONS.includes(FileValidationService.getExtension(fileName));\n  }\n\n  static isValidFileSize(fileSize) {\n    return fileSize <= MAX_THUMBNAIL_SIZE;\n  }\n\n  static valid(file) {\n    return (this.containsValidExtension(file.name) && this.isValidFileSize(file.size));\n  }\n}\n\nmodule.exports = { ThumbnailValidationService };\n","const { FileFactory } = require('./file_factory');\nconst { MAX_UPLOAD_COUNT } = require('../constants');\n\nclass FileUploadService {\n  static addFiles(currentFiles, fileList) {\n    return new Promise((resolve, reject) => {\n      fileList = this.removeDuplicates(currentFiles, fileList);\n\n      if ((currentFiles.length + fileList.length) > MAX_UPLOAD_COUNT) {\n        reject({\n          error: `[RunnerClient] Too many files added. Uploads can have a maximum of ${MAX_UPLOAD_COUNT} files.`\n        });\n      } else {\n        currentFiles.push(...fileList);\n        resolve({ files: currentFiles, filesAdded: fileList.length });\n      }\n    });\n  }\n\n  static removeDuplicates(currentFiles, newFileList) {\n    let existingFileNames = currentFiles.map((file) => file.fullFilePath);\n    let uniqueFileList = [];\n\n    newFileList.forEach(function (file) {\n      if (!existingFileNames.includes(file.name)) {\n        let ffile = new FileFactory(file);\n        uniqueFileList.push(ffile);\n      }\n    });\n\n    return uniqueFileList;\n  }\n\n  static removeFileByUUID(files, uuid) {\n    return new Promise((resolve, reject) => {\n      let fileIdx = files.findIndex(file => { file.uuid === uuid; });\n      if (fileIdx) {\n        resolve(files.splice(fileIdx, 1));\n      } else {\n        reject();\n      }\n    });\n  }\n}\n\nmodule.exports = { FileUploadService };\n","const { FileNameValidationService } = require('./file_name_validation_service');\n\nclass PackageManifestService {\n  static manifestForAsperaTransferEventData(asperaTransferEventData, packageTransferSpecs) {\n    let path = asperaTransferEventData.transfer_spec.paths[0].source;\n    let found = packageTransferSpecs.find((data) => { return data.transfer_spec.paths[0].source === path; });\n    let files = asperaTransferEventData.files.map((fileObj) => { return fileObj.file; });\n    return { id: found.asset_item_id, custom_metadata_fields: this.manifestForFiles(files, path) };\n  }\n\n  static manifestForFiles(files, path) {\n    let manifestFor = (files, fullFolderPath) => {\n      let folderName = this._folderNameFromFullFolderPath(fullFolderPath);\n      let roots      = [];\n      let tree       = { name: folderName, children: roots, count: 0};\n      files.forEach((file) => {\n        let filePath   = RegExp(path + '/?(.*)').exec(file)[1];\n        let components = filePath.split('/');\n        let length     = components.length;\n        let children   = roots;\n        components.forEach((component, index) => {\n          if (index === length - 1) {\n            if (this._isValid(component)) {\n              children.push({ name: component });\n              tree.count += 1;\n            }\n          } else {\n            let found = children.find((child) => { return child.name === component; });\n            if (found) {\n              children = found.children;\n            } else {\n              let nodeChildren = [];\n              let node = { name: component, children: nodeChildren };\n              children.push(node);\n              children = nodeChildren;\n            }\n          }\n        });\n      });\n\n      this._removeEmptyChildren(tree);\n      return tree;\n    };\n\n    return [ { category: 'tech_info', label: 'manifest', value: manifestFor(files, path) } ];\n  }\n\n  static present(manifest) {\n    let numberOfFiles = 0;\n    let numberOfFolders = 0;\n    let sorted = [];\n\n    let processChildren = (children, folderNames) => {\n      let files = [];\n      let foldersToProcess = [];\n      children = this._sort(children);\n      children.forEach((child) => {\n        if (child.hasOwnProperty('children')) {\n          if (this._hasNonFolderChild(child)) {\n            numberOfFolders += 1;\n            foldersToProcess.push(child);\n          }\n        } else {\n          numberOfFiles += 1;\n          files.push(child);\n        }\n      });\n      let hash = {};\n      hash['/' + folderNames.join('/') + ':'] = files;\n      sorted.push(hash);\n\n      foldersToProcess.forEach((folder) => {\n        processChildren(folder.children, folderNames.concat(folder.name));\n      });\n    };\n\n    processChildren(manifest.children || [], []);\n\n    return { numberOfFiles, numberOfFolders, sorted };\n  }\n\n  ////\n  // Private methods\n  ////\n\n  static _folderNameFromFullFolderPath(fullFolderPath) {\n    let pathComponents = fullFolderPath.split('/');\n    return pathComponents[pathComponents.length - 1];\n  }\n\n  static _hasNonFolderChild(level) {\n    return level.hasOwnProperty('children') && level.children && level.children.find((item) => {\n      if (item.hasOwnProperty('children')) {\n        return this._hasNonFolderChild(item);\n      } else {\n        return true;\n      }\n    });\n  }\n\n  static _isValid(component) {\n    let hasExtension = FileNameValidationService.containsExtension(component);\n    let firstTwoCharacters = component[0] + component[1];\n    return component.toLowerCase() !== '.ds_store' && firstTwoCharacters !== '._' && (!hasExtension || FileNameValidationService.containsValidExtension(component));\n  }\n\n\n  static _removeEmptyChildren(level) {\n    level.children.forEach((item, index) => {\n      if (item.children) {\n        if (!item.children.length) {\n          level.children.splice(index, 1);\n        } else {\n          this._removeEmptyChildren(item);\n        }\n      }\n    });\n  }\n\n  static _sort(collection) {\n    return collection.sort((a, b) => {\n      let lowerNameA = a.name.toLowerCase();\n      let lowerNameB = b.name.toLowerCase();\n      if (lowerNameA < lowerNameB) {\n        return -1;\n      } else if (lowerNameA > lowerNameB) {\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n  }\n}\n\nmodule.exports = { PackageManifestService };\n","const cloneDeep = require('lodash/cloneDeep');\n\nclass AsperaTransferSpecFormatterService {\n  static formatted(uploadResponseData, files) {\n    let nonPackageTransferSpec = cloneDeep(uploadResponseData.transfer_spec);\n    let packageIndex = 0;\n    let fileIndex = 0;\n    let collection = (nonPackageTransferSpec.paths.length) ? [nonPackageTransferSpec] : [];\n    let packageMappings = cloneDeep(uploadResponseData.package_transfer_specs);\n\n    files.forEach(function (file) {\n      let target;\n\n      if (file.fileObj.isFolder) {\n        let packageTransferSpec = packageMappings[packageIndex].transfer_spec;\n        collection.push(packageTransferSpec);\n        target = packageTransferSpec.paths[0];\n        packageIndex += 1;\n      } else {\n        target = nonPackageTransferSpec.paths[fileIndex];\n        fileIndex += 1;\n      }\n\n      target.source = file.fullFilePath;\n    });\n\n    return { all: collection, packageMappings: packageMappings };\n  }\n}\n\nmodule.exports = { AsperaTransferSpecFormatterService };\n","const { API } = require('../api');\nconst { AsperaConnectService } = require('./aspera_connect_service');\nconst { AsperaTransferSpecFormatterService } = require('./aspera_transfer_spec_formatter_service');\nconst { PackageManifestService } = require('./package_manifest_service');\n\nclass AsperaUploadService {\n  static get activeUploads() {\n    if (!this._activeUploads) {\n      this._activeUploads = {};\n    }\n    return this._activeUploads;\n  }\n\n  static get hasActiveUploads() {\n    return !!Object.keys(this.activeUploads).length;\n  }\n\n  static get asperaConnectService() {\n    if (!this._asperaConnectService) {\n      AsperaConnectService.eventCallbacks = {\n        transferComplete: [this._onTransferComplete.bind(this)]\n      };\n      this._asperaConnectService = AsperaConnectService;\n    }\n\n    return this._asperaConnectService;\n  }\n\n  static upload(currentFiles, options) {\n    let items = currentFiles.map((file) => {\n      let attrs = {\n        name: file.fileName,\n        package: file.fileObj.isFolder,\n      };\n\n      if (file.fileObj.fetchFolderContentsFromDragDropEvent) {\n        attrs.custom_metadata_fields = PackageManifestService.manifestForFiles(file.fileObj.fetchFolderContentsFromDragDropEvent(), file.fileName);\n      }\n\n      return attrs;\n    });\n\n    return API.upload(items, options || {})\n      .then((response) => {\n        let formatted = AsperaTransferSpecFormatterService.formatted(response.data, currentFiles);\n\n        let result = this.asperaConnectService.start(\n          formatted.all,\n          response.data.connection_settings\n        );\n\n        this.activeUploads[result.id] = {\n          files: currentFiles,\n          assetItemAttrsCollection: [],\n          packageMappings: formatted.packageMappings,\n          ingestBatchId: response.data.ingest_batch_id\n        };\n\n        return response;\n      });\n  }\n\n  ////\n  // private methods\n  ////\n\n  /**\n   * Callback executed on AW4 'transfer' event when AsperaConnectService\n   * determines the transfer has completed.\n   * @param {object}  data\n   * @param {object}  data.transfer - transfer data from AW4.Connect\n   * @param {number}  data.id - internal tracking ID for transfer batch. NOT the\n   *                            runner ingest batch ID\n   * @param {string}  data.token - aspera request_id\n   * @param {boolean} data.isBatchComplete\n   */\n  static _onTransferComplete(data) {\n    let activeUpload = this.activeUploads[data.id];\n    if (!activeUpload || !data.isBatchComplete) { return; }\n\n    activeUpload.files.forEach((file) => {\n      if (file.fileObj.isFolder && !file.fileObj.fetchFolderContentsFromDragDropEvent) {\n        let attrs = PackageManifestService.manifestForAsperaTransferEventData(\n          data.transfer,\n          activeUpload.packageMappings\n        );\n        activeUpload.assetItemAttrsCollection.push(attrs);\n      }\n    });\n\n    if (activeUpload.assetItemAttrsCollection.length) {\n      API.bulkUpdateAssetItems(activeUpload.assetItemAttrsCollection);\n    }\n\n    // Set asset items in the completed ingest to \"uploaded\"\n    API.completeIngestBatchUpload(activeUpload.ingestBatchId);\n    delete this.activeUploads[data.id];\n  }\n}\n\nmodule.exports = { AsperaUploadService };\n","class AsperaFileSerializer {\n  static serialize(result) {\n    let files = result.files ? result.files.dataTransfer.files : result.dataTransfer.files;\n\n    return files.map((file) => {\n      let attrs = {\n        name: file.name,\n        size: file.size,\n        isFolder: /directory/i.test(file.type),\n        doesNotRequireExtension: true,\n      };\n\n      if (attrs.isFolder && result.dragDropManifestGrouping) {\n        attrs.fetchFolderContentsFromDragDropEvent = function () {\n          let fileNameComponents = file.name.split(/\\/|\\\\/);\n          let fileName = fileNameComponents[fileNameComponents.length - 1];\n          return result.dragDropManifestGrouping[fileName];\n        };\n      }\n\n      return attrs;\n    });\n  }\n}\n\nmodule.exports = { AsperaFileSerializer };\n","const { AsperaConnectService } = require('./aspera_connect_service');\nconst { LogService } = require('./log_service');\nconst AW4 = window.AW4;\n\nconst DEFAULT_EVENT_CALLBACKS = {\n  all: [],\n  dragEnter: [],\n  dragLeave: [],\n  dragOver: [],\n  drop: []\n};\n\nclass AsperaDragDropService {\n  static addTarget(target, eventCallbacks) {\n    AsperaConnectService.connect.initSession();\n    this.target = target;\n\n    let callbacks = Object.assign({}, DEFAULT_EVENT_CALLBACKS, eventCallbacks);\n    let registerAll = !!callbacks.all.length;\n    if (!!callbacks.dragEnter.length || registerAll) {\n      this._dragEnterCallback = this.dragEnterCallback.bind(this);\n      target.addEventListener('dragenter', this._dragEnterCallback);\n    }\n    if (!!callbacks.dragLeave.length || registerAll) {\n      this._dragLeaveCallback = this.dragLeaveCallback.bind(this);\n      target.addEventListener('dragleave', this._dragLeaveCallback);\n    }\n    if (!!callbacks.dragOver.length || !!callbacks.drop.length || registerAll) {\n      this._dragOverCallback = this.dragOverCallback.bind(this);\n      target.addEventListener('dragover', this._dragOverCallback);\n    }\n    if (!!callbacks.drop.length || registerAll) {\n      this._dropCallback = this.dropCallback.bind(this);\n      target.addEventListener('drop', this._dropCallback);\n    }\n\n    this.eventCallbacks = callbacks;\n  }\n\n  static reset() {\n    this.target.removeEventListener('dragenter', this._dragEnterCallback);\n    this.target.removeEventListener('dragleave', this._dragLeaveCallback);\n    this.target.removeEventListener('dragover', this._dragOverCallback);\n    this.target.removeEventListener('drop', this._dropCallback);\n    this.eventCallbacks = Object.assign({}, DEFAULT_EVENT_CALLBACKS);\n    this._target = undefined;\n  }\n\n  static get target() {\n    return this._target;\n  }\n\n  static set target(el) {\n    if (this._target) {\n      throw new Error('[RunnerClient.AsperaDragDropService] Cannot set more than one target!');\n    }\n    this._target = el;\n  }\n\n  static dragEnterCallback(event) {\n    event.stopPropagation();\n    event.preventDefault();\n    this._executeEventCallbacksFor('dragEnter', { event: event });\n  }\n\n  static dragLeaveCallback(event) {\n    event.stopPropagation();\n    event.preventDefault();\n    this._executeEventCallbacksFor('dragLeave', { event: event });\n  }\n\n  static dragOverCallback(event) {\n    event.stopPropagation();\n    event.preventDefault();\n    this._executeEventCallbacksFor('dragOver', { event: event });\n  }\n\n  static dropCallback(event) {\n    event.stopPropagation();\n    event.preventDefault();\n\n    let filesDropped = event.dataTransfer.files;\n    let data = {};\n    data.dataTransfer = {};\n    data.dataTransfer.files = [];\n    for (let i = 0; i < filesDropped.length; i++) {\n      let fileObject  = {\n        'lastModifiedDate' : filesDropped[i].lastModifiedDate,\n        'name'             : filesDropped[i].name,\n        'size'             : filesDropped[i].size,\n        'type'             : filesDropped[i].type,\n      };\n      data.dataTransfer.files.push(fileObject);\n    }\n\n    this._groupedFolderContents(event).then((manifestGrouping) => {\n      let dropHelper = (response) => {\n        this._executeEventCallbacksFor(\n          'drop',\n          { event: event, files: response, dragDropManifestGrouping: manifestGrouping }\n        );\n      };\n\n      AsperaConnectService.connect.connectHttpRequest(\n        AW4.Connect.HTTP_METHOD.POST,\n        '/connect/file/dropped-files',\n        data,\n        AW4.Utils.SESSION_ID,\n        { success: dropHelper }\n      );\n    });\n  }\n\n  static _executeEventCallbacksFor(eventName, data) {\n    this.eventCallbacks[eventName].forEach((cb) => { cb(data); });\n    this.eventCallbacks.all.forEach((cb) => { cb(data); });\n  }\n\n  static _groupedFolderContents(evt) {\n    return new Promise((resolve, reject) => {\n      let grouping = {};\n\n      if (!evt.dataTransfer.items) { resolve(grouping); }\n\n      let length = evt.dataTransfer.items.length;\n      let remaining = length;\n\n      for (let i = 0; i < length; i++) {\n        let item = evt.dataTransfer.items[i];\n        let entry = item.webkitGetAsEntry();\n        this._processEntry(entry, grouping).then(() => {\n          remaining--;\n          if (!remaining) {\n            LogService.debug('[RunnerClient.AsperaDragDropService] Parsed drag-drop contents:', grouping);\n            resolve(grouping);\n          }\n        }, (err) => {\n          LogService.warn(`Failed to read directory contents for ${entry.fullPath}`, err);\n          reject(err);\n        });\n      }\n    });\n  }\n\n  static _processEntry(topLevelEntry, grouping) {\n    return new Promise((resolve, reject) => {\n      let key = topLevelEntry.name;\n      let directoryCount = 0;\n      let processEntries = (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isDirectory) {\n            directoryCount++;\n            let read = (reader) => {\n              reader.readEntries((childEntries) => {\n                if (childEntries.length) {\n                  processEntries(childEntries);\n                  read(reader);\n                } else {\n                  directoryCount--;\n                  if (!directoryCount) { resolve(); }\n                }\n              }, (err) => {\n                LogService.warn(`Failed to read directory contents for ${entry.fullPath}`, err);\n                reject(err);\n              });\n            };\n\n            read(entry.createReader());\n          } else {\n            grouping[key] = grouping[key] || [];\n            grouping[key].push(entry.fullPath);\n            if (entry === topLevelEntry) { resolve(); }\n          }\n        });\n      };\n\n      processEntries([topLevelEntry]);\n    });\n  }\n}\n\nmodule.exports = { AsperaDragDropService };\n","const { EVENTS } = require('../../constants');\nconst ELEMENT_NAME = 'runner-uploader--file';\nconst template = document.createElement('template');\ntemplate.innerHTML = `\n  <style>\n    :host {\n      border-bottom: 1px solid #ccc;\n      display: flex;\n      justify-content: space-between;\n      align-items: baseline;\n      padding: 8px;\n      position: relative;\n    }\n\n    :host > * {\n      box-sizing: border-box;\n    }\n\n    :host[hidden] {\n      display: none;\n    }\n\n    :host[locked] #remove {\n      display: none;\n    }\n\n    :host #remove {\n      -webkit-appearance: none;\n      background: none;\n      border: none;\n      cursor: pointer;\n      font-size: medium;\n    }\n\n    :host:before,\n    :host:after {\n      visibility: hidden;\n      pointer-events: none;\n    }\n\n    /* Triangle hack */\n    :host:after {\n      position: absolute;\n      top: calc(100% - 5px);\n      left: 20px;\n      margin-left: -5px;\n      width: 0;\n      border-bottom: 5px solid rgba(0,0,0,0.6);\n      border-right: 5px solid transparent;\n      border-left: 5px solid transparent;\n      content: \" \";\n      font-size: 0;\n      line-height: 0;\n    }\n\n    :host:before {\n      position: absolute;\n      background-color: rgba(0,0,0,0.6);\n      color: white;\n      content: attr(data-tooltip);\n      padding: 4px 8px;\n      border-radius: 4px;\n      top: 100%;\n      z-index: 3;\n    }\n\n    :host:hover:after,\n    :host:hover:before {\n      visibility: visible;\n    }\n  </style>\n  <slot name=\"fileName\"></slot>\n  <button type=\"button\" id=\"remove\">&times;</button>\n`;\n\n// ShadyCSS polyfills scoped styles in browsers that don't support this\n// ShadowDOM feature.\nif (window.ShadyCSS) {\n  window.ShadyCSS.prepareTemplate(template, ELEMENT_NAME);\n}\n\nclass RunnerUploader__File extends HTMLElement {\n  static get elName() { return ELEMENT_NAME; }\n\n  constructor() {\n    super();\n    let shadowRoot = this.attachShadow({mode: 'open'});\n    shadowRoot.appendChild(template.content.cloneNode(true));\n  }\n\n  connectedCallback() {\n    this.shadowRoot.getElementById('remove').addEventListener('click', (evt) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n\n      this.dispatchEvent(\n        new CustomEvent(EVENTS.REMOVE_FILE, {\n          bubbles: true,\n          detail: { uuid: this.dataset.uuid }\n        })\n      );\n    });\n  }\n\n  static get observedAttributes() {\n    return ['locked'];\n  }\n\n  get locked() {\n    return this.hasAttribute('locked');\n  }\n\n  set locked(val) {\n    if (val) {\n      this.setAttribute('locked', '');\n    } else {\n      this.removeAttribute('locked');\n    }\n  }\n\n  static register() {\n    // Register the custom element to the DOM\n    if (!window.customElements.get(this.elName)) {\n      window.customElements.define(\n        this.elName,\n        this\n      );\n    }\n  }\n}\n\nRunnerUploader__File.register();\n","require('./__file'); // <runner-uploader--file> sub-component\nconst { EVENTS } = require('../../constants');\nconst { AsperaConnectService } = require('../../services/aspera_connect_service');\nconst { AsperaDragDropService } = require('../../services/aspera_drag_drop_service');\nconst { AsperaFileSerializer } = require('../../services/aspera_file_serializer');\nconst { AsperaUploadService } = require('../../services/aspera_upload_service');\nconst { FileUploadService } = require('../../services/file_upload_service');\nconst template = require('./template');\nconst ELEMENT_NAME = 'runner-uploader';\n\n// ShadyCSS polyfills scoped styles in browsers that don't support this\n// ShadowDOM feature.\nif (window.ShadyCSS) {\n  window.ShadyCSS.prepareTemplate(template, ELEMENT_NAME);\n}\n\nclass RunnerUploader extends HTMLElement {\n  /**\n   * Name of the HTML element\n   */\n  static get elName() { return ELEMENT_NAME; }\n\n  /**\n   * An instance of the element is created or upgraded. Useful for initializing\n   * state, settings up event listeners, or creating shadow dom. See the spec\n   * for restrictions on what you can do in the constructor.\n   */\n  constructor() {\n    super();\n    this.empty = true;\n    let shadowRoot = this.attachShadow({mode: 'open'});\n    shadowRoot.appendChild(template.content.cloneNode(true));\n  }\n\n  /**\n   * Called every time the element is inserted into the DOM. Useful for running\n   * setup code, such as fetching resources or rendering. Generally, you should\n   * try to delay work until this time.\n   */\n  connectedCallback() {\n    this._connectDragDrop();\n\n    const uploadButton = this.shadowRoot.getElementById('upload-button');\n    uploadButton.addEventListener('click', this.initiateUpload.bind(this));\n\n    const addFilesButton = this.shadowRoot.getElementById('add-files-button');\n    addFilesButton.addEventListener('click', this.addFiles.bind(this));\n\n    const addMoreButton = this.shadowRoot.getElementById('add-more-button');\n    addMoreButton.addEventListener('click', this.reset.bind(this));\n\n    this._filesList.addEventListener(EVENTS.REMOVE_FILE, (evt) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n\n      if (this.uploading) { return; }\n\n      let target = evt.target;\n\n      FileUploadService.removeFileByUUID(this.files, evt.detail.uuid).then(\n        () => {\n          target.remove();\n          this._emitFilesRemovedEvent();\n        }\n      );\n    });\n  }\n\n  /**\n   * Called every time the element is removed from the DOM. Useful for running\n   * clean up code.\n   */\n  disconnectedCallback() {\n    AsperaDragDropService.reset();\n  }\n\n  /**\n   * Elements can react to attribute changes by defining a\n   * attributeChangedCallback. The browser will call this method for every\n   * change to attributes listed in the observedAttributes array.\n   */\n  static get observedAttributes() {\n    return [\n      'destinationFolder',\n      'empty',\n      'error',\n      'incoming',\n      'uploading',\n      'uploadComplete'\n    ];\n  }\n\n  get destinationFolder() {\n    return this.getAttribute('destination-folder');\n  }\n\n  set destinationFolder(val) {\n    if (!val) {\n      this.removeAttribute('destination-folder');\n    } else {\n      if (!/\\d+/.test(val)) {\n        throw new Error(`[<${this.elName}>] destination-folder must be an integer`);\n      }\n      this.setAttribute('destination-folder', val);\n    }\n  }\n\n  get error() {\n    return this.hasAttribute('error');\n  }\n\n  set error(val) {\n    if (val) {\n      this.setAttribute('error', '');\n    } else {\n      this.removeAttribute('error');\n    }\n  }\n\n  get empty() {\n    return this.hasAttribute('empty');\n  }\n\n  set empty(val) {\n    if (val) {\n      this.setAttribute('empty', '');\n    } else {\n      this.removeAttribute('empty');\n    }\n  }\n\n  get folderIDs() {\n    if (!this._folderIDs) {\n      if (this.destinationFolder) {\n        this._folderIDs = [this.destinationFolder];\n      } else {\n        this._folderIDs = [];\n      }\n    }\n    return this._folderIDs;\n  }\n\n  set folderIDs(val) {\n    if (val.constructor.name !== 'Array' || !val.every(id => /\\d+/.test(id))) {\n      throw new Error(`[<${this.elName}>] folderIDs must be an Array of numbers`);\n    }\n    this.destinationFolder = undefined;\n    this._folderIDs = val;\n  }\n\n  get incoming() {\n    return this.hasAttribute('incoming');\n  }\n\n  set incoming(val) {\n    if (val) {\n      this.setAttribute('incoming', '');\n    } else {\n      this.removeAttribute('incoming');\n    }\n  }\n\n  get uploading() {\n    return this.hasAttribute('uploading');\n  }\n\n  set uploading(val) {\n    if (val) {\n      this.setAttribute('uploading', '');\n    } else {\n      this.removeAttribute('uploading');\n    }\n  }\n\n  get uploadComplete() {\n    return this.hasAttribute('upload-complete');\n  }\n\n  set uploadComplete(val) {\n    if (val) {\n      this.setAttribute('upload-complete', '');\n    } else {\n      this.removeAttribute('upload-complete');\n    }\n  }\n\n  get files() {\n    if (!this._files) {\n      this._files = [];\n    }\n    return this._files;\n  }\n\n\n  addFiles() {\n    AsperaConnectService.showFileUploadDialog((result) => {\n      this._addFilesFromAspera(result);\n    });\n  }\n\n  initiateUpload() {\n    if (this.uploading) { return; }\n    if (this.error) { this.error = false; }\n\n    this.dispatchEvent(new CustomEvent(EVENTS.UPLOAD_STARTED, {\n      bubbles: true,\n      detail: {\n        files: this.files,\n      }\n    }));\n    this.uploading = true;\n    Array.from(this._filesList.children).forEach(file => file.locked = true);\n    AsperaDragDropService.reset();\n\n    AsperaUploadService.upload(this.files, { folderIds: this.folderIDs }).then(\n      this._listenForTransferComplete.bind(this),\n      this._handleUploadFailure.bind(this)\n    );\n  }\n\n  reset() {\n    this._files = undefined;\n    Array.from(this._filesList.children).forEach(file => file.remove());\n    this.uploadComplete = false;\n    this.empty = true;\n    this._connectDragDrop();\n  }\n\n  _addFilesFromAspera(data) {\n    FileUploadService.addFiles(\n      this.files,\n      AsperaFileSerializer.serialize(data)\n    ).then(\n      (data) => { this._emitFilesAddedEvent(true, data); },\n      (error) => { this._emitFilesAddedEvent(false, error); },\n    );\n  }\n\n  _connectDragDrop() {\n    AsperaDragDropService.addTarget(this, {\n      dragEnter: [\n        () => { this.incoming = true; }\n      ],\n      dragLeave: [\n        () => { this.incoming = false; }\n      ],\n      drop: [\n        (dragObject) => {\n          this.incoming = false;\n          this._addFilesFromAspera(dragObject);\n        }\n      ]\n    });\n  }\n\n  _handleUploadFailure() {\n    this.dispatchEvent(new CustomEvent(EVENTS.UPLOAD_FAILED, {\n      bubbles: true,\n      detail: {\n        currentFiles: this.files,\n      }\n    }));\n    this.uploading = false;\n    Array.from(this._filesList.children).forEach(file => file.locked = false);\n    this._connectDragDrop();\n    this.error = true;\n  }\n\n  _emitFilesAddedEvent(success, data) {\n    this._fileChangeHandler();\n    this.dispatchEvent(\n      new CustomEvent(EVENTS.FILES_ADDED, {\n        detail: Object.assign({ success }, data),\n        bubbles: true,\n      })\n    );\n  }\n\n  _emitFilesRemovedEvent() {\n    this.dispatchEvent(\n      new CustomEvent(EVENTS.FILES_REMOVED, {\n        detail: { currentFiles: this.files },\n        bubbles: true,\n      })\n    );\n  }\n\n  _listenForTransferComplete(transferInfo) {\n    let requestID = transferInfo.data.connection_settings.request_id;\n    let listener = (transferCompleteInfo) => {\n      if (transferCompleteInfo.token === requestID && transferCompleteInfo.isBatchComplete) {\n        this._uploadComplete();\n\n        let listenerIdx = AsperaConnectService.eventCallbacks.transferComplete.indexOf(listener);\n        AsperaConnectService.eventCallbacks.transferComplete.splice(listenerIdx, 1);\n      }\n    };\n    AsperaConnectService.eventCallbacks.transferComplete.push(listener);\n  }\n\n  _uploadComplete() {\n    this.dispatchEvent(new CustomEvent(EVENTS.UPLOAD_COMPLETE, {\n      bubbles: true,\n      detail: {\n        currentFiles: this.files,\n      }\n    }));\n\n    this.uploading = false;\n    this.uploadComplete = true;\n  }\n\n  _fileChangeHandler() {\n    let renderedUUIDs = Array.from(this._filesList.children).map(li => li.dataset.uuid);\n    this.files.forEach(file => {\n      if (!renderedUUIDs.includes(file.uuid)) {\n        let fileEl = document.createElement('runner-uploader--file');\n        fileEl.innerHTML = `<span slot=\"fileName\">${file.fileName}</span>`;\n        fileEl.dataset.uuid = file.uuid;\n        fileEl.dataset.tooltip = file.fullFilePath;\n        this._filesList.prepend(fileEl);\n      }\n    });\n    this.empty = !this.files.length;\n  }\n\n  get _filesList() {\n    if (!this._filesListEl) {\n      this._filesListEl = this.shadowRoot.getElementById('files-list');\n    }\n    return this._filesListEl;\n  }\n\n  static register() {\n    // Register the custom element to the DOM\n    if (!window.customElements.get(this.elName)) {\n      window.customElements.define(\n        this.elName,\n        this\n      );\n    }\n  }\n}\n\nRunnerUploader.register();\n\nmodule.exports = { RunnerUploader };\n","const RunnerClient = require('../../index');\nconst ELEMENT_NAME = 'runner-client-configuration';\n\nclass RunnerClientConfiguration extends HTMLElement {\n  static get elName() { return ELEMENT_NAME; }\n\n  static get observedAttributes() {\n    return [\n      'token',\n      'method',\n      'environment',\n      'locale',\n      'logLevel'\n    ];\n  }\n\n  connectedCallback() {\n    this.configureClient();\n  }\n\n  configureClient() {\n    RunnerClient.configure({\n      authentication: {\n        method: this.method,\n        token: this.token,\n      },\n      environment: this.environment,\n      locale: this.locale,\n      logLevel: this.logLevel\n    });\n  }\n\n  get method() {\n    return this.getAttribute('method');\n  }\n\n  set method(val) {\n    if (val) {\n      this.setAttribute('method', val);\n    } else {\n      this.removeAttribute('method');\n    }\n    this.configureClient();\n  }\n\n  get token() {\n    return this.getAttribute('token');\n  }\n\n  set token(val) {\n    if (val) {\n      this.setAttribute('token', val);\n    } else {\n      this.removeAttribute('token');\n    }\n    this.configureClient();\n  }\n\n  get environment() {\n    return this.getAttribute('environment');\n  }\n\n  set environment(val) {\n    if (val) {\n      this.setAttribute('environment', val);\n    } else {\n      this.removeAttribute('environment');\n    }\n    this.configureClient();\n  }\n\n  get locale() {\n    return this.getAttribute('locale');\n  }\n\n  set locale(val) {\n    if (val) {\n      this.setAttribute('locale', val);\n    } else {\n      this.removeAttribute('locale');\n    }\n    this.configureClient();\n  }\n\n  get logLevel() {\n    return this.getAttribute('log-level');\n  }\n\n  set logLevel(val) {\n    if (val) {\n      this.setAttribute('log-level', val);\n    } else {\n      this.removeAttribute('log-level');\n    }\n    this.configureClient();\n  }\n\n  static register() {\n    // Register the custom element to the DOM\n    if (!window.customElements.get(this.elName)) {\n      window.customElements.define(\n        this.elName,\n        this\n      );\n    }\n  }\n}\n\nRunnerClientConfiguration.register();\n\nmodule.exports = { RunnerClientConfiguration };\n"],"sourceRoot":""}