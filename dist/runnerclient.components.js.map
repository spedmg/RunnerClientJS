{"version":3,"sources":["webpack://RunnerClient/./src/components.js","webpack://RunnerClient/./src/services/translation_service.js","webpack://RunnerClient/./src/services/file_validation_service.js","webpack://RunnerClient/./src/services/log_service.js","webpack://RunnerClient/./src/services/aspera_connect_service.js","webpack://RunnerClient/./src/services/file_factory.js","webpack://RunnerClient/./src/services/file_name_validation_service.js","webpack://RunnerClient/./src/components/runner_thumbnail_updater/template.js","webpack://RunnerClient/./src/services/thumbnail_replacement_service.js","webpack://RunnerClient/./src/components/runner_thumbnail_updater/component.js","webpack://RunnerClient/./src/components/runner_uploader/template.js","webpack://RunnerClient/./src/services/thumbnail_validation_service.js","webpack://RunnerClient/./src/services/file_upload_service.js","webpack://RunnerClient/./src/services/package_manifest_service.js","webpack://RunnerClient/./src/services/aspera_transfer_spec_formatter_service.js","webpack://RunnerClient/./src/services/aspera_upload_service.js","webpack://RunnerClient/./src/services/aspera_file_serializer.js","webpack://RunnerClient/./src/services/aspera_drag_drop_service.js","webpack://RunnerClient/./src/components/runner_uploader/__file.js","webpack://RunnerClient/./src/components/runner_uploader/component.js","webpack://RunnerClient/./src/components/runner_client_config/component.js"],"names":["RunnerClientConfiguration","__webpack_require__","RunnerUploader","RunnerThumbnailUpdater","module","exports","I18n","Config","translations","TranslationService","_i18n","this","i18n","_configureI18n","t","apply","arguments","locale","FileValidationService","fileName","toLowerCase","match","filePath","replace","LogService","_console","logLevelInt","console","info","_console2","warn","_console3","log","DEFAULT_EVENT_CALLBACKS","transfer","transferComplete","status","start","AsperaConnectService","id","Math","floor","random","_connect","window","AW4","Connect","dragDropEnabled","minVersion","connectInstaller","ConnectInstaller","addEventListener","EVENT","STATUS","_handleAsperaEvent","bind","initSession","activeTransfers","uploadBatchCount","transferSpecs","connectionSettings","_this","connect","TRANSFER","allPromises","tokens","forEach","transferSpec","promise","Promise","resolve","reject","result","startTransfer","success","error","push","request_id","_executeEventListenersFor","all","successCallback","showSelectFileDialog","showSelectFolderDialog","eventName","eventData","_handleAsperaStatusEvent","_handleAsperaTransferEvent","eventCallbacks","cb","INITIALIZING","RETRYING","showLaunching","FAILED","showDownload","OUTDATED","showUpdate","RUNNING","connected","_this2","transfers","transfer_spec","data","_getTransferDataFor","percentage","splice","index","length","token","isBatchComplete","hasActiveTransfers","_removeTransferListener","hasOwnProperty","aspera_connect_settings","indexOf","removeEventListener","_eventCallbacks","Object","assign","initialize","keys","FileNameValidationService","ThumbnailValidationService","uuid","FileFactory","file","_classCallCheck","getFileName","name","fullFilePath","processing","size","fileObj","hasValidCharacters","containsValidCharacters","hasExtension","containsExtension","hasValidExtension","containsValidExtension","valid","doesNotRequireExtension","validThumbnail","validFile","UNSUPPORTED_FILE_EXTENSIONS","test","getExtension","includes","TRANSLATION_SCOPE","scope","key","translate","template","document","createElement","innerHTML","API","axios","ThumbnailReplacementService","assetItemID","replaceThumbnail","then","response","debug","mcsId","mcs_id","_uploadImageToMCS","mcsResponse","thumbnail","thumbnails","find","type","thumbnail_url","location","FormData","append","request","url","method","headers","Authorization","onUploadProgress","evt","EVENTS","ELEMENT_NAME","ShadyCSS","prepareTemplate","_possibleConstructorReturn","__proto__","getPrototypeOf","call","empty","attachShadow","mode","appendChild","content","cloneNode","_addEventListeners","_dragEnterListener","preventDefault","stopPropagation","incoming","_dragLeaveListener","_dragOverListener","_dropListener","_handleDrop","uploadBtn","shadowRoot","getElementById","_uploadClickListener","_beginUpload","addFileBtn","_addFilesClickListener","click","fileInput","_fileAddedListener","_handleFileAdded","_this3","errors","uploading","promises","assetItemIDs","map","replaceThumbnailFor","results","bulkUpdateAssetItems","uploadComplete","_emitUploadCompleteEvent","catch","err","_setErrorMessage","_emitUploadFailedEvent","dispatchEvent","CustomEvent","UPLOAD_COMPLETE","bubbles","detail","filename","UPLOAD_FAILED","event","files","dataTransfer","_setPreview","target","errMsg","errText","innerText","_this4","previewContainer","children","Array","from","el","remove","progressEl","reader","FileReader","onprogress","max","total","value","loaded","onload","img","src","onerror","readAsDataURL","getAttribute","val","Error","elName","setAttribute","removeAttribute","_assetItemIDs","constructor","every","undefined","hasAttribute","customElements","get","define","register","Utils","BROWSER","EDGE","VALID_THUMBNAIL_FILE_EXTENSIONS","MAX_THUMBNAIL_SIZE","fileSize","isValidFileSize","MAX_UPLOAD_COUNT","FileUploadService","currentFiles","fileList","removeDuplicates","_toConsumableArray","filesAdded","newFileList","existingFileNames","uniqueFileList","ffile","fileIdx","findIndex","PackageManifestService","asperaTransferEventData","packageTransferSpecs","path","paths","source","found","asset_item_id","custom_metadata_fields","manifestForFiles","category","label","fullFolderPath","roots","tree","_folderNameFromFullFolderPath","count","components","split","component","_isValid","child","nodeChildren","node","_removeEmptyChildren","manifestFor","manifest","numberOfFiles","numberOfFolders","sorted","processLevel","level","pathComponents","items","levels","item","_hasNonFolderChild","processed","_sort","concat","join","firstTwoCharacters","collection","sort","a","b","lowerNameA","lowerNameB","cloneDeep","AsperaTransferSpecFormatterService","uploadResponseData","nonPackageTransferSpec","packageIndex","fileIndex","packageMappings","package_transfer_specs","isFolder","packageTransferSpec","AsperaUploadService","options","attrs","package","fetchFolderContentsFromDragDropEvent","upload","formatted","asperaConnectService","connection_settings","activeUploads","assetItemAttrsCollection","ingestBatchId","ingest_batch_id","activeUpload","manifestForAsperaTransferEventData","completeIngestBatchUpload","_activeUploads","_asperaConnectService","_onTransferComplete","AsperaFileSerializer","dragDropManifestGrouping","fileNameComponents","dragEnter","dragLeave","dragOver","drop","AsperaDragDropService","callbacks","registerAll","_dragEnterCallback","dragEnterCallback","_dragLeaveCallback","dragLeaveCallback","_dragOverCallback","dragOverCallback","_dropCallback","dropCallback","_target","_executeEventCallbacksFor","filesDropped","i","fileObject","lastModifiedDate","_groupedFolderContents","manifestGrouping","connectHttpRequest","HTTP_METHOD","POST","SESSION_ID","entries","entry","isDirectory","createReader","readResolve","readReject","readEntries","childEntries","childReadPromise","_collectFiles","fullPath","grouping","_loop","fsEntry","webkitGetAsEntry","dirResolve","dirReject","dirPromise","RunnerUploader__File","REMOVE_FILE","dataset","_connectDragDrop","initiateUpload","addFiles","reset","_filesList","removeFileByUUID","_emitFilesRemovedEvent","showFileUploadDialog","_addFilesFromAspera","UPLOAD_STARTED","locked","folderIds","folderIDs","_listenForTransferComplete","_handleUploadFailure","_files","serialize","_emitFilesAddedEvent","_this5","addTarget","dragObject","_fileChangeHandler","FILES_ADDED","FILES_REMOVED","transferInfo","_this6","requestID","listener","transferCompleteInfo","_uploadComplete","listenerIdx","_this7","renderedUUIDs","li","fileEl","tooltip","prepend","_folderIDs","destinationFolder","_filesListEl","RunnerClient","configureClient","configure","authentication","environment","logLevel"],"mappings":"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","file":"runnerclient.components.js","sourcesContent":["const { RunnerClientConfiguration } = require('./components/runner_client_config/component');\nconst { RunnerUploader } = require('./components/runner_uploader/component');\nconst { RunnerThumbnailUpdater } = require('./components/runner_thumbnail_updater/component');\n\nmodule.exports = {\n  RunnerClientConfiguration,\n  RunnerThumbnailUpdater,\n  RunnerUploader\n};\n","const I18n = require('i18n-js');\nconst { Config } = require('../config');\nconst translations = require('../translations.js');\n\nclass TranslationService {\n  static translate(...args) {\n    if (!this.i18n) {\n      this._configureI18n();\n    }\n    return this.i18n.t(...args);\n  }\n\n  static _configureI18n() {\n    I18n.translations = translations;\n    I18n.locale = Config.locale;\n    this.i18n = I18n;\n  }\n}\n\nmodule.exports = { TranslationService };\n","class FileValidationService {\n  static getExtension(fileName) {\n    return (fileName.toLowerCase().match(/^[^.].*(\\.\\w+)$/) || [])[1];\n  }\n\n  static getFileName(filePath) {\n    return filePath.replace(/^[\\w\\W]*[/\\\\]/, '');\n  }\n}\n\nmodule.exports = { FileValidationService };\n","/* eslint no-console: \"off\" */\nconst { Config } = require('../config');\n\nclass LogService {\n  static info(...args) {\n    if (Config.logLevelInt >= 2) {\n      console.info(...args);\n    }\n  }\n\n  static warn(...args) {\n    if (Config.logLevelInt >= 1) {\n      console.warn(...args);\n    }\n  }\n\n  static debug(...args) {\n    if (Config.logLevelInt >= 3) {\n      console.log(...args);\n    }\n  }\n}\n\nmodule.exports = { LogService };\n","const REQUIRED_ASPERA_VERSION = '3.8.0';\nconst DEFAULT_EVENT_CALLBACKS = {\n  transfer: [],\n  transferComplete: [],\n  status: [],\n  start: []\n};\n\nclass AsperaConnectService {\n  static initialize() {\n    let id = `RunnerClient${Math.floor(Math.random() * 10000)}`;\n    this._connect = new window.AW4.Connect({\n      id: id,\n      dragDropEnabled: true,\n      minVersion: REQUIRED_ASPERA_VERSION\n    });\n    this.connectInstaller = new window.AW4.ConnectInstaller();\n    this._connect.addEventListener(window.AW4.Connect.EVENT.STATUS, this._handleAsperaEvent.bind(this));\n    this._connect.initSession(id);\n\n    this.activeTransfers = {};\n    this.uploadBatchCount = 0;\n  }\n\n  static set eventCallbacks(eventCallbacks) {\n    this._eventCallbacks = Object.assign({}, DEFAULT_EVENT_CALLBACKS, eventCallbacks);\n  }\n\n  static get eventCallbacks() {\n    if (!this._eventCallbacks) {\n      this._eventCallbacks = Object.assign({}, DEFAULT_EVENT_CALLBACKS);\n    }\n    return this._eventCallbacks;\n  }\n\n  static get connect() {\n    if (!this._connect) {\n      this.initialize();\n    }\n    return this._connect;\n  }\n\n  static start(transferSpecs, connectionSettings) {\n    this.connect.addEventListener(window.AW4.Connect.EVENT.TRANSFER, this._handleAsperaEvent.bind(this));\n\n    let allPromises = [];\n    let tokens      = [];\n\n    transferSpecs.forEach((transferSpec) => {\n      let promise = new Promise((resolve, reject) => {\n        let result = this.connect.startTransfer(transferSpec, connectionSettings, {\n          success: resolve,\n          error: reject\n        });\n\n        if (result.error) {\n          reject(result.error);\n        } else {\n          tokens.push(result.request_id);\n          this._executeEventListenersFor('start', result);\n        }\n      });\n      allPromises.push(promise);\n    });\n\n    this.uploadBatchCount += 1;\n    this.activeTransfers[this.uploadBatchCount] = tokens;\n\n    return { id: this.uploadBatchCount, promise: Promise.all(allPromises) };\n  }\n\n  static showFileUploadDialog(successCallback) {\n    this.connect.showSelectFileDialog({\n      success: successCallback\n    });\n  }\n\n  static showFolderUploadDialog(successCallback) {\n    this.connect.showSelectFolderDialog({\n      success: successCallback\n    });\n  }\n\n  static _handleAsperaEvent(eventName, eventData) {\n    if (eventName === window.AW4.Connect.EVENT.STATUS)   { this._handleAsperaStatusEvent(eventData); }\n    if (eventName === window.AW4.Connect.EVENT.TRANSFER) { this._handleAsperaTransferEvent(eventData); }\n  }\n\n  static _executeEventListenersFor(eventName, eventData) {\n    this.eventCallbacks[eventName].forEach(cb => cb(eventData));\n  }\n\n  static _handleAsperaStatusEvent(eventData) {\n    this._executeEventListenersFor('status', eventData);\n\n    switch(eventData) {\n    case window.AW4.Connect.STATUS.INITIALIZING:\n    case window.AW4.Connect.STATUS.RETRYING:\n      this.connectInstaller.showLaunching();\n      break;\n    case window.AW4.Connect.STATUS.FAILED:\n      this.connectInstaller.showDownload();\n      break;\n    case window.AW4.Connect.STATUS.OUTDATED:\n      this.connectInstaller.showUpdate();\n      break;\n    case window.AW4.Connect.STATUS.RUNNING:\n      this.connectInstaller.connected();\n      break;\n    }\n  }\n\n  static _handleAsperaTransferEvent(eventData) {\n    eventData.transfers.forEach((transfer) => {\n      if (transfer.transfer_spec) {\n        this._executeEventListenersFor('transfer', transfer);\n\n        let data = this._getTransferDataFor(transfer);\n        if (data) {\n          if (transfer.percentage === 1) {\n            let tokens = this.activeTransfers[data.id];\n            tokens.splice(data.index, 1);\n\n            if (tokens.length === 0) {\n              delete(this.activeTransfers[data.id]);\n            }\n\n            this._executeEventListenersFor('transferComplete', {\n              transfer: transfer,\n              id: data.id,\n              token: data.token,\n              isBatchComplete: !tokens.length\n            });\n          }\n        }\n      }\n    });\n\n    if (!this.hasActiveTransfers) { this._removeTransferListener(); }\n  }\n\n  static get hasActiveTransfers() {\n    return !!Object.keys(this.activeTransfers).length;\n  }\n\n  static _getTransferDataFor(transfer) {\n    for (let id in this.activeTransfers) {\n      if (!this.activeTransfers.hasOwnProperty(id)) { continue; }\n\n      let tokens = this.activeTransfers[id];\n      if (tokens) {\n        let token = transfer.aspera_connect_settings.request_id;\n        let index = tokens.indexOf(token);\n        if (index !== -1) { return { id: id, token: token, index: index }; }\n      }\n    }\n  }\n\n  static _removeTransferListener() {\n    this.connect.removeEventListener(window.AW4.Connect.EVENT.TRANSFER);\n  }\n}\n\nmodule.exports = { AsperaConnectService };\n","const { FileNameValidationService } = require('./file_name_validation_service');\nconst { FileValidationService } = require('./file_validation_service');\nconst { ThumbnailValidationService } = require('./thumbnail_validation_service');\nconst uuid = require('uuid/v4');\n\nclass FileFactory {\n  constructor(file) {\n    this.fileName = FileValidationService.getFileName(file.name);\n    this.fullFilePath = file.name;\n    this.processing = false;\n    this.size = file.size;\n    this.fileObj = file;\n    this.uuid = uuid();\n\n    this.hasValidCharacters = FileNameValidationService.containsValidCharacters(this.fileName);\n    this.hasExtension = FileNameValidationService.containsExtension(this.fileName);\n    this.hasValidExtension = FileNameValidationService.containsValidExtension(this.fileName);\n\n    this.valid = function () {\n      return FileNameValidationService.valid(this.fileName, this.fileObj.doesNotRequireExtension);\n    };\n\n    this.validThumbnail = function () {\n      let validFile = this.valid();\n      let validThumbnail = ThumbnailValidationService.valid(file);\n\n      return validFile && validThumbnail;\n    };\n  }\n}\n\nmodule.exports = { FileFactory };\n","const { UNSUPPORTED_FILE_EXTENSIONS } = require('../constants');\nconst { FileValidationService } = require('./file_validation_service');\n\nclass FileNameValidationService {\n  static containsValidCharacters(fileName) {\n    return !(/:|\\/|\"|;|'|\\?|!|>|<|&|\\||\\*|@/.test(fileName));\n  }\n\n  static containsExtension(fileName) {\n    return !!FileValidationService.getExtension(fileName);\n  }\n\n  static containsValidExtension(fileName) {\n    return !UNSUPPORTED_FILE_EXTENSIONS.includes(FileValidationService.getExtension(fileName));\n  }\n\n  static valid(fileName, doesNotRequireExtension) {\n    if (doesNotRequireExtension) {\n      return this.containsValidCharacters(fileName);\n    } else {\n      return (this.containsValidCharacters(fileName) &&\n      this.containsExtension(fileName) &&\n      this.containsValidExtension(fileName));\n    }\n  }\n}\n\nmodule.exports = { FileNameValidationService };\n","const { TranslationService } = require('../../services/translation_service');\nconst TRANSLATION_SCOPE = { scope: 'RunnerThumbnailUpdater' };\nconst t = (key) => {\n  return TranslationService.translate(key, TRANSLATION_SCOPE);\n};\n\nconst template = document.createElement('template');\ntemplate.innerHTML = `\n  <style>\n    :host {\n      display: flex;\n      flex-direction: column;\n      position: relative;\n      border: 1px solid #999;\n      height: 500px;\n      width: 100%;\n    }\n\n    :host > * {\n      box-sizing: border-box;\n    }\n\n    :host([incoming][empty]) #incoming {\n      display: flex;\n    }\n\n    :host([incoming][empty]) #empty-dropzone {\n      display: none;\n    }\n\n    :host([empty]) #upload-button {\n      display: none;\n    }\n    :host([empty]) #empty-dropzone {\n      display: -ms-flexbox;\n      display: flex;\n    }\n\n    :host #preview {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      flex: 1 0 0.1px;\n    }\n\n    :host #preview img {\n      flex: 0 1 0.01px;\n      max-height: 100%;\n    }\n\n    :host #empty-dropzone {\n      display: none;\n      height: 100%;\n      justify-content: center;\n      align-items: center;\n      flex-direction: column;\n    }\n\n    :host #incoming {\n      align-items: center;\n      display: none;\n      height: 100%;\n      justify-content: center;\n      position: absolute;\n      width: 100%;\n      z-index: 10;\n    }\n\n    :host #error,\n    :host #uploading,\n    :host #upload-complete {\n      display: none;\n      flex: 1;\n      justify-content: space-between;\n    }\n\n    :host([error]) #error {\n      display: flex;\n    }\n\n    :host([uploading]) #uploading {\n      display: flex;\n    }\n    :host([uploading]) #upload-button,\n    :host([uploading]) #add-file-button {\n      display: none;\n    }\n\n    :host([upload-complete]) #upload-complete {\n      display: flex;\n    }\n    :host([upload-complete]) #upload-button,\n    :host([upload-complete]) #add-file-button {\n      display: none;\n    }\n\n    :host #add-file-input {\n      display: none;\n    }\n\n    :host footer {\n      background: rgba(0, 0, 0, 0.1);\n      width: 100%;\n      padding: 8px;\n      display: flex;\n      justify-content: flex-end;\n    }\n\n    :host footer span {\n      flex: 1;\n    }\n  </style>\n\n  <div id=\"empty-dropzone\">\n    <slot name=\"emptyDropzone\">\n      <h1>${t('emptyHeadingText')}</h1>\n      <h2>${t('emptySubheadingText')}</h2>\n      <h3>${t('emptyAdditionalText')}</h3>\n    </slot>\n  </div>\n\n  <div id=\"incoming\">\n    <slot name=\"incoming\">\n      <h1>${t('incoming')}</h1>\n    </slot>\n  </div>\n\n  <div id=\"preview\"></div>\n\n  <footer>\n    <div id=\"error\">\n      <slot name=\"error\">\n        <span id=\"error-message\">${t('error')}</span>\n      </slot>\n    </div>\n\n    <div id=\"uploading\">\n      <slot name=\"uploading\">\n        <span>${t('uploading')}</span>\n      </slot>\n    </div>\n\n    <div id=\"upload-complete\">\n      <slot name=\"uploadComplete\">\n        <span>${t('uploadComplete')}</span>\n      </slot>\n    </div>\n\n    <slot name=\"addFileButton\">\n      <button type=\"button\" id=\"add-file-button\">${t('addFile')}</button>\n      <input type=\"file\" id=\"add-file-input\" />\n    </slot>\n\n    <slot name=\"uploadButton\">\n      <button type=\"button\" id=\"upload-button\">${t('upload')}</button>\n    </slot>\n  </footer>\n`;\n\nmodule.exports = template;\n","const { API } = require('../api');\nconst { LogService } = require('./log_service');\nconst axios = require('axios');\n\nclass ThumbnailReplacementService {\n  static replaceThumbnailFor(assetItemID, file) {\n    // Fetch delegate token from runner\n    return API.replaceThumbnail(assetItemID, file.fileName)\n      .then((response) => {\n        LogService.debug(`[${this.name}] Delegate token recieved`, response);\n        const token = response.data.token;\n        const mcsId = response.data.mcs_id;\n        // Upload the image to MCS\n        return this._uploadImageToMCS(mcsId, token, file.fileObj);\n      })\n      .then((mcsResponse) => {\n        let thumbnail = mcsResponse.data.thumbnails.find(t => t.type === 'small');\n        return {\n          id: assetItemID,\n          thumbnail_url: thumbnail.location\n        };\n      });\n  }\n\n  static _uploadImageToMCS(mcsId, token, file) {\n    const data = new FormData();\n    data.append('file', file);\n\n    return axios.request({\n      url: `https://io.cimediacloud.com/assets/${mcsId}/coverelement/upload`,\n      method: 'post',\n      data: data,\n      headers: {\n        'Authorization': `Bearer ${token}`,\n      },\n      onUploadProgress: (evt) => { LogService.debug(`[${this.name}] Upload Progress`, evt); }\n    });\n  }\n}\n\nmodule.exports = { ThumbnailReplacementService };\n","// Base element for <runner-uploader> and <runner-thumbnail-updater>\nconst { API } = require('../../api');\nconst { FileFactory } = require('../../services/file_factory');\nconst { LogService } = require('../../services/log_service');\nconst { ThumbnailReplacementService } = require('../../services/thumbnail_replacement_service');\nconst { TranslationService } = require('../../services/translation_service');\nconst TRANSLATION_SCOPE = { scope: 'RunnerThumbnailUpdater' };\nconst { EVENTS } = require('../../constants');\nconst ELEMENT_NAME = 'runner-thumbnail-updater';\nconst template = require('./template');\nif (window.ShadyCSS) {\n  window.ShadyCSS.prepareTemplate(template, ELEMENT_NAME);\n}\n\nclass RunnerThumbnailUpdater extends HTMLElement {\n  static get elName() { return ELEMENT_NAME; }\n\n  constructor() {\n    super();\n    this.empty = true;\n    let shadowRoot = this.attachShadow({mode: 'open'});\n    shadowRoot.appendChild(template.content.cloneNode(true));\n  }\n\n  connectedCallback() {\n    this._addEventListeners();\n  }\n\n  static get observedAttributes() {\n    return [\n      'assetItemID',\n      'empty',\n      'error',\n      'incoming',\n      'uploading',\n      'uploadComplete'\n    ];\n  }\n\n  get assetItemID() {\n    return this.getAttribute('asset-item-id');\n  }\n\n  set assetItemID(val) {\n    if (!val) {\n      this.removeAttribute('asset-item-id');\n    } else {\n      if (!/\\d+/.test(val)) {\n        throw new Error(`[<${this.elName}>] asset-item-id must be an integer`);\n      }\n      this.setAttribute('asset-item-id', val);\n    }\n  }\n\n  get assetItemIDs() {\n    if (!this._assetItemIDs) {\n      if (this.assetItemID) {\n        this._assetItemIDs = [this.assetItemID];\n      } else {\n        this._assetItemIDs = [];\n      }\n    }\n    return this._assetItemIDs;\n  }\n\n  set assetItemIDs(val) {\n    if (val.constructor.name !== 'Array' || !val.every(id => /\\d+/.test(id))) {\n      throw new Error(`[<${this.elName}>] assetItemIDs must be an Array of numbers`);\n    }\n    this.assetItemID = undefined;\n    this._assetItemIDs = val;\n  }\n\n\n  get empty() {\n    return this.hasAttribute('empty');\n  }\n\n  set empty(val) {\n    if (val) {\n      this.setAttribute('empty', '');\n    } else {\n      this.removeAttribute('empty');\n    }\n  }\n\n  get error() {\n    return this.hasAttribute('error');\n  }\n\n  set error(val) {\n    if (val) {\n      this.setAttribute('error', '');\n    } else {\n      this.removeAttribute('error');\n    }\n  }\n\n  get incoming() {\n    return this.hasAttribute('incoming');\n  }\n\n  set incoming(val) {\n    if (val) {\n      this.setAttribute('incoming', '');\n    } else {\n      this.removeAttribute('incoming');\n    }\n  }\n\n  get uploading() {\n    return this.hasAttribute('uploading');\n  }\n\n  set uploading(val) {\n    if (val) {\n      this.setAttribute('uploading', '');\n    } else {\n      this.removeAttribute('uploading');\n    }\n  }\n\n  get uploadComplete() {\n    return this.hasAttribute('upload-complete');\n  }\n\n  set uploadComplete(val) {\n    if (val) {\n      this.setAttribute('upload-complete', '');\n    } else {\n      this.removeAttribute('upload-complete');\n    }\n  }\n\n  _addEventListeners() {\n    // Drag-drop setup\n    this._dragEnterListener = ((evt) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n      this.incoming = true;\n    }).bind(this);\n    this._dragLeaveListener = ((evt) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n      this.incoming = false;\n    }).bind(this);\n    this._dragOverListener = ((evt) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n    }).bind(this);\n    this._dropListener = ((evt) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n      this.incoming = false;\n      this._handleDrop(evt);\n    }).bind(this);\n\n    this.addEventListener('dragenter', this._dragEnterListener);\n    this.addEventListener('dragleave', this._dragLeaveListener);\n    this.addEventListener('dragover', this._dragOverListener);\n    this.addEventListener('drop', this._dropListener);\n\n    // \"Upload\" button setup\n    const uploadBtn = this.shadowRoot.getElementById('upload-button');\n    this._uploadClickListener = ((evt) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n      this._beginUpload();\n    }).bind(this);\n    uploadBtn.addEventListener('click', this._uploadClickListener);\n\n    // \"Add File\" button\n    const addFileBtn = this.shadowRoot.getElementById('add-file-button');\n    this._addFilesClickListener = ((evt) => {\n      evt.stopPropagation();\n      evt.preventDefault();\n      this.shadowRoot.getElementById('add-file-input').click();\n    }).bind(this);\n    addFileBtn.addEventListener('click', this._addFilesClickListener);\n\n    // File added via input\n    const fileInput = this.shadowRoot.getElementById('add-file-input');\n    this._fileAddedListener = ((evt) => {\n      evt.stopPropagation();\n      evt.preventDefault();\n      this._handleFileAdded(evt);\n    }).bind(this);\n    fileInput.addEventListener('change', this._fileAddedListener);\n  }\n\n  _beginUpload() {\n    this.errors = false;\n    this.uploading = true;\n    let promises = this.assetItemIDs.map(assetItemID => {\n      return ThumbnailReplacementService.replaceThumbnailFor(assetItemID, this.file);\n    });\n    Promise.all(promises).then(\n      (results) => {\n        return API.bulkUpdateAssetItems(results);\n      }\n    ).then(\n      () => {\n        this.uploading = false;\n        this.uploadComplete = true;\n        this._emitUploadCompleteEvent();\n      }\n    ).catch(\n      (err) => {\n        this.uploading = false;\n        LogService.warn(`[${ELEMENT_NAME}] Failed to update thumbnail!`, err);\n        this._setErrorMessage('error');\n        this._emitUploadFailedEvent(err);\n      }\n    );\n  }\n\n  _emitUploadCompleteEvent() {\n    this.dispatchEvent(\n      new CustomEvent(EVENTS.UPLOAD_COMPLETE, {\n        bubbles: true,\n        detail: {\n          assetItemIDs: this.assetItemIDs,\n          filename: this.file.fileName\n        }\n      })\n    );\n  }\n\n  _emitUploadFailedEvent(error) {\n    this.dispatchEvent(\n      new CustomEvent(EVENTS.UPLOAD_FAILED, {\n        bubbles: true,\n        detail: {\n          assetItemIDs: this.assetItemIDs,\n          filename: this.file.fileName,\n          error: error\n        }\n      })\n    );\n  }\n\n  _handleDrop(event) {\n    LogService.debug(`[${ELEMENT_NAME}] Drop event recieved`, event);\n    this.error = false;\n    let files = event.dataTransfer.files;\n    if (files.length > 1) {\n      this._setErrorMessage('tooMany');\n      return;\n    }\n\n    let file = new FileFactory(files[0]);\n    if (!file.validThumbnail()) {\n      this._setErrorMessage('invalidFile');\n      return;\n    }\n\n    this.file = file;\n    this._setPreview(file);\n  }\n\n  _handleFileAdded(event) {\n    LogService.debug(`[${ELEMENT_NAME}] File added via input`, event);\n    this.error = false;\n\n    let file = new FileFactory(event.target.files[0]);\n    if (!file.validThumbnail()) {\n      this._setErrorMessage('invalidFile');\n      return;\n    }\n\n    this.file = file;\n    this._setPreview(file);\n  }\n\n  _setErrorMessage(key) {\n    let errMsg = this.shadowRoot.getElementById('error-message');\n    let errText = TranslationService.translate(key, TRANSLATION_SCOPE);\n    errMsg.innerText = errText;\n    this.error = true;\n  }\n\n  _setPreview(file) {\n    this.empty = false;\n\n    let previewContainer = this.shadowRoot.getElementById('preview');\n    if (previewContainer.children.length) {\n      Array.from(previewContainer.children).forEach(el => el.remove());\n    }\n    let progressEl = document.createElement('progress');\n    previewContainer.appendChild(progressEl);\n\n    let reader = new FileReader();\n    reader.onprogress = (evt) => {\n      LogService.debug(`[${ELEMENT_NAME}] FileReader progress`, evt);\n      progressEl.max = evt.total;\n      progressEl.value = evt.loaded;\n    };\n\n    reader.onload = (evt) => {\n      LogService.debug(`[${ELEMENT_NAME}] FileReader loaded`, evt);\n      progressEl.remove();\n      let img = document.createElement('img');\n      img.src = reader.result;\n      previewContainer.appendChild(img);\n    };\n\n    reader.onerror = (evt) => {\n      LogService.warn(`[${ELEMENT_NAME}] FileReader load error`, evt);\n      this.empty = true;\n      this._setErrorMessage('fileReadFailed');\n    };\n\n    reader.readAsDataURL(file.fileObj);\n  }\n\n  static register() {\n    // Register the custom element to the DOM\n    if (!window.customElements.get(this.elName)) {\n      window.customElements.define(\n        this.elName,\n        this\n      );\n    }\n  }\n}\n\nRunnerThumbnailUpdater.register();\n\nmodule.exports = { RunnerThumbnailUpdater };\n","const { TranslationService } = require('../../services/translation_service');\n\nconst isEdge = window.AW4.Utils.BROWSER.EDGE;\nconst TRANSLATION_SCOPE = { scope: isEdge ? 'RunnerUploader.edge' : 'RunnerUploader' };\n\nconst t = (key) => {\n  return TranslationService.translate(key, TRANSLATION_SCOPE);\n};\n\nconst template = document.createElement('template');\ntemplate.innerHTML = `\n  <style>\n    :host {\n      display: block;\n      position: relative;\n      border: 1px solid #999;\n      height: 500px;\n      width: 100%;\n    }\n\n    :host > * {\n      box-sizing: border-box;\n    }\n\n    :host([incoming][empty]) #incoming {\n      display: flex;\n    }\n\n    :host([incoming][empty]) #empty-dropzone {\n      display: none;\n    }\n\n    :host([empty]) #upload-button {\n      display: none;\n    }\n    :host([empty]) #empty-dropzone {\n      display: flex;\n    }\n\n    :host #files-list {\n      height: 100%;\n      overflow-y: scroll;\n    }\n\n    :host #empty-dropzone {\n      display: none;\n      height: 100%;\n      justify-content: center;\n      align-items: center;\n      flex-direction: column;\n    }\n\n    :host #incoming {\n      align-items: center;\n      display: none;\n      height: 100%;\n      justify-content: center;\n      position: absolute;\n      width: 100%;\n      z-index: 10;\n    }\n\n    :host #error,\n    :host #uploading,\n    :host #upload-complete {\n      display: none;\n      flex: 1;\n      justify-content: space-between;\n    }\n\n    :host([error]) #error {\n      display: flex;\n    }\n\n    :host([uploading]) #uploading {\n      display: flex;\n    }\n    :host([uploading]) #upload-button,\n    :host([uploading]) #add-files-button {\n      display: none;\n    }\n\n    :host([upload-complete]) #upload-complete {\n      display: flex;\n    }\n    :host([upload-complete]) #upload-button,\n    :host([upload-complete]) #add-files-button {\n      display: none;\n    }\n\n    :host footer {\n      background: rgba(0, 0, 0, 0.1);\n      position: absolute;\n      width: 100%;\n      padding: 8px;\n      bottom: 0;\n      display: flex;\n      justify-content: flex-end;\n    }\n\n    :host footer span {\n      flex: 1;\n    }\n  </style>\n\n  <div id=\"empty-dropzone\">\n    <slot name=\"emptyDropzone\">\n      <h1>${t('emptyHeadingText')}</h1>\n      <h2>${t('emptySubheadingText')}</h2>\n    </slot>\n  </div>\n\n  <div id=\"incoming\">\n    <slot name=\"incoming\">\n      <h1>${t('incoming')}</h1>\n    </slot>\n  </div>\n\n  <div id=\"files-list\"></div>\n\n  <footer>\n    <div id=\"error\">\n      <slot name=\"error\">\n        <span>${t('error')}</span>\n      </slot>\n    </div>\n\n    <div id=\"uploading\">\n      <slot name=\"uploading\">\n        <span>${t('uploading')}</span>\n      </slot>\n    </div>\n\n    <div id=\"upload-complete\">\n      <slot name=\"uploadComplete\">\n        <span>${t('uploadComplete')}</span>\n        <button type=\"button\" id=\"add-more-button\">${t('uploadMore')}</button>\n      </slot>\n    </div>\n\n    <slot name=\"addFilesButton\">\n      <button type=\"button\" id=\"add-files-button\">${t('addFiles')}</button>\n    </slot>\n\n    <slot name=\"uploadButton\">\n      <button type=\"button\" id=\"upload-button\">${t('upload')}</button>\n    </slot>\n  </footer>\n`;\n\nmodule.exports = template;\n","const { VALID_THUMBNAIL_FILE_EXTENSIONS, MAX_THUMBNAIL_SIZE } = require('../constants');\nconst { FileValidationService } = require('./file_validation_service');\n\nclass ThumbnailValidationService {\n  static containsValidExtension(fileName) {\n    return VALID_THUMBNAIL_FILE_EXTENSIONS.includes(FileValidationService.getExtension(fileName));\n  }\n\n  static isValidFileSize(fileSize) {\n    return fileSize <= MAX_THUMBNAIL_SIZE;\n  }\n\n  static valid(file) {\n    return (this.containsValidExtension(file.name) && this.isValidFileSize(file.size));\n  }\n}\n\nmodule.exports = { ThumbnailValidationService };\n","const { FileFactory } = require('./file_factory');\nconst { MAX_UPLOAD_COUNT } = require('../constants');\n\nclass FileUploadService {\n  static addFiles(currentFiles, fileList) {\n    return new Promise((resolve, reject) => {\n      fileList = this.removeDuplicates(currentFiles, fileList);\n\n      if ((currentFiles.length + fileList.length) > MAX_UPLOAD_COUNT) {\n        reject({\n          error: `[RunnerClient] Too many files added. Uploads can have a maximum of ${MAX_UPLOAD_COUNT} files.`\n        });\n      } else {\n        currentFiles.push(...fileList);\n        resolve({ files: currentFiles, filesAdded: fileList.length });\n      }\n    });\n  }\n\n  static removeDuplicates(currentFiles, newFileList) {\n    let existingFileNames = currentFiles.map((file) => file.fullFilePath);\n    let uniqueFileList = [];\n\n    newFileList.forEach(function (file) {\n      if (!existingFileNames.includes(file.name)) {\n        let ffile = new FileFactory(file);\n        uniqueFileList.push(ffile);\n      }\n    });\n\n    return uniqueFileList;\n  }\n\n  static removeFileByUUID(files, uuid) {\n    return new Promise((resolve, reject) => {\n      let fileIdx = files.findIndex(file => { file.uuid === uuid; });\n      if (fileIdx) {\n        resolve(files.splice(fileIdx, 1));\n      } else {\n        reject();\n      }\n    });\n  }\n}\n\nmodule.exports = { FileUploadService };\n","const { FileNameValidationService } = require('./file_name_validation_service');\n\nclass PackageManifestService {\n  static manifestForAsperaTransferEventData(asperaTransferEventData, packageTransferSpecs) {\n    let path = asperaTransferEventData.transfer_spec.paths[0].source;\n    let found = packageTransferSpecs.find((data) => { return data.transfer_spec.paths[0].source === path; });\n    let files = asperaTransferEventData.files.map((fileObj) => { return fileObj.file; });\n    return { id: found.asset_item_id, custom_metadata_fields: this.manifestForFiles(files, path) };\n  }\n\n  static manifestForFiles(files, path) {\n    let manifestFor = (files, fullFolderPath) => {\n      let folderName = this._folderNameFromFullFolderPath(fullFolderPath);\n      let roots      = [];\n      let tree       = { name: folderName, children: roots, count: 0};\n      files.forEach((file) => {\n        let filePath   = file.split(fullFolderPath + '/')[1];\n        let components = filePath.split('/');\n        let length     = components.length;\n        let children   = roots;\n        components.forEach((component, index) => {\n          if (index === length - 1) {\n            if (this._isValid(component)) {\n              children.push({ name: component });\n              tree.count += 1;\n            }\n          } else {\n            let found = children.find((child) => { return child.name === component; });\n            if (found) {\n              children = found.children;\n            } else {\n              let nodeChildren = [];\n              let node = { name: component, children: nodeChildren };\n              children.push(node);\n              children = nodeChildren;\n            }\n          }\n        });\n      });\n\n      this._removeEmptyChildren(tree);\n      return tree;\n    };\n\n    return [ { category: 'tech_info', label: 'manifest', value: manifestFor(files, path) } ];\n  }\n\n  static present(manifest) {\n    let numberOfFiles = 0;\n    let numberOfFolders = 0;\n    let sorted = [];\n\n    let processLevel = (level, pathComponents) => {\n      let items  = [];\n      let levels = [];\n\n      level.forEach((item) => {\n        if (item.hasOwnProperty('children')) {\n          if (this._hasNonFolderChild(item)) {\n            numberOfFolders += 1;\n            levels.push(item);\n          }\n        } else {\n          numberOfFiles += 1;\n          items.push(item);\n        }\n      });\n\n      let processed = this._sort(items).map((item) => {\n        return pathComponents.concat(item.name).join('/');\n      });\n\n      sorted = sorted.concat(processed);\n      this._sort(levels).forEach((level) => { processLevel(level.children, pathComponents.concat(level.name)); });\n    };\n\n    processLevel((manifest.children || []), []);\n\n    return {\n      numberOfFiles: numberOfFiles,\n      numberOfFolders: numberOfFolders,\n      sorted: sorted,\n    };\n  }\n\n  ////\n  // Private methods\n  ////\n\n  static _folderNameFromFullFolderPath(fullFolderPath) {\n    let pathComponents = fullFolderPath.split('/');\n    return pathComponents[pathComponents.length - 1];\n  }\n\n  static _hasNonFolderChild(level) {\n    return level.hasOwnProperty('children') && level.children && level.children.find((item) => {\n      if (item.hasOwnProperty('children')) {\n        return this._hasNonFolderChild(item);\n      } else {\n        return true;\n      }\n    });\n  }\n\n  static _isValid(component) {\n    let hasExtension = FileNameValidationService.containsExtension(component);\n    let firstTwoCharacters = component[0] + component[1];\n    return component.toLowerCase() !== '.ds_store' && firstTwoCharacters !== '._' && (!hasExtension || FileNameValidationService.containsValidExtension(component));\n  }\n\n\n  static _removeEmptyChildren(level) {\n    level.children.forEach((item, index) => {\n      if (item.children) {\n        if (!item.children.length) {\n          level.children.splice(index, 1);\n        } else {\n          this._removeEmptyChildren(item);\n        }\n      }\n    });\n  }\n\n  static _sort(collection) {\n    return collection.sort((a, b) => {\n      let lowerNameA = a.name.toLowerCase();\n      let lowerNameB = b.name.toLowerCase();\n      if (lowerNameA < lowerNameB) {\n        return -1;\n      } else if (lowerNameA > lowerNameB) {\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n  }\n}\n\nmodule.exports = { PackageManifestService };\n","const cloneDeep = require('lodash/cloneDeep');\n\nclass AsperaTransferSpecFormatterService {\n  static formatted(uploadResponseData, files) {\n    let nonPackageTransferSpec = cloneDeep(uploadResponseData.transfer_spec);\n    let packageIndex = 0;\n    let fileIndex = 0;\n    let collection = (nonPackageTransferSpec.paths.length) ? [nonPackageTransferSpec] : [];\n    let packageMappings = cloneDeep(uploadResponseData.package_transfer_specs);\n\n    files.forEach(function (file) {\n      let target;\n\n      if (file.fileObj.isFolder) {\n        let packageTransferSpec = packageMappings[packageIndex].transfer_spec;\n        collection.push(packageTransferSpec);\n        target = packageTransferSpec.paths[0];\n        packageIndex += 1;\n      } else {\n        target = nonPackageTransferSpec.paths[fileIndex];\n        fileIndex += 1;\n      }\n\n      target.source = file.fullFilePath;\n    });\n\n    return { all: collection, packageMappings: packageMappings };\n  }\n}\n\nmodule.exports = { AsperaTransferSpecFormatterService };\n","const { API } = require('../api');\nconst { AsperaConnectService } = require('./aspera_connect_service');\nconst { AsperaTransferSpecFormatterService } = require('./aspera_transfer_spec_formatter_service');\nconst { PackageManifestService } = require('./package_manifest_service');\n\nclass AsperaUploadService {\n  static get activeUploads() {\n    if (!this._activeUploads) {\n      this._activeUploads = {};\n    }\n    return this._activeUploads;\n  }\n\n  static get hasActiveUploads() {\n    return !!Object.keys(this.activeUploads).length;\n  }\n\n  static get asperaConnectService() {\n    if (!this._asperaConnectService) {\n      AsperaConnectService.eventCallbacks = {\n        transferComplete: [this._onTransferComplete.bind(this)]\n      };\n      this._asperaConnectService = AsperaConnectService;\n    }\n\n    return this._asperaConnectService;\n  }\n\n  static upload(currentFiles, options) {\n    let items = currentFiles.map((file) => {\n      let attrs = {\n        name: file.fileName,\n        package: file.fileObj.isFolder,\n      };\n\n      if (file.fileObj.fetchFolderContentsFromDragDropEvent) {\n        attrs.custom_metadata_fields = PackageManifestService.manifestForFiles(file.fileObj.fetchFolderContentsFromDragDropEvent(), file.fileName);\n      }\n\n      return attrs;\n    });\n\n    return API.upload(items, options || {})\n      .then((response) => {\n        let formatted = AsperaTransferSpecFormatterService.formatted(response.data, currentFiles);\n\n        let result = this.asperaConnectService.start(\n          formatted.all,\n          response.data.connection_settings\n        );\n\n        this.activeUploads[result.id] = {\n          files: currentFiles,\n          assetItemAttrsCollection: [],\n          packageMappings: formatted.packageMappings,\n          ingestBatchId: response.data.ingest_batch_id\n        };\n\n        return response;\n      });\n  }\n\n  ////\n  // private methods\n  ////\n\n  /**\n   * Callback executed on AW4 'transfer' event when AsperaConnectService\n   * determines the transfer has completed.\n   * @param {object}  data\n   * @param {object}  data.transfer - transfer data from AW4.Connect\n   * @param {number}  data.id - internal tracking ID for transfer batch. NOT the\n   *                            runner ingest batch ID\n   * @param {string}  data.token - aspera request_id\n   * @param {boolean} data.isBatchComplete\n   */\n  static _onTransferComplete(data) {\n    let activeUpload = this.activeUploads[data.id];\n    if (!activeUpload || !data.isBatchComplete) { return; }\n\n    activeUpload.files.forEach((file) => {\n      if (file.fileObj.isFolder && !file.fileObj.fetchFolderContentsFromDragDropEvent) {\n        let attrs = PackageManifestService.manifestForAsperaTransferEventData(\n          data.transfer,\n          activeUpload.packageMappings\n        );\n        activeUpload.assetItemAttrsCollection.push(attrs);\n      }\n    });\n\n    if (activeUpload.assetItemAttrsCollection.length) {\n      API.bulkUpdateAssetItems(activeUpload.assetItemAttrsCollection);\n    }\n\n    // Set asset items in the completed ingest to \"uploaded\"\n    API.completeIngestBatchUpload(activeUpload.ingestBatchId);\n    delete this.activeUploads[data.id];\n  }\n}\n\nmodule.exports = { AsperaUploadService };\n","class AsperaFileSerializer {\n  static serialize(result) {\n    let files = result.files ? result.files.dataTransfer.files : result.dataTransfer.files;\n\n    return files.map((file) => {\n      let attrs = {\n        name: file.name,\n        size: file.size,\n        isFolder: /directory/i.test(file.type),\n        doesNotRequireExtension: true,\n      };\n\n      if (attrs.isFolder && result.dragDropManifestGrouping) {\n        attrs.fetchFolderContentsFromDragDropEvent = function () {\n          let fileNameComponents = file.name.split(/\\/|\\\\/);\n          let fileName = fileNameComponents[fileNameComponents.length - 1];\n          return result.dragDropManifestGrouping[fileName];\n        };\n      }\n\n      return attrs;\n    });\n  }\n}\n\nmodule.exports = { AsperaFileSerializer };\n","const { AsperaConnectService } = require('./aspera_connect_service');\nconst { LogService } = require('./log_service');\nconst AW4 = window.AW4;\n\nconst DEFAULT_EVENT_CALLBACKS = {\n  all: [],\n  dragEnter: [],\n  dragLeave: [],\n  dragOver: [],\n  drop: []\n};\n\nclass AsperaDragDropService {\n  static addTarget(target, eventCallbacks) {\n    AsperaConnectService.connect.initSession();\n    this.target = target;\n\n    let callbacks = Object.assign({}, DEFAULT_EVENT_CALLBACKS, eventCallbacks);\n    let registerAll = !!callbacks.all.length;\n    if (!!callbacks.dragEnter.length || registerAll) {\n      this._dragEnterCallback = this.dragEnterCallback.bind(this);\n      target.addEventListener('dragenter', this._dragEnterCallback);\n    }\n    if (!!callbacks.dragLeave.length || registerAll) {\n      this._dragLeaveCallback = this.dragLeaveCallback.bind(this);\n      target.addEventListener('dragleave', this._dragLeaveCallback);\n    }\n    if (!!callbacks.dragOver.length || !!callbacks.drop.length || registerAll) {\n      this._dragOverCallback = this.dragOverCallback.bind(this);\n      target.addEventListener('dragover', this._dragOverCallback);\n    }\n    if (!!callbacks.drop.length || registerAll) {\n      this._dropCallback = this.dropCallback.bind(this);\n      target.addEventListener('drop', this._dropCallback);\n    }\n\n    this.eventCallbacks = callbacks;\n  }\n\n  static reset() {\n    this.target.removeEventListener('dragenter', this._dragEnterCallback);\n    this.target.removeEventListener('dragleave', this._dragLeaveCallback);\n    this.target.removeEventListener('dragover', this._dragOverCallback);\n    this.target.removeEventListener('drop', this._dropCallback);\n    this.eventCallbacks = Object.assign({}, DEFAULT_EVENT_CALLBACKS);\n    this._target = undefined;\n  }\n\n  static get target() {\n    return this._target;\n  }\n\n  static set target(el) {\n    if (this._target) {\n      throw new Error('[RunnerClient.AsperaDragDropService] Cannot set more than one target!');\n    }\n    this._target = el;\n  }\n\n  static dragEnterCallback(event) {\n    event.stopPropagation();\n    event.preventDefault();\n    this._executeEventCallbacksFor('dragEnter', { event: event });\n  }\n\n  static dragLeaveCallback(event) {\n    event.stopPropagation();\n    event.preventDefault();\n    this._executeEventCallbacksFor('dragLeave', { event: event });\n  }\n\n  static dragOverCallback(event) {\n    event.stopPropagation();\n    event.preventDefault();\n    this._executeEventCallbacksFor('dragOver', { event: event });\n  }\n\n  static dropCallback(event) {\n    event.stopPropagation();\n    event.preventDefault();\n\n    let filesDropped = event.dataTransfer.files;\n    let data = {};\n    data.dataTransfer = {};\n    data.dataTransfer.files = [];\n    for (let i = 0; i < filesDropped.length; i++) {\n      let fileObject  = {\n        'lastModifiedDate' : filesDropped[i].lastModifiedDate,\n        'name'             : filesDropped[i].name,\n        'size'             : filesDropped[i].size,\n        'type'             : filesDropped[i].type,\n      };\n      data.dataTransfer.files.push(fileObject);\n    }\n\n    this._groupedFolderContents(event).then((manifestGrouping) => {\n      let dropHelper = (response) => {\n        this._executeEventCallbacksFor(\n          'drop',\n          { event: event, files: response, dragDropManifestGrouping: manifestGrouping }\n        );\n      };\n\n      AsperaConnectService.connect.connectHttpRequest(\n        AW4.Connect.HTTP_METHOD.POST,\n        '/connect/file/dropped-files',\n        data,\n        AW4.Utils.SESSION_ID,\n        { success: dropHelper }\n      );\n    });\n  }\n\n  static _executeEventCallbacksFor(eventName, data) {\n    this.eventCallbacks[eventName].forEach((cb) => { cb(data); });\n    this.eventCallbacks.all.forEach((cb) => { cb(data); });\n  }\n\n  static _collectFiles(entries, path, collection) {\n    let promises = [];\n    return new Promise((resolve) => {\n      entries.forEach((entry) => {\n        if (entry.isDirectory) {\n          let reader = entry.createReader();\n          promises.push(new Promise((readResolve, readReject) => {\n            reader.readEntries((childEntries) => {\n              let childReadPromise = this._collectFiles(childEntries, entry.fullPath, collection);\n              promises.push(childReadPromise);\n              childReadPromise.then(readResolve);\n            }, (err) => {\n              LogService.warn(`Failed to read directory contents for ${entry.fullPath}`, err);\n              readReject();\n            });\n          }));\n        } else {\n          collection.push(path + '/' + entry.name);\n        }\n      });\n\n      Promise.all(promises).then(() => {\n        resolve(collection);\n      });\n    });\n  }\n\n  static _groupedFolderContents(evt) {\n    return new Promise((resolve, reject) => {\n      let grouping = {};\n      let promises = [];\n\n      // IE & Safari don't support the `items` property\n      if (!evt.dataTransfer.items) { resolve(grouping); }\n\n      for (let i = 0; i < evt.dataTransfer.items.length; i++) {\n        let item = evt.dataTransfer.items[i];\n        let fsEntry = item.webkitGetAsEntry();\n        if (fsEntry.isDirectory) {\n          let reader = fsEntry.createReader();\n          promises.push(new Promise((dirResolve, dirReject) => {\n            reader.readEntries((entries) => {\n              let dirPromise = this._collectFiles(entries, fsEntry.fullPath, []);\n              promises.push(dirPromise);\n              dirPromise.then((result) => {\n                grouping[fsEntry.name] = result;\n                dirResolve();\n              }, dirReject);\n            }, (err) => {\n              LogService.warn(`Failed to read directory contents for ${fsEntry.fullPath}`, err);\n              dirReject();\n            });\n          }));\n        }\n      }\n\n      Promise.all(promises).then(() => {\n        LogService.debug('[RunnerClient.AsperaDragDropService] Parsed drag-drop contents:', grouping);\n        resolve(grouping);\n      }, reject);\n    });\n  }\n}\n\nmodule.exports = { AsperaDragDropService };\n","const { EVENTS } = require('../../constants');\nconst ELEMENT_NAME = 'runner-uploader--file';\nconst template = document.createElement('template');\ntemplate.innerHTML = `\n  <style>\n    :host {\n      border-bottom: 1px solid #ccc;\n      display: flex;\n      justify-content: space-between;\n      align-items: baseline;\n      padding: 8px;\n      position: relative;\n    }\n\n    :host > * {\n      box-sizing: border-box;\n    }\n\n    :host[hidden] {\n      display: none;\n    }\n\n    :host[locked] #remove {\n      display: none;\n    }\n\n    :host #remove {\n      -webkit-appearance: none;\n      background: none;\n      border: none;\n      cursor: pointer;\n      font-size: medium;\n    }\n\n    :host:before,\n    :host:after {\n      visibility: hidden;\n      pointer-events: none;\n    }\n\n    /* Triangle hack */\n    :host:after {\n      position: absolute;\n      top: calc(100% - 5px);\n      left: 20px;\n      margin-left: -5px;\n      width: 0;\n      border-bottom: 5px solid rgba(0,0,0,0.6);\n      border-right: 5px solid transparent;\n      border-left: 5px solid transparent;\n      content: \" \";\n      font-size: 0;\n      line-height: 0;\n    }\n\n    :host:before {\n      position: absolute;\n      background-color: rgba(0,0,0,0.6);\n      color: white;\n      content: attr(data-tooltip);\n      padding: 4px 8px;\n      border-radius: 4px;\n      top: 100%;\n      z-index: 3;\n    }\n\n    :host:hover:after,\n    :host:hover:before {\n      visibility: visible;\n    }\n  </style>\n  <slot name=\"fileName\"></slot>\n  <button type=\"button\" id=\"remove\">&times;</button>\n`;\n\n// ShadyCSS polyfills scoped styles in browsers that don't support this\n// ShadowDOM feature.\nif (window.ShadyCSS) {\n  window.ShadyCSS.prepareTemplate(template, ELEMENT_NAME);\n}\n\nclass RunnerUploader__File extends HTMLElement {\n  static get elName() { return ELEMENT_NAME; }\n\n  constructor() {\n    super();\n    let shadowRoot = this.attachShadow({mode: 'open'});\n    shadowRoot.appendChild(template.content.cloneNode(true));\n  }\n\n  connectedCallback() {\n    this.shadowRoot.getElementById('remove').addEventListener('click', (evt) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n\n      this.dispatchEvent(\n        new CustomEvent(EVENTS.REMOVE_FILE, {\n          bubbles: true,\n          detail: { uuid: this.dataset.uuid }\n        })\n      );\n    });\n  }\n\n  static get observedAttributes() {\n    return ['locked'];\n  }\n\n  get locked() {\n    return this.hasAttribute('locked');\n  }\n\n  set locked(val) {\n    if (val) {\n      this.setAttribute('locked', '');\n    } else {\n      this.removeAttribute('locked');\n    }\n  }\n\n  static register() {\n    // Register the custom element to the DOM\n    if (!window.customElements.get(this.elName)) {\n      window.customElements.define(\n        this.elName,\n        this\n      );\n    }\n  }\n}\n\nRunnerUploader__File.register();\n","require('./__file'); // <runner-uploader--file> sub-component\nconst { EVENTS } = require('../../constants');\nconst { AsperaConnectService } = require('../../services/aspera_connect_service');\nconst { AsperaDragDropService } = require('../../services/aspera_drag_drop_service');\nconst { AsperaFileSerializer } = require('../../services/aspera_file_serializer');\nconst { AsperaUploadService } = require('../../services/aspera_upload_service');\nconst { FileUploadService } = require('../../services/file_upload_service');\nconst template = require('./template');\nconst ELEMENT_NAME = 'runner-uploader';\n\n// ShadyCSS polyfills scoped styles in browsers that don't support this\n// ShadowDOM feature.\nif (window.ShadyCSS) {\n  window.ShadyCSS.prepareTemplate(template, ELEMENT_NAME);\n}\n\nclass RunnerUploader extends HTMLElement {\n  /**\n   * Name of the HTML element\n   */\n  static get elName() { return ELEMENT_NAME; }\n\n  /**\n   * An instance of the element is created or upgraded. Useful for initializing\n   * state, settings up event listeners, or creating shadow dom. See the spec\n   * for restrictions on what you can do in the constructor.\n   */\n  constructor() {\n    super();\n    this.empty = true;\n    let shadowRoot = this.attachShadow({mode: 'open'});\n    shadowRoot.appendChild(template.content.cloneNode(true));\n  }\n\n  /**\n   * Called every time the element is inserted into the DOM. Useful for running\n   * setup code, such as fetching resources or rendering. Generally, you should\n   * try to delay work until this time.\n   */\n  connectedCallback() {\n    this._connectDragDrop();\n\n    const uploadButton = this.shadowRoot.getElementById('upload-button');\n    uploadButton.addEventListener('click', this.initiateUpload.bind(this));\n\n    const addFilesButton = this.shadowRoot.getElementById('add-files-button');\n    addFilesButton.addEventListener('click', this.addFiles.bind(this));\n\n    const addMoreButton = this.shadowRoot.getElementById('add-more-button');\n    addMoreButton.addEventListener('click', this.reset.bind(this));\n\n    this._filesList.addEventListener(EVENTS.REMOVE_FILE, (evt) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n\n      if (this.uploading) { return; }\n\n      let target = evt.target;\n\n      FileUploadService.removeFileByUUID(this.files, evt.detail.uuid).then(\n        () => {\n          target.remove();\n          this._emitFilesRemovedEvent();\n        }\n      );\n    });\n  }\n\n  /**\n   * Called every time the element is removed from the DOM. Useful for running\n   * clean up code.\n   */\n  disconnectedCallback() {\n    AsperaDragDropService.reset();\n  }\n\n  /**\n   * Elements can react to attribute changes by defining a\n   * attributeChangedCallback. The browser will call this method for every\n   * change to attributes listed in the observedAttributes array.\n   */\n  static get observedAttributes() {\n    return [\n      'destinationFolder',\n      'empty',\n      'error',\n      'incoming',\n      'uploading',\n      'uploadComplete'\n    ];\n  }\n\n  get destinationFolder() {\n    return this.getAttribute('destination-folder');\n  }\n\n  set destinationFolder(val) {\n    if (!val) {\n      this.removeAttribute('destination-folder');\n    } else {\n      if (!/\\d+/.test(val)) {\n        throw new Error(`[<${this.elName}>] destination-folder must be an integer`);\n      }\n      this.setAttribute('destination-folder', val);\n    }\n  }\n\n  get error() {\n    return this.hasAttribute('error');\n  }\n\n  set error(val) {\n    if (val) {\n      this.setAttribute('error', '');\n    } else {\n      this.removeAttribute('error');\n    }\n  }\n\n  get empty() {\n    return this.hasAttribute('empty');\n  }\n\n  set empty(val) {\n    if (val) {\n      this.setAttribute('empty', '');\n    } else {\n      this.removeAttribute('empty');\n    }\n  }\n\n  get folderIDs() {\n    if (!this._folderIDs) {\n      if (this.destinationFolder) {\n        this._folderIDs = [this.destinationFolder];\n      } else {\n        this._folderIDs = [];\n      }\n    }\n    return this._folderIDs;\n  }\n\n  set folderIDs(val) {\n    if (val.constructor.name !== 'Array' || !val.every(id => /\\d+/.test(id))) {\n      throw new Error(`[<${this.elName}>] folderIDs must be an Array of numbers`);\n    }\n    this.destinationFolder = undefined;\n    this._folderIDs = val;\n  }\n\n  get incoming() {\n    return this.hasAttribute('incoming');\n  }\n\n  set incoming(val) {\n    if (val) {\n      this.setAttribute('incoming', '');\n    } else {\n      this.removeAttribute('incoming');\n    }\n  }\n\n  get uploading() {\n    return this.hasAttribute('uploading');\n  }\n\n  set uploading(val) {\n    if (val) {\n      this.setAttribute('uploading', '');\n    } else {\n      this.removeAttribute('uploading');\n    }\n  }\n\n  get uploadComplete() {\n    return this.hasAttribute('upload-complete');\n  }\n\n  set uploadComplete(val) {\n    if (val) {\n      this.setAttribute('upload-complete', '');\n    } else {\n      this.removeAttribute('upload-complete');\n    }\n  }\n\n  get files() {\n    if (!this._files) {\n      this._files = [];\n    }\n    return this._files;\n  }\n\n\n  addFiles() {\n    AsperaConnectService.showFileUploadDialog((result) => {\n      this._addFilesFromAspera(result);\n    });\n  }\n\n  initiateUpload() {\n    if (this.uploading) { return; }\n    if (this.error) { this.error = false; }\n\n    this.dispatchEvent(new CustomEvent(EVENTS.UPLOAD_STARTED, {\n      bubbles: true,\n      detail: {\n        files: this.files,\n      }\n    }));\n    this.uploading = true;\n    Array.from(this._filesList.children).forEach(file => file.locked = true);\n    AsperaDragDropService.reset();\n\n    AsperaUploadService.upload(this.files, { folderIds: this.folderIDs }).then(\n      this._listenForTransferComplete.bind(this),\n      this._handleUploadFailure.bind(this)\n    );\n  }\n\n  reset() {\n    this._files = undefined;\n    Array.from(this._filesList.children).forEach(file => file.remove());\n    this.uploadComplete = false;\n    this.empty = true;\n    this._connectDragDrop();\n  }\n\n  _addFilesFromAspera(data) {\n    FileUploadService.addFiles(\n      this.files,\n      AsperaFileSerializer.serialize(data)\n    ).then(\n      (data) => { this._emitFilesAddedEvent(true, data); },\n      (error) => { this._emitFilesAddedEvent(false, error); },\n    );\n  }\n\n  _connectDragDrop() {\n    AsperaDragDropService.addTarget(this, {\n      dragEnter: [\n        () => { this.incoming = true; }\n      ],\n      dragLeave: [\n        () => { this.incoming = false; }\n      ],\n      drop: [\n        (dragObject) => {\n          this.incoming = false;\n          this._addFilesFromAspera(dragObject);\n        }\n      ]\n    });\n  }\n\n  _handleUploadFailure() {\n    this.dispatchEvent(new CustomEvent(EVENTS.UPLOAD_FAILED, {\n      bubbles: true,\n      detail: {\n        currentFiles: this.files,\n      }\n    }));\n    this.uploading = false;\n    Array.from(this._filesList.children).forEach(file => file.locked = false);\n    this._connectDragDrop();\n    this.error = true;\n  }\n\n  _emitFilesAddedEvent(success, data) {\n    this._fileChangeHandler();\n    this.dispatchEvent(\n      new CustomEvent(EVENTS.FILES_ADDED, {\n        detail: Object.assign({ success }, data),\n        bubbles: true,\n      })\n    );\n  }\n\n  _emitFilesRemovedEvent() {\n    this.dispatchEvent(\n      new CustomEvent(EVENTS.FILES_REMOVED, {\n        detail: { currentFiles: this.files },\n        bubbles: true,\n      })\n    );\n  }\n\n  _listenForTransferComplete(transferInfo) {\n    let requestID = transferInfo.data.connection_settings.request_id;\n    let listener = (transferCompleteInfo) => {\n      if (transferCompleteInfo.token === requestID && transferCompleteInfo.isBatchComplete) {\n        this._uploadComplete();\n\n        let listenerIdx = AsperaConnectService.eventCallbacks.transferComplete.indexOf(listener);\n        AsperaConnectService.eventCallbacks.transferComplete.splice(listenerIdx, 1);\n      }\n    };\n    AsperaConnectService.eventCallbacks.transferComplete.push(listener);\n  }\n\n  _uploadComplete() {\n    this.dispatchEvent(new CustomEvent(EVENTS.UPLOAD_COMPLETE, {\n      bubbles: true,\n      detail: {\n        currentFiles: this.files,\n      }\n    }));\n\n    this.uploading = false;\n    this.uploadComplete = true;\n  }\n\n  _fileChangeHandler() {\n    let renderedUUIDs = Array.from(this._filesList.children).map(li => li.dataset.uuid);\n    this.files.forEach(file => {\n      if (!renderedUUIDs.includes(file.uuid)) {\n        let fileEl = document.createElement('runner-uploader--file');\n        fileEl.innerHTML = `<span slot=\"fileName\">${file.fileName}</span>`;\n        fileEl.dataset.uuid = file.uuid;\n        fileEl.dataset.tooltip = file.fullFilePath;\n        this._filesList.prepend(fileEl);\n      }\n    });\n    this.empty = !this.files.length;\n  }\n\n  get _filesList() {\n    if (!this._filesListEl) {\n      this._filesListEl = this.shadowRoot.getElementById('files-list');\n    }\n    return this._filesListEl;\n  }\n\n  static register() {\n    // Register the custom element to the DOM\n    if (!window.customElements.get(this.elName)) {\n      window.customElements.define(\n        this.elName,\n        this\n      );\n    }\n  }\n}\n\nRunnerUploader.register();\n\nmodule.exports = { RunnerUploader };\n","const RunnerClient = require('../../index');\nconst ELEMENT_NAME = 'runner-client-configuration';\n\nclass RunnerClientConfiguration extends HTMLElement {\n  static get elName() { return ELEMENT_NAME; }\n\n  static get observedAttributes() {\n    return [\n      'token',\n      'method',\n      'environment',\n      'locale',\n      'logLevel'\n    ];\n  }\n\n  connectedCallback() {\n    this.configureClient();\n  }\n\n  configureClient() {\n    RunnerClient.configure({\n      authentication: {\n        method: this.method,\n        token: this.token,\n      },\n      environment: this.environment,\n      locale: this.locale,\n      logLevel: this.logLevel\n    });\n  }\n\n  get method() {\n    return this.getAttribute('method');\n  }\n\n  set method(val) {\n    if (val) {\n      this.setAttribute('method', val);\n    } else {\n      this.removeAttribute('method');\n    }\n    this.configureClient();\n  }\n\n  get token() {\n    return this.getAttribute('token');\n  }\n\n  set token(val) {\n    if (val) {\n      this.setAttribute('token', val);\n    } else {\n      this.removeAttribute('token');\n    }\n    this.configureClient();\n  }\n\n  get environment() {\n    return this.getAttribute('environment');\n  }\n\n  set environment(val) {\n    if (val) {\n      this.setAttribute('environment', val);\n    } else {\n      this.removeAttribute('environment');\n    }\n    this.configureClient();\n  }\n\n  get locale() {\n    return this.getAttribute('locale');\n  }\n\n  set locale(val) {\n    if (val) {\n      this.setAttribute('locale', val);\n    } else {\n      this.removeAttribute('locale');\n    }\n    this.configureClient();\n  }\n\n  get logLevel() {\n    return this.getAttribute('log-level');\n  }\n\n  set logLevel(val) {\n    if (val) {\n      this.setAttribute('log-level', val);\n    } else {\n      this.removeAttribute('log-level');\n    }\n    this.configureClient();\n  }\n\n  static register() {\n    // Register the custom element to the DOM\n    if (!window.customElements.get(this.elName)) {\n      window.customElements.define(\n        this.elName,\n        this\n      );\n    }\n  }\n}\n\nRunnerClientConfiguration.register();\n\nmodule.exports = { RunnerClientConfiguration };\n"],"sourceRoot":""}