(window.webpackJsonpRunnerClient=window.webpackJsonpRunnerClient||[]).push([[1],{152:function(e,n,t){"use strict";var r=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}();var i=t(164).SPEFileDrop,a=function(){function e(){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,null,[{key:"register",value:function(){Promise.resolve(i.register(window))}}]),e}();e.exports={default:a,Components:a}},153:function(e,n,t){"use strict";var r=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}();var i=function(){function e(){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,null,[{key:"getExtension",value:function(e){return(e.toLowerCase().match(/^[^.].*(\.\w+)$/)||[])[1]}},{key:"getFileName",value:function(e){return e.replace(/^[\w\W]*[/\\]/,"")}}]),e}();e.exports={FileValidationService:i}},154:function(e,n,t){"use strict";var r=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}();var i=t(3),a=i.VALID_THUMBNAIL_FILE_EXTENSIONS,o=i.MAX_THUMBNAIL_SIZE,l=t(153).FileValidationService,s=function(){function e(){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,null,[{key:"containsValidExtension",value:function(e){return a.includes(l.getExtension(e))}},{key:"isValidFileSize",value:function(e){return e<=o}},{key:"valid",value:function(e){return this.containsValidExtension(e.name)&&this.isValidFileSize(e.size)}}]),e}();e.exports={ThumbnailValidationService:s}},155:function(e,n,t){"use strict";var r=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}();var i=t(3).UNSUPPORTED_FILE_EXTENSIONS,a=t(153).FileValidationService,o=function(){function e(){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,null,[{key:"containsValidCharacters",value:function(e){return!/:|\/|"|;|'|\?|!|>|<|&|\||\*|@/.test(e)}},{key:"containsExtension",value:function(e){return!!a.getExtension(e)}},{key:"containsValidExtension",value:function(e){return!i.includes(a.getExtension(e))}},{key:"valid",value:function(e,n){return n?this.containsValidCharacters(e):this.containsValidCharacters(e)&&this.containsExtension(e)&&this.containsValidExtension(e)}}]),e}();e.exports={FileNameValidationService:o}},156:function(e,n,t){"use strict";var r=t(155).FileNameValidationService,i=t(153).FileValidationService,a=t(154).ThumbnailValidationService;e.exports={FileFactory:function e(n){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),this.fileName=i.getFileName(n.name),this.fullFilePath=n.name,this.processing=!1,this.size=n.size,this.fileObj=n,this.hasValidCharacters=r.containsValidCharacters(this.fileName),this.hasExtension=r.containsExtension(this.fileName),this.hasValidExtension=r.containsValidExtension(this.fileName),this.valid=function(){return r.valid(this.fileName,this.fileObj.doesNotRequireExtension)},this.validThumbnail=function(){var e=this.valid(),t=a.valid(n);return e&&t}}}},157:function(e,n,t){"use strict";var r=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}();var i=t(156).FileFactory,a=t(3).MAX_UPLOAD_COUNT,o=function(){function e(){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,null,[{key:"addFiles",value:function(e,n){var t=this;return new Promise(function(r,o){n=t.removeDuplicates(e,n),e.length+n.length>a&&o({error:"[RunnerClient] Too many files added. Uploads can have a maximum of "+a+" files."});for(var l=0,s=n.length;l<s;l++){if(e.length>=config.aspera.limit){announcerService.fileUploadLengthInvalid({numCurrentFiles:e.length});break}var c=new i(n[l]);e.unshift(c)}announcerService.fileUploadServiceFileAdded({currentFiles:e,fileWasAdded:n.length}),currentStateService.includesUploadState()&&announcerService.fileUploadServiceAdvancedUploadFileAdded({currentFiles:e,fileWasAdded:n.length})})}},{key:"getFileAtIndex",value:function(e,n){return e[n]}},{key:"getFileNameIndex",value:function(e,n){return n.indexOf(e)}},{key:"getFullFilePaths",value:function(e){return e.map(function(e){return e.fullFilePath})}},{key:"getFileNames",value:function(e){return e.map(function(e){return e.fileName})}},{key:"getStatuses",value:function(e){return e.map(function(e){return e.status})}},{key:"removeDuplicates",value:function(e,n){var t=e.map(function(e){return e.fullFilePath}),r=[];return n.forEach(function(e){-1===t.indexOf(e.name)&&r.push(e)}),r}},{key:"removeFile",value:function(e,n){var t=this.getFullFilePaths(e),r=this.getFileNameIndex(n.fullFilePath,t);this.getFileAtIndex(e,r)&&(e.splice(r,1),announcerService.fileUploadServiceFileRemoved({currentFiles:e}),currentStateService.includesUploadState()&&announcerService.fileUploadServiceAdvancedUploadFileRemoved({currentFiles:e}))}},{key:"someFilesValid",value:function(e){return e.length&&e.some(function(e){return e.valid()})}},{key:"allFilesValid",value:function(e){return e.length&&e.length===this.validFileCount(e)}},{key:"validFileCount",value:function(e){return e.filter(function(e){return e.valid()}).length}}]),e}();e.exports={FileUploadService:o}},158:function(e,n,t){"use strict";var r=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}();var i=t(25).Config,a=function(){function e(){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,null,[{key:"info",value:function(){var e;i.logLevelInt>=2&&(e=console).info.apply(e,arguments)}},{key:"warn",value:function(){var e;i.logLevelInt>=1&&(e=console).warn.apply(e,arguments)}},{key:"debug",value:function(){var e;i.logLevelInt>=3&&(e=console).log.apply(e,arguments)}}]),e}();e.exports={LogService:a}},159:function(e,n,t){"use strict";var r=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}();var i=window.AW4,a={transfer:[],transferComplete:[],status:[],start:[]},o=function(){function e(){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,null,[{key:"initialize",value:function(){this._connect=new i.Connect({id:"RunnerClient"+Math.floor(1e4*Math.random()),dragDropEnabled:!0,minVersion:"3.7.4"}),this.connectInstaller=new i.ConnectInstaller,this._connect.addEventListener(i.Connect.EVENT.STATUS,this._handleAsperaEvent.bind(this)),this.activeTransfers={},this.uploadBatchCount=0}},{key:"start",value:function(e,n){var t=this;this.connect.addEventListener(i.Connect.EVENT.TRANSFER,this._handleAsperaEvent.bind(this));var r=[],a=[];return e.forEach(function(e){var i=new Promise(function(r,i){var o=t.connect.startTransfer(e,n,{success:r,error:i});if(o.error)i(o.error);else{var l=e.token;a.push(l)}});r.push(i)}),this.uploadBatchCount+=1,this.activeTransfers[this.uploadBatchCount]=a,{id:this.uploadBatchCount,promise:Promise.all(r)}}},{key:"_handleAsperaEvent",value:function(e,n){e===i.Connect.EVENT.STATUS&&this._handleAsperaStatusEvent(n),e===i.Connect.EVENT.TRANSFER&&this._handleAsperaTransferEvent(n)}},{key:"_executeEventListenersFor",value:function(e,n){this.eventCallbacks[e].forEach(function(e){return e(n)})}},{key:"_handleAsperaStatusEvent",value:function(e){switch(this._executeEventListenersFor("status",e),e){case i.Connect.STATUS.INITIALIZING:case i.Connect.STATUS.RETRYING:this.connectInstaller.showLaunching();break;case i.Connect.STATUS.FAILED:this.connectInstaller.showDownload();break;case i.Connect.STATUS.OUTDATED:this.connectInstaller.showUpdate();break;case i.Connect.STATUS.RUNNING:this.connectInstaller.connected()}}},{key:"_handleAsperaTransferEvent",value:function(e){var n=this;console.log("Recieved transfer event...",e),e.result_count>0&&e.transfers.forEach(function(e){if(e.transfer_spec){n._executeEventListenersFor("transfer",e);var t=n._getTransferDataFor(e);if(t&&1===e.percentage){var r=n.activeTransfers[t.id];r.splice(t.index,1),0===r.length&&delete n.activeTransfers[t.id],n._executeEventListenersFor("transferComplete",{transfer:e,id:t.id,token:t.token,isBatchComplete:!r.length})}}}),this.hasActiveTransfers||this._removeTransferListener()}},{key:"_getTransferDataFor",value:function(e){for(var n in this.activeTransfers)if(this.activeTransfers.hasOwnProperty(n)){var t=this.activeTransfers[n];if(t){var r=e.transfer_spec.token,i=t.indexOf(r);if(-1!==i)return{id:n,token:r,index:i}}}}},{key:"_removeTransferListener",value:function(){this.connect.removeEventListener(i.Connect.EVENT.TRANSFER)}},{key:"eventCallbacks",set:function(e){this._eventCallbacks=Object.assign({},a,e)},get:function(){return this._eventCallbacks||(this._eventCallbacks=Object.assign({},a)),this._eventCallbacks}},{key:"connect",get:function(){return this._connect||this.initialize(),this._connect}},{key:"hasActiveTransfers",get:function(){return!!Object.keys(this.activeTransfers).length}}]),e}();e.exports={AsperaConnectService:o}},160:function(e,n,t){"use strict";var r=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}();var i=t(159).AsperaConnectService,a=t(158).LogService,o=window.AW4,l={all:[],dragEnter:[],dragLeave:[],dragOver:[],drop:[]},s=function(){function e(){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,null,[{key:"addTarget",value:function(e,n){i.connect.initSession(),this.target=e;var t=Object.assign({},l,n),r=!!t.all.length;(t.dragEnter.length||r)&&(this._dragEnterCallback=this.dragEnterCallback.bind(this),e.addEventListener("dragenter",this._dragEnterCallback)),(t.dragLeave.length||r)&&(this._dragLeaveCallback=this.dragLeaveCallback.bind(this),e.addEventListener("dragleave",this._dragLeaveCallback)),(t.dragOver.length||t.drop.length||r)&&(this._dragOverCallback=this.dragOverCallback.bind(this),e.addEventListener("dragover",this._dragOverCallback)),(t.drop.length||r)&&(this._dropCallback=this.dropCallback.bind(this),e.addEventListener("drop",this._dropCallback)),this.eventCallbacks=t}},{key:"reset",value:function(){this.target.removeEventListener("dragenter",this._dragEnterCallback),this.target.removeEventListener("dragleave",this._dragLeaveCallback),this.target.removeEventListener("dragover",this._dragOverCallback),this.target.removeEventListener("drop",this._dropCallback),this.eventCallbacks=Object.assign({},l),this._target=void 0}},{key:"dragEnterCallback",value:function(e){e.stopPropagation(),e.preventDefault(),this._executeEventCallbacksFor("dragEnter",{event:e})}},{key:"dragLeaveCallback",value:function(e){e.stopPropagation(),e.preventDefault(),this._executeEventCallbacksFor("dragLeave",{event:e})}},{key:"dragOverCallback",value:function(e){e.stopPropagation(),e.preventDefault(),this._executeEventCallbacksFor("dragOver",{event:e})}},{key:"dropCallback",value:function(e){var n=this;e.stopPropagation(),e.preventDefault();var t=this._groupedFolderContents(e),r=e.dataTransfer.files,a={dataTransfer:{}};a.dataTransfer.files=[];for(var l=0;l<r.length;l++){var s={lastModifiedDate:r[l].lastModifiedDate,name:r[l].name,size:r[l].size,type:r[l].type};a.dataTransfer.files.push(s)}i.connect.connectHttpRequest(o.Connect.HTTP_METHOD.POST,"/connect/file/dropped-files",a,o.Utils.SESSION_ID,{success:function(r){n._executeEventCallbacksFor("drop",{event:e,files:r,dragDropManifestGrouping:t})}})}},{key:"_executeEventCallbacksFor",value:function(e,n){this.eventCallbacks[e].forEach(function(e){e(n)}),this.eventCallbacks.all.forEach(function(e){e(n)})}},{key:"_groupedFolderContents",value:function(e){for(var n={},t=function(t){var r=e.dataTransfer.items[t].webkitGetAsEntry();r.isDirectory&&r.createReader().readEntries(function(e){n[r.name]=function e(n,t,r){return n.forEach(function(n){n.isDirectory?function(t){n.createReader().readEntries(function(n){e(n,t,r)},function(e){a.warn("Failed to read directory contents for "+n.fullPath,e)})}(n.fullPath||t):r.push(t+"/"+n.name)}),r}(e,r.fullPath,[])},function(e){a.warn("Failed to read directory contents for "+r.fullPath,e)})},r=0;r<e.dataTransfer.items.length;r++)t(r);return n}},{key:"target",get:function(){return this._target},set:function(e){if(this._target)throw new Error("[RunnerClient.AsperaDragDropService] Cannot set more than one target!");this._target=e}}]),e}();e.exports={AsperaDragDropService:s}},162:function(e,n,t){"use strict";var r=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}();var i=t(161),a=t(25).Config,o=t(50).default,l=function(){function e(){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,null,[{key:"translate",value:function(){var e;return this.i18n||this._configureI18n(),(e=this.i18n).t.apply(e,arguments)}},{key:"_configureI18n",value:function(){i.translations=o,i.locale=a.locale,this.i18n=i}}]),e}();e.exports={TranslationService:l}},163:function(e,n,t){"use strict";var r=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}();function i(){return Reflect.construct(HTMLElement,[],this.__proto__.constructor)}Object.setPrototypeOf(i.prototype,HTMLElement.prototype),Object.setPrototypeOf(i,HTMLElement);var a,o=t(162).TranslationService,l={scope:"SPEFileDrop.Incoming"},s=document.createElement("template");s.innerHTML="\n  <style>\n    :host {\n      align-items: center;\n      display: none;\n      height: 100%;\n      justify-content: center;\n      position: absolute;\n      width: 100%;\n    }\n  </style>\n  <h1>"+(a="headingText",o.translate(a,l))+"</h1>\n",window.ShadyCSS&&window.ShadyCSS.prepareTemplate(s,"spe-file-drop--incoming");var c=function(e){function n(){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);var e=function(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}(this,(n.__proto__||Object.getPrototypeOf(n)).call(this));return e.attachShadow({mode:"open"}).appendChild(s.content.cloneNode(!0)),e}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,i),r(n,null,[{key:"elName",get:function(){return"spe-file-drop--incoming"}}]),r(n,null,[{key:"register",value:function(){window&&window.customElements&&window.customElements.define(this.elName,this)}}]),n}();c.register(),e.exports={SPEFileDrop__Incoming:c}},164:function(e,n,t){"use strict";var r=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}();function i(){return Reflect.construct(HTMLElement,[],this.__proto__.constructor)}Object.setPrototypeOf(i.prototype,HTMLElement.prototype),Object.setPrototypeOf(i,HTMLElement),t(163);var a=t(160).AsperaDragDropService,o=t(157).FileUploadService,l=document.createElement("template");l.innerHTML="\n  <style>\n    :host {\n      display: block;\n      position: relative;\n      border: 1px solid #999;\n      height: 500px;\n      width: 500px;\n      background: #ccc;\n    }\n\n    :host[incoming] spe-file-drop--incoming {\n      display: flex;\n      z-index: 10;\n    }\n  </style>\n  Hello from spe-file-drop!\n  <spe-file-drop--incoming></spe-file-drop--incoming>\n",window.ShadyCSS&&window.ShadyCSS.prepareTemplate(l,"spe-file-drop");var s=function(e){function n(){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);var e=function(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}(this,(n.__proto__||Object.getPrototypeOf(n)).call(this));return e.attachShadow({mode:"open"}).appendChild(l.content.cloneNode(!0)),e}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,i),r(n,null,[{key:"elName",get:function(){return"spe-file-drop"}}]),r(n,[{key:"connectedCallback",value:function(){var e=this;a.addTarget(this,{dragEnter:[function(){e.incoming=!0}],dragLeave:[function(){e.incoming=!1}],drop:[function(n){e.incoming=!1,o.addFiles(e.files,n).then(e._emitFilesAddedEvent,e._emitAddFilesFailedEvent),console.log("addFiles",n)}]})}},{key:"disconnectedCallback",value:function(){a.reset()}},{key:"attributeChangedCallback",value:function(e,n,t){}},{key:"incoming",get:function(){return this.hasAttribute("incoming")},set:function(e){e?this.setAttribute("incoming",""):this.removeAttribute("incoming")}},{key:"files",get:function(){return this._files||(this._files=[]),this._files}}],[{key:"register",value:function(){window.customElements.define(this.elName,this)}},{key:"observedAttributes",get:function(){return["incoming"]}}]),n}();s.register(),e.exports={SPEFileDrop:s}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,